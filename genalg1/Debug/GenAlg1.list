
GenAlg1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008858  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac8  08008af8  08008af8  00009af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a5c0  0800a5c0  0000b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800a5c8  0800a5c8  0000b5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0800a5d0  0800a5d0  0000b5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000098  24000000  0800a5d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a28  24000098  0800a670  0000c098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001ac0  0800a670  0000cac0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d15c  00000000  00000000  0000c0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d4b  00000000  00000000  00029222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001000  00000000  00000000  0002bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c40  00000000  00000000  0002cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba8f  00000000  00000000  0002dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012c1b  00000000  00000000  0006963f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f8e6  00000000  00000000  0007c25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ebb40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066dc  00000000  00000000  001ebb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f2260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008ae0 	.word	0x08008ae0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08008ae0 	.word	0x08008ae0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f003 fbb3 	bl	8003e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f851 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f8b9 	bl	8000840 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f003 f980 	bl	80039d4 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f003 f97d 	bl	80039d4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006da:	2002      	movs	r0, #2
 80006dc:	f003 f97a 	bl	80039d4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006e0:	2101      	movs	r1, #1
 80006e2:	2000      	movs	r0, #0
 80006e4:	f003 fa40 	bl	8003b68 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <main+0xa8>)
 80006ea:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ee:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <main+0xa8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <main+0xa8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <main+0xa8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <main+0xa8>)
 8000704:	2200      	movs	r2, #0
 8000706:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000708:	4916      	ldr	r1, [pc, #88]	@ (8000764 <main+0xa8>)
 800070a:	2000      	movs	r0, #0
 800070c:	f003 fab0 	bl	8003c70 <BSP_COM_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <main+0x5e>
  {
    Error_Handler();
 8000716:	f000 f8fb 	bl	8000910 <Error_Handler>

  /* -- Sample board code to send message over COM1 port ---- */
  //printf("Welcome to STM32 world !\n\r");

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_Off(LED_GREEN);
 800071a:	2000      	movs	r0, #0
 800071c:	f003 f9fa 	bl	8003b14 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8000720:	2001      	movs	r0, #1
 8000722:	f003 f9f7 	bl	8003b14 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8000726:	2002      	movs	r0, #2
 8000728:	f003 f9f4 	bl	8003b14 <BSP_LED_Off>
  while (1)
  {

	  timerCycleDataStruct timecycle;

	  double finalFitness = geneticAlgorithm(&timecycle);
 800072c:	463b      	mov	r3, r7
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fd6e 	bl	8001210 <geneticAlgorithm>
 8000734:	ed87 0b02 	vstr	d0, [r7, #8]

	  BSP_LED_On(LED_GREEN);
 8000738:	2000      	movs	r0, #0
 800073a:	f003 f9c1 	bl	8003ac0 <BSP_LED_On>
	  BSP_LED_On(LED_BLUE);
 800073e:	2001      	movs	r0, #1
 8000740:	f003 f9be 	bl	8003ac0 <BSP_LED_On>
	  BSP_LED_On(LED_RED);
 8000744:	2002      	movs	r0, #2
 8000746:	f003 f9bb 	bl	8003ac0 <BSP_LED_On>

#ifndef TIMINGDATA
	  printf("Final Fitness: %d    Time Elapsed: %ld    Cycle Count:%ld\n\r", (int)finalFitness, timecycle.timeElapsed, timecycle.cycleCount);
 800074a:	ed97 7b02 	vldr	d7, [r7, #8]
 800074e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	ee17 1a90 	vmov	r1, s15
 800075a:	4803      	ldr	r0, [pc, #12]	@ (8000768 <main+0xac>)
 800075c:	f007 fb6c 	bl	8007e38 <iprintf>
  {
 8000760:	bf00      	nop
 8000762:	e7e3      	b.n	800072c <main+0x70>
 8000764:	240000b4 	.word	0x240000b4
 8000768:	08008af8 	.word	0x08008af8

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f007 fbc3 	bl	8007f06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f007 fbbd 	bl	8007f06 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f003 ff27 	bl	80045e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <SystemClock_Config+0xcc>)
 8000798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079a:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <SystemClock_Config+0xcc>)
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007a2:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <SystemClock_Config+0xcc>)
 80007a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b23      	ldr	r3, [pc, #140]	@ (800083c <SystemClock_Config+0xd0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <SystemClock_Config+0xd0>)
 80007b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <SystemClock_Config+0xd0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c8:	bf00      	nop
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <SystemClock_Config+0xd0>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d6:	d1f8      	bne.n	80007ca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007dc:	2301      	movs	r3, #1
 80007de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2340      	movs	r3, #64	@ 0x40
 80007e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 ff31 	bl	8004654 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007f8:	f000 f88a 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	233f      	movs	r3, #63	@ 0x3f
 80007fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f004 fb71 	bl	8004f08 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800082c:	f000 f870 	bl	8000910 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3770      	adds	r7, #112	@ 0x70
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	58000400 	.word	0x58000400
 800083c:	58024800 	.word	0x58024800

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085c:	4a20      	ldr	r2, [pc, #128]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_GPIO_Init+0xa0>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2102      	movs	r1, #2
 80008b4:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <MX_GPIO_Init+0xa4>)
 80008b6:	f003 fe79 	bl	80045ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_GPIO_Init+0xa4>)
 80008d2:	f003 fcbb 	bl	800424c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58021000 	.word	0x58021000

080008e8 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <BSP_PB_Callback+0x24>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	240000c4 	.word	0x240000c4

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_MspInit+0x30>)
 8000924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000928:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x30>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x30>)
 8000934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	58024400 	.word	0x58024400

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f003 fab3 	bl	8003f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}

080009ae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f003 f94a 	bl	8003c4c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <_kill>:

int _kill(int pid, int sig)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009d6:	f007 fb39 	bl	800804c <__errno>
 80009da:	4603      	mov	r3, r0
 80009dc:	2216      	movs	r2, #22
 80009de:	601a      	str	r2, [r3, #0]
  return -1;
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_exit>:

void _exit (int status)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ffe7 	bl	80009cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80009fe:	bf00      	nop
 8000a00:	e7fd      	b.n	80009fe <_exit+0x12>

08000a02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	e00a      	b.n	8000a2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a14:	f3af 8000 	nop.w
 8000a18:	4601      	mov	r1, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	60ba      	str	r2, [r7, #8]
 8000a20:	b2ca      	uxtb	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	3301      	adds	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dbf0      	blt.n	8000a14 <_read+0x12>
  }

  return len;
 8000a32:	687b      	ldr	r3, [r7, #4]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e009      	b.n	8000a62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	60ba      	str	r2, [r7, #8]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 f96c 	bl	8003d34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dbf1      	blt.n	8000a4e <_write+0x12>
  }
  return len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_close>:

int _close(int file)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_isatty>:

int _isatty(int file)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b085      	sub	sp, #20
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f007 fa9e 	bl	800804c <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	24080000 	.word	0x24080000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	240000c8 	.word	0x240000c8
 8000b44:	24001ac0 	.word	0x24001ac0

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b43      	ldr	r3, [pc, #268]	@ (8000c5c <SystemInit+0x114>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a42      	ldr	r2, [pc, #264]	@ (8000c5c <SystemInit+0x114>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b5c:	4b40      	ldr	r3, [pc, #256]	@ (8000c60 <SystemInit+0x118>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	2b06      	cmp	r3, #6
 8000b66:	d807      	bhi.n	8000b78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b68:	4b3d      	ldr	r3, [pc, #244]	@ (8000c60 <SystemInit+0x118>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f023 030f 	bic.w	r3, r3, #15
 8000b70:	4a3b      	ldr	r2, [pc, #236]	@ (8000c60 <SystemInit+0x118>)
 8000b72:	f043 0307 	orr.w	r3, r3, #7
 8000b76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b78:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <SystemInit+0x11c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a39      	ldr	r2, [pc, #228]	@ (8000c64 <SystemInit+0x11c>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b84:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <SystemInit+0x11c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b8a:	4b36      	ldr	r3, [pc, #216]	@ (8000c64 <SystemInit+0x11c>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4935      	ldr	r1, [pc, #212]	@ (8000c64 <SystemInit+0x11c>)
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <SystemInit+0x120>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b96:	4b32      	ldr	r3, [pc, #200]	@ (8000c60 <SystemInit+0x118>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d007      	beq.n	8000bb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <SystemInit+0x118>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f023 030f 	bic.w	r3, r3, #15
 8000baa:	4a2d      	ldr	r2, [pc, #180]	@ (8000c60 <SystemInit+0x118>)
 8000bac:	f043 0307 	orr.w	r3, r3, #7
 8000bb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <SystemInit+0x11c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <SystemInit+0x11c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <SystemInit+0x11c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <SystemInit+0x11c>)
 8000bc6:	4a29      	ldr	r2, [pc, #164]	@ (8000c6c <SystemInit+0x124>)
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <SystemInit+0x11c>)
 8000bcc:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <SystemInit+0x128>)
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <SystemInit+0x11c>)
 8000bd2:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <SystemInit+0x12c>)
 8000bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bd6:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <SystemInit+0x11c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <SystemInit+0x11c>)
 8000bde:	4a25      	ldr	r2, [pc, #148]	@ (8000c74 <SystemInit+0x12c>)
 8000be0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <SystemInit+0x11c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <SystemInit+0x11c>)
 8000bea:	4a22      	ldr	r2, [pc, #136]	@ (8000c74 <SystemInit+0x12c>)
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <SystemInit+0x11c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <SystemInit+0x11c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c64 <SystemInit+0x11c>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c00:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <SystemInit+0x11c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <SystemInit+0x130>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <SystemInit+0x134>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c12:	d202      	bcs.n	8000c1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <SystemInit+0x138>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <SystemInit+0x11c>)
 8000c1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d113      	bne.n	8000c50 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <SystemInit+0x11c>)
 8000c2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <SystemInit+0x11c>)
 8000c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <SystemInit+0x13c>)
 8000c3a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c3e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <SystemInit+0x11c>)
 8000c42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c46:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <SystemInit+0x11c>)
 8000c48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	52002000 	.word	0x52002000
 8000c64:	58024400 	.word	0x58024400
 8000c68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c6c:	02020200 	.word	0x02020200
 8000c70:	01ff0000 	.word	0x01ff0000
 8000c74:	01010280 	.word	0x01010280
 8000c78:	5c001000 	.word	0x5c001000
 8000c7c:	ffff0000 	.word	0xffff0000
 8000c80:	51008108 	.word	0x51008108
 8000c84:	52004000 	.word	0x52004000

08000c88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c98:	bf00      	nop
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f9      	beq.n	8000c9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	58024800 	.word	0x58024800

08000cb8 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8000cbc:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	bf00      	nop
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	7039      	strb	r1, [r7, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	7138      	strb	r0, [r7, #4]
 8000d10:	bf00      	nop
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <_ZNSt13random_deviceC1Ev>:
    /** The type of the generated random value. */
    typedef unsigned int result_type;

    // constructors, destructors and member functions

    random_device() { _M_init("default"); }
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d2e:	f107 0220 	add.w	r2, r7, #32
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <_ZNSt13random_deviceC1Ev+0x48>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f006 f8bd 	bl	8006eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f006 f80d 	bl	8006d64 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 f890 	bl	8006e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 ffe3 	bl	8001d24 <_ZNSt15__new_allocatorIcED1Ev>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4618      	mov	r0, r3
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	08008b34 	.word	0x08008b34

08000d6c <_ZNSt13random_deviceD1Ev>:

    explicit
    random_device(const std::string& __token) { _M_init(__token); }

    ~random_device()
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    { _M_fini(); }
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f005 ffb5 	bl	8006ce4 <_ZNSt13random_device7_M_finiEv>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_ZNSt13random_deviceclEv>:
    double
    entropy() const noexcept
    { return this->_M_getentropy(); }

    result_type
    operator()()
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    { return this->_M_getval(); }
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f005 ffab 	bl	8006ce8 <_ZNSt13random_device9_M_getvalEv>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_Z14generateCitiesRA16_A3_i>:
#include "traveling_spaceship.h"
#include "traveling_spaceship_ext.h"
#include "main.h"

void generateCities(int (&f_targets)[NUM_TARGETS][3])
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < NUM_TARGETS; ++i){
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e018      	b.n	8000ddc <_Z14generateCitiesRA16_A3_i+0x40>
        for(int j = 0; j < 3; ++j){
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	e00f      	b.n	8000dd0 <_Z14generateCitiesRA16_A3_i+0x34>
            f_targets[i][j] = distanceRand(rng);
 8000db0:	490e      	ldr	r1, [pc, #56]	@ (8000dec <_Z14generateCitiesRA16_A3_i+0x50>)
 8000db2:	480f      	ldr	r0, [pc, #60]	@ (8000df0 <_Z14generateCitiesRA16_A3_i+0x54>)
 8000db4:	f000 fda7 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for(int j = 0; j < 3; ++j){
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	ddec      	ble.n	8000db0 <_Z14generateCitiesRA16_A3_i+0x14>
    for(int i = 0; i < NUM_TARGETS; ++i){
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	dde3      	ble.n	8000daa <_Z14generateCitiesRA16_A3_i+0xe>
        }
    }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24000a90 	.word	0x24000a90
 8000df0:	24001464 	.word	0x24001464

08000df4 <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d>:

void calcDistanceMatrix(int (&f_targets)[NUM_TARGETS][3],
                        double (&f_targetDistance)[NUM_TARGETS][NUM_TARGETS])
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    double xDist, yDist, zDist;

    for(int i = 0; i < NUM_TARGETS; ++i){
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e02:	e07f      	b.n	8000f04 <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d+0x110>
        for(int j = 0; j < NUM_TARGETS; ++j){
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
 8000e08:	e076      	b.n	8000ef8 <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d+0x104>
            if(i == j) {
 8000e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d10d      	bne.n	8000e2e <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d+0x3a>
                f_targetDistance[i][j] = 0;
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e16:	0119      	lsls	r1, r3, #4
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	440b      	add	r3, r1
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	18d1      	adds	r1, r2, r3
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e9c1 2300 	strd	r2, r3, [r1]
 8000e2c:	e061      	b.n	8000ef2 <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d+0xfe>
            }
            else {
                xDist = pow(f_targets[i][0] - f_targets[j][0], 2);
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	6a3a      	ldr	r2, [r7, #32]
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4403      	add	r3, r0
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	2102      	movs	r1, #2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fd67 	bl	8001926 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e58:	ed87 0b06 	vstr	d0, [r7, #24]
                yDist = pow(f_targets[i][1] - f_targets[j][1], 2);
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	6a3a      	ldr	r2, [r7, #32]
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4403      	add	r3, r0
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	1acb      	subs	r3, r1, r3
 8000e82:	2102      	movs	r1, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fd4e 	bl	8001926 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e8a:	ed87 0b04 	vstr	d0, [r7, #16]
                zDist = pow(f_targets[i][2] - f_targets[j][2], 2);
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3308      	adds	r3, #8
 8000e9e:	6819      	ldr	r1, [r3, #0]
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	6a3a      	ldr	r2, [r7, #32]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4403      	add	r3, r0
 8000eae:	3308      	adds	r3, #8
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1acb      	subs	r3, r1, r3
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fd35 	bl	8001926 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ebc:	ed87 0b02 	vstr	d0, [r7, #8]

                f_targetDistance[i][j] = sqrt(xDist + yDist + zDist);
 8000ec0:	ed97 6b06 	vldr	d6, [r7, #24]
 8000ec4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ec8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ecc:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ed0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ed4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ed8:	f006 f812 	bl	8006f00 <sqrt>
 8000edc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	0119      	lsls	r1, r3, #4
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	440b      	add	r3, r1
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4413      	add	r3, r2
 8000eee:	ed83 7b00 	vstr	d7, [r3]
        for(int j = 0; j < NUM_TARGETS; ++j){
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	6a3b      	ldr	r3, [r7, #32]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	dd85      	ble.n	8000e0a <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d+0x16>
    for(int i = 0; i < NUM_TARGETS; ++i){
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	3301      	adds	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f77f af7c 	ble.w	8000e04 <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d+0x10>
            }
        }
    }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <_Z22generateInitPopulationRA64_A16_i>:

void generateInitPopulation(int (&population)[PARENTS][NUM_TARGETS])
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    int temp, num;

    //Seed initial population with values in order, will go to shuffle function
    for(int i = 0; i < PARENTS; ++i){
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f24:	e013      	b.n	8000f4e <_Z22generateInitPopulationRA64_A16_i+0x36>
        for (int j = 0; j < NUM_TARGETS; ++j){
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	e00a      	b.n	8000f42 <_Z22generateInitPopulationRA64_A16_i+0x2a>
            population[i][j] = j;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f30:	0111      	lsls	r1, r2, #4
 8000f32:	6a3a      	ldr	r2, [r7, #32]
 8000f34:	440a      	add	r2, r1
 8000f36:	6a39      	ldr	r1, [r7, #32]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < NUM_TARGETS; ++j){
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	ddf1      	ble.n	8000f2c <_Z22generateInitPopulationRA64_A16_i+0x14>
    for(int i = 0; i < PARENTS; ++i){
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f52:	dde8      	ble.n	8000f26 <_Z22generateInitPopulationRA64_A16_i+0xe>
        }
    }

    for(int i = 0; i < PARENTS; ++i){
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	e02e      	b.n	8000fb8 <_Z22generateInitPopulationRA64_A16_i+0xa0>
        for (int j = NUM_TARGETS - 1; j > 0; --j) {
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	e025      	b.n	8000fac <_Z22generateInitPopulationRA64_A16_i+0x94>
            num = targetsRand(rng);
 8000f60:	4922      	ldr	r1, [pc, #136]	@ (8000fec <_Z22generateInitPopulationRA64_A16_i+0xd4>)
 8000f62:	4823      	ldr	r0, [pc, #140]	@ (8000ff0 <_Z22generateInitPopulationRA64_A16_i+0xd8>)
 8000f64:	f000 fccf 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 8000f68:	60f8      	str	r0, [r7, #12]
            temp = population[i][num];
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	0111      	lsls	r1, r2, #4
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	440a      	add	r2, r1
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	60bb      	str	r3, [r7, #8]
            population[i][num] = population[i][j];
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	0111      	lsls	r1, r2, #4
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	440a      	add	r2, r1
 8000f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	0110      	lsls	r0, r2, #4
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4402      	add	r2, r0
 8000f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            population[i][j] = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	0111      	lsls	r1, r2, #4
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	440a      	add	r2, r1
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = NUM_TARGETS - 1; j > 0; --j) {
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dcd6      	bgt.n	8000f60 <_Z22generateInitPopulationRA64_A16_i+0x48>
    for(int i = 0; i < PARENTS; ++i){
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fbc:	ddcd      	ble.n	8000f5a <_Z22generateInitPopulationRA64_A16_i+0x42>
        }
    }

    for(int i = 0; i < PARENTS; ++i){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e00b      	b.n	8000fdc <_Z22generateInitPopulationRA64_A16_i+0xc4>
        for (int j = 0; j < NUM_TARGETS; ++j){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	e002      	b.n	8000fd0 <_Z22generateInitPopulationRA64_A16_i+0xb8>
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	ddf9      	ble.n	8000fca <_Z22generateInitPopulationRA64_A16_i+0xb2>
    for(int i = 0; i < PARENTS; ++i){
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fe0:	ddf0      	ble.n	8000fc4 <_Z22generateInitPopulationRA64_A16_i+0xac>
        }
    }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	@ 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	24000a90 	.word	0x24000a90
 8000ff0:	24001454 	.word	0x24001454

08000ff4 <_Z11fitnessCalcPiRA16_A16_d>:

double fitnessCalc(int *f_individual,
                   double (&f_targetDistance)[NUM_TARGETS][NUM_TARGETS])
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    double totalDistance = 0;
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for(int i = 0; i < NUM_TARGETS - 1; ++i)
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e01a      	b.n	8001046 <_Z11fitnessCalcPiRA16_A16_d+0x52>
    {
        totalDistance += f_targetDistance[f_individual[i]][f_individual[i+1]];
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3301      	adds	r3, #1
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	0109      	lsls	r1, r1, #4
 800102a:	440b      	add	r3, r1
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	ed93 7b00 	vldr	d7, [r3]
 8001034:	ed97 6b04 	vldr	d6, [r7, #16]
 8001038:	ee36 7b07 	vadd.f64	d7, d6, d7
 800103c:	ed87 7b04 	vstr	d7, [r7, #16]
    for(int i = 0; i < NUM_TARGETS - 1; ++i)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b0e      	cmp	r3, #14
 800104a:	dde1      	ble.n	8001010 <_Z11fitnessCalcPiRA16_A16_d+0x1c>
    }
    totalDistance += f_targetDistance[f_individual[NUM_TARGETS - 1]][f_individual[0]];
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	333c      	adds	r3, #60	@ 0x3c
 8001050:	6819      	ldr	r1, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	0109      	lsls	r1, r1, #4
 800105a:	440b      	add	r3, r1
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	ed93 7b00 	vldr	d7, [r3]
 8001064:	ed97 6b04 	vldr	d6, [r7, #16]
 8001068:	ee36 7b07 	vadd.f64	d7, d6, d7
 800106c:	ed87 7b04 	vstr	d7, [r7, #16]

    return totalDistance;
 8001070:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001074:	ec43 2b17 	vmov	d7, r2, r3
}
 8001078:	eeb0 0b47 	vmov.f64	d0, d7
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <_Z9crossoverPiS_S_>:

void crossover(int *f_child, int *f_parent1, int *f_parent2)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    int pivot = pivotRand(rng);
 8001094:	492d      	ldr	r1, [pc, #180]	@ (800114c <_Z9crossoverPiS_S_+0xc4>)
 8001096:	482e      	ldr	r0, [pc, #184]	@ (8001150 <_Z9crossoverPiS_S_+0xc8>)
 8001098:	f000 fc35 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 800109c:	6138      	str	r0, [r7, #16]
    int parent2Index = pivot + 1;
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24

    for(int i = 0; i <= pivot; ++i){
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	e00c      	b.n	80010c4 <_Z9crossoverPiS_S_+0x3c>
        f_child[i] = f_parent1[i];
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	441a      	add	r2, r3
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	440b      	add	r3, r1
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	601a      	str	r2, [r3, #0]
    for(int i = 0; i <= pivot; ++i){
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	3301      	adds	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	6a3a      	ldr	r2, [r7, #32]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	ddee      	ble.n	80010aa <_Z9crossoverPiS_S_+0x22>
    }

    for(int i = pivot + 1; i < NUM_TARGETS; ++i){
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	3301      	adds	r3, #1
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e033      	b.n	800113c <_Z9crossoverPiS_S_+0xb4>

        while(true){

            int alreadyUsed = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
            for(int j = 0; j < i; ++j){
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e010      	b.n	8001100 <_Z9crossoverPiS_S_+0x78>
                if(f_child[j] == f_parent2[parent2Index]){
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	440b      	add	r3, r1
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d101      	bne.n	80010fa <_Z9crossoverPiS_S_+0x72>
                    alreadyUsed = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
            for(int j = 0; j < i; ++j){
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbea      	blt.n	80010de <_Z9crossoverPiS_S_+0x56>
                }
            }

            if(alreadyUsed == 1){
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <_Z9crossoverPiS_S_+0x98>
                parent2Index++;
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	3301      	adds	r3, #1
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
                if(parent2Index >= NUM_TARGETS){
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	2b0f      	cmp	r3, #15
 8001118:	dddc      	ble.n	80010d4 <_Z9crossoverPiS_S_+0x4c>
                    parent2Index = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
 800111e:	e7d9      	b.n	80010d4 <_Z9crossoverPiS_S_+0x4c>
                }
            }
            else{
                f_child[i] = f_parent2[parent2Index];
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	441a      	add	r2, r3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	440b      	add	r3, r1
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	601a      	str	r2, [r3, #0]
                break;
 8001134:	bf00      	nop
    for(int i = pivot + 1; i < NUM_TARGETS; ++i){
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	ddc8      	ble.n	80010d4 <_Z9crossoverPiS_S_+0x4c>
            }
        }
    }
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	24000a90 	.word	0x24000a90
 8001150:	2400145c 	.word	0x2400145c

08001154 <_Z6mutatePi>:

void mutate(int *f_child)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    int mutate1ind = targetsRand(rng);
 800115c:	4915      	ldr	r1, [pc, #84]	@ (80011b4 <_Z6mutatePi+0x60>)
 800115e:	4816      	ldr	r0, [pc, #88]	@ (80011b8 <_Z6mutatePi+0x64>)
 8001160:	f000 fbd1 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 8001164:	6178      	str	r0, [r7, #20]
    int mutate2ind = targetsRand(rng);
 8001166:	4913      	ldr	r1, [pc, #76]	@ (80011b4 <_Z6mutatePi+0x60>)
 8001168:	4813      	ldr	r0, [pc, #76]	@ (80011b8 <_Z6mutatePi+0x64>)
 800116a:	f000 fbcc 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 800116e:	6138      	str	r0, [r7, #16]
    int mutateChance = mutateRand(rng);
 8001170:	4910      	ldr	r1, [pc, #64]	@ (80011b4 <_Z6mutatePi+0x60>)
 8001172:	4812      	ldr	r0, [pc, #72]	@ (80011bc <_Z6mutatePi+0x68>)
 8001174:	f000 fbc7 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 8001178:	60f8      	str	r0, [r7, #12]

    if(mutateChance <= MUTATIONRATE){
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	dc15      	bgt.n	80011ac <_Z6mutatePi+0x58>
        int temp = f_child[mutate1ind];
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60bb      	str	r3, [r7, #8]
        f_child[mutate1ind] = f_child[mutate2ind];
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	441a      	add	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	440b      	add	r3, r1
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	601a      	str	r2, [r3, #0]
        f_child[mutate2ind] = temp;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	601a      	str	r2, [r3, #0]
    }
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24000a90 	.word	0x24000a90
 80011b8:	24001454 	.word	0x24001454
 80011bc:	24001474 	.word	0x24001474

080011c0 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 fe60 	bl	8001e92 <_ZNSt15__new_allocatorISt4pairIdiEED1Ev>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fbb9 	bl	800195e <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE12_Vector_implC1Ev>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZNSt6vectorISt4pairIdiESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ffeb 	bl	80011dc <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EEC1Ev>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <geneticAlgorithm>:

extern "C" double geneticAlgorithm(timerCycleDataStruct *f_timeCycleData)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	f5ad 5d26 	sub.w	sp, sp, #10624	@ 0x2980
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800121e:	f6a3 13ac 	subw	r3, r3, #2476	@ 0x9ac
 8001222:	6018      	str	r0, [r3, #0]

#ifdef TIMINGDATA
	uint32_t firstCycleBreakout, secondCycleBreakout, firstTimeBreakout, secondTimeBreakout;
#endif

	*SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001224:	4bb6      	ldr	r3, [pc, #728]	@ (8001500 <geneticAlgorithm+0x2f0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4bb5      	ldr	r3, [pc, #724]	@ (8001500 <geneticAlgorithm+0x2f0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001232:	601a      	str	r2, [r3, #0]
	*DWT_LAR = 0xC5ACCE55; // enable access
 8001234:	4bb3      	ldr	r3, [pc, #716]	@ (8001504 <geneticAlgorithm+0x2f4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4ab3      	ldr	r2, [pc, #716]	@ (8001508 <geneticAlgorithm+0x2f8>)
 800123a:	601a      	str	r2, [r3, #0]
	*DWT_CYCCNT = 0; // reset the counter
 800123c:	4bb3      	ldr	r3, [pc, #716]	@ (800150c <geneticAlgorithm+0x2fc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
	*DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 8001244:	4bb2      	ldr	r3, [pc, #712]	@ (8001510 <geneticAlgorithm+0x300>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4bb1      	ldr	r3, [pc, #708]	@ (8001510 <geneticAlgorithm+0x300>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]

    // Targets array, NUM_TARGETS x 3 ()
    int targets[NUM_TARGETS][3] = { { } };
 8001254:	f642 13b0 	movw	r3, #10672	@ 0x29b0
 8001258:	443b      	add	r3, r7
 800125a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800125e:	4618      	mov	r0, r3
 8001260:	23c0      	movs	r3, #192	@ 0xc0
 8001262:	461a      	mov	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	f006 fe4e 	bl	8007f06 <memset>

    generateCities(targets);
 800126a:	f642 0368 	movw	r3, #10344	@ 0x2868
 800126e:	443b      	add	r3, r7
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd93 	bl	8000d9c <_Z14generateCitiesRA16_A3_i>

    //Genetic Algorithm Start!
    ////////////////////////////////////////////////////////

    firstCycleCount = *DWT_CYCCNT;
 8001276:	4ba5      	ldr	r3, [pc, #660]	@ (800150c <geneticAlgorithm+0x2fc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f507 5226 	add.w	r2, r7, #10624	@ 0x2980
 8001280:	6013      	str	r3, [r2, #0]
    firstTimestamp = HAL_GetTick();
 8001282:	f002 fe59 	bl	8003f38 <HAL_GetTick>
 8001286:	f642 137c 	movw	r3, #10620	@ 0x297c
 800128a:	443b      	add	r3, r7
 800128c:	6018      	str	r0, [r3, #0]
    firstCycleBreakout =  *DWT_CYCCNT;
    firstTimeBreakout = HAL_GetTick();
#endif

    // Distances between all targets, NUM_TARGETS x NUM_TARGETS
    double targetDistance[NUM_TARGETS][NUM_TARGETS] = { { } };
 800128e:	f642 13b0 	movw	r3, #10672	@ 0x29b0
 8001292:	443b      	add	r3, r7
 8001294:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8001298:	4618      	mov	r0, r3
 800129a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800129e:	461a      	mov	r2, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	f006 fe30 	bl	8007f06 <memset>

    // Initial population array, PARENTS x NUM_TARGETS
    int population[PARENTS][NUM_TARGETS] = { { } };
 80012a6:	f641 13b0 	movw	r3, #6576	@ 0x19b0
 80012aa:	443b      	add	r3, r7
 80012ac:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 80012b0:	4618      	mov	r0, r3
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	461a      	mov	r2, r3
 80012b8:	2100      	movs	r1, #0
 80012ba:	f006 fe24 	bl	8007f06 <memset>

    // Selection Population, POPULATION x NUM_TARGETS
    // Top half is best 50% from population
    // Bottom half is children obtained from crossover
    int selectionPop[PARENTS][NUM_TARGETS] = { { } };
 80012be:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80012c2:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 80012c6:	4618      	mov	r0, r3
 80012c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012cc:	461a      	mov	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f006 fe19 	bl	8007f06 <memset>

    // One single created child population, NUM_TARGETS
    int child[NUM_TARGETS] = { };
 80012d4:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80012d8:	f6a3 1388 	subw	r3, r3, #2440	@ 0x988
 80012dc:	4618      	mov	r0, r3
 80012de:	2340      	movs	r3, #64	@ 0x40
 80012e0:	461a      	mov	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f006 fe0f 	bl	8007f06 <memset>

    std::vector<std::pair<double, int> > fitnessPop;
 80012e8:	4b8a      	ldr	r3, [pc, #552]	@ (8001514 <geneticAlgorithm+0x304>)
 80012ea:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80012ee:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80012f2:	443b      	add	r3, r7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff7e 	bl	80011f6 <_ZNSt6vectorISt4pairIdiESaIS1_EEC1Ev>
    fitnessPop.reserve(PARENTS);
 80012fa:	4b86      	ldr	r3, [pc, #536]	@ (8001514 <geneticAlgorithm+0x304>)
 80012fc:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8001300:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001304:	443b      	add	r3, r7
 8001306:	2140      	movs	r1, #64	@ 0x40
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fb87 	bl	8001a1c <_ZNSt6vectorISt4pairIdiESaIS1_EE7reserveEj>
    for(int i = 0; i < PARENTS; ++i){
 800130e:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001312:	f6a3 1398 	subw	r3, r3, #2456	@ 0x998
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e035      	b.n	8001388 <geneticAlgorithm+0x178>
        fitnessPop.push_back(std::make_pair(0, i));
 800131c:	2300      	movs	r3, #0
 800131e:	f642 1244 	movw	r2, #10564	@ 0x2944
 8001322:	443a      	add	r2, r7
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	f642 103c 	movw	r0, #10556	@ 0x293c
 800132a:	4438      	add	r0, r7
 800132c:	4b7a      	ldr	r3, [pc, #488]	@ (8001518 <geneticAlgorithm+0x308>)
 800132e:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8001332:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001336:	443b      	add	r3, r7
 8001338:	f642 1144 	movw	r1, #10564	@ 0x2944
 800133c:	4439      	add	r1, r7
 800133e:	461a      	mov	r2, r3
 8001340:	f000 fbf0 	bl	8001b24 <_ZSt9make_pairIiRiESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS2_INS3_IT0_E4typeEE6__typeEEOS4_OS9_>
 8001344:	f642 123c 	movw	r2, #10556	@ 0x293c
 8001348:	443a      	add	r2, r7
 800134a:	f642 1328 	movw	r3, #10536	@ 0x2928
 800134e:	443b      	add	r3, r7
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fbfd 	bl	8001b52 <_ZNSt4pairIdiEC1IiiLb1EEEOS_IT_T0_E>
 8001358:	f642 1228 	movw	r2, #10536	@ 0x2928
 800135c:	443a      	add	r2, r7
 800135e:	4b6d      	ldr	r3, [pc, #436]	@ (8001514 <geneticAlgorithm+0x304>)
 8001360:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8001364:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001368:	443b      	add	r3, r7
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fc10 	bl	8001b92 <_ZNSt6vectorISt4pairIdiESaIS1_EE9push_backEOS1_>
    for(int i = 0; i < PARENTS; ++i){
 8001372:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001376:	f6a3 1398 	subw	r3, r3, #2456	@ 0x998
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001382:	f6a3 1398 	subw	r3, r3, #2456	@ 0x998
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800138c:	f6a3 1398 	subw	r3, r3, #2456	@ 0x998
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b3f      	cmp	r3, #63	@ 0x3f
 8001394:	ddc2      	ble.n	800131c <geneticAlgorithm+0x10c>
    }

    calcDistanceMatrix(targets, targetDistance);
 8001396:	f242 0268 	movw	r2, #8296	@ 0x2068
 800139a:	443a      	add	r2, r7
 800139c:	f642 0368 	movw	r3, #10344	@ 0x2868
 80013a0:	443b      	add	r3, r7
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fd25 	bl	8000df4 <_Z18calcDistanceMatrixRA16_A3_iRA16_A16_d>

    firstCycleBreakout =  *DWT_CYCCNT;
    firstTimeBreakout = HAL_GetTick();
#endif

    generateInitPopulation(population);
 80013aa:	4b5c      	ldr	r3, [pc, #368]	@ (800151c <geneticAlgorithm+0x30c>)
 80013ac:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80013b0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80013b4:	443b      	add	r3, r7
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fdae 	bl	8000f18 <_Z22generateInitPopulationRA64_A16_i>
    firstTimeBreakout = HAL_GetTick();
#endif

    /* Genetic algorithm iteration */
    //////////////////////////////////////////////////
   for(int gen = 0; gen < GENERATIONS; gen++){
 80013bc:	2300      	movs	r3, #0
 80013be:	f642 12ac 	movw	r2, #10668	@ 0x29ac
 80013c2:	443a      	add	r2, r7
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e1ce      	b.n	8001766 <geneticAlgorithm+0x556>

        //vector pair, with fitness of entire population, and indexes of those fitness location
        //when compared to original population
        for (int i = 0; i < PARENTS; ++i){
 80013c8:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80013cc:	f6a3 139c 	subw	r3, r3, #2460	@ 0x99c
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e051      	b.n	800147a <geneticAlgorithm+0x26a>
            double fitness = fitnessCalc(population[i], targetDistance);
 80013d6:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80013da:	f6a3 139c 	subw	r3, r3, #2460	@ 0x99c
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b4e      	ldr	r3, [pc, #312]	@ (800151c <geneticAlgorithm+0x30c>)
 80013e2:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80013e6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80013ea:	443b      	add	r3, r7
 80013ec:	0192      	lsls	r2, r2, #6
 80013ee:	4413      	add	r3, r2
 80013f0:	f242 0268 	movw	r2, #8296	@ 0x2068
 80013f4:	443a      	add	r2, r7
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fdfb 	bl	8000ff4 <_Z11fitnessCalcPiRA16_A16_d>
 80013fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001402:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <geneticAlgorithm+0x310>)
 8001404:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8001408:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800140c:	443b      	add	r3, r7
 800140e:	ed03 7b02 	vstr	d7, [r3, #-8]
            fitnessPop[i] = std::make_pair(fitness, i);
 8001412:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001416:	f6a3 139c 	subw	r3, r3, #2460	@ 0x99c
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <geneticAlgorithm+0x304>)
 8001420:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8001424:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001428:	443b      	add	r3, r7
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fbc1 	bl	8001bb4 <_ZNSt6vectorISt4pairIdiESaIS1_EEixEj>
 8001432:	4604      	mov	r4, r0
 8001434:	f642 1048 	movw	r0, #10568	@ 0x2948
 8001438:	4438      	add	r0, r7
 800143a:	4a3a      	ldr	r2, [pc, #232]	@ (8001524 <geneticAlgorithm+0x314>)
 800143c:	f642 13b0 	movw	r3, #10672	@ 0x29b0
 8001440:	4413      	add	r3, r2
 8001442:	19da      	adds	r2, r3, r7
 8001444:	4b38      	ldr	r3, [pc, #224]	@ (8001528 <geneticAlgorithm+0x318>)
 8001446:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 800144a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800144e:	443b      	add	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	f000 fbbf 	bl	8001bd4 <_ZSt9make_pairIRdRiESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>
 8001456:	f642 1348 	movw	r3, #10568	@ 0x2948
 800145a:	443b      	add	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4620      	mov	r0, r4
 8001460:	f000 fbcf 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
        for (int i = 0; i < PARENTS; ++i){
 8001464:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001468:	f6a3 139c 	subw	r3, r3, #2460	@ 0x99c
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001474:	f6a3 139c 	subw	r3, r3, #2460	@ 0x99c
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800147e:	f6a3 139c 	subw	r3, r3, #2460	@ 0x99c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b3f      	cmp	r3, #63	@ 0x3f
 8001486:	dda6      	ble.n	80013d6 <geneticAlgorithm+0x1c6>

    firstCycleBreakout =  *DWT_CYCCNT;
    firstTimeBreakout = HAL_GetTick();
#endif

        std::nth_element(fitnessPop.begin(), fitnessPop.begin() + HALF_PARENTS, fitnessPop.end());
 8001488:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <geneticAlgorithm+0x304>)
 800148a:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 800148e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001492:	443b      	add	r3, r7
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fbd1 	bl	8001c3c <_ZNSt6vectorISt4pairIdiESaIS1_EE5beginEv>
 800149a:	4604      	mov	r4, r0
 800149c:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <geneticAlgorithm+0x304>)
 800149e:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80014a2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80014a6:	443b      	add	r3, r7
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fbc7 	bl	8001c3c <_ZNSt6vectorISt4pairIdiESaIS1_EE5beginEv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f642 125c 	movw	r2, #10588	@ 0x295c
 80014b4:	443a      	add	r2, r7
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	f642 135c 	movw	r3, #10588	@ 0x295c
 80014bc:	443b      	add	r3, r7
 80014be:	2120      	movs	r1, #32
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fbcb 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80014c6:	4605      	mov	r5, r0
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <geneticAlgorithm+0x304>)
 80014ca:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80014ce:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80014d2:	443b      	add	r3, r7
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fbd9 	bl	8001c8c <_ZNSt6vectorISt4pairIdiESaIS1_EE3endEv>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4629      	mov	r1, r5
 80014e0:	4620      	mov	r0, r4
 80014e2:	f000 fbe4 	bl	8001cae <_ZSt11nth_elementIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_>

        for (int i = 0; i < HALF_PARENTS; ++i){
 80014e6:	2300      	movs	r3, #0
 80014e8:	f642 12a8 	movw	r2, #10664	@ 0x29a8
 80014ec:	443a      	add	r2, r7
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e061      	b.n	80015b6 <geneticAlgorithm+0x3a6>
            for(int j = 0; j < NUM_TARGETS; ++j){
 80014f2:	2300      	movs	r3, #0
 80014f4:	f642 12a4 	movw	r2, #10660	@ 0x29a4
 80014f8:	443a      	add	r2, r7
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e04c      	b.n	8001598 <geneticAlgorithm+0x388>
 80014fe:	bf00      	nop
 8001500:	24000014 	.word	0x24000014
 8001504:	24000010 	.word	0x24000010
 8001508:	c5acce55 	.word	0xc5acce55
 800150c:	24000008 	.word	0x24000008
 8001510:	2400000c 	.word	0x2400000c
 8001514:	ffffd66c 	.word	0xffffd66c
 8001518:	ffffd668 	.word	0xffffd668
 800151c:	ffffe6b8 	.word	0xffffe6b8
 8001520:	ffffd660 	.word	0xffffd660
 8001524:	ffffd664 	.word	0xffffd664
 8001528:	ffffd658 	.word	0xffffd658
                selectionPop[i][j] = population[fitnessPop[i].second][j];
 800152c:	f642 13a8 	movw	r3, #10664	@ 0x29a8
 8001530:	443b      	add	r3, r7
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4ba8      	ldr	r3, [pc, #672]	@ (80017d8 <geneticAlgorithm+0x5c8>)
 8001536:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 800153a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800153e:	443b      	add	r3, r7
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fb36 	bl	8001bb4 <_ZNSt6vectorISt4pairIdiESaIS1_EEixEj>
 8001548:	4603      	mov	r3, r0
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	f641 13b0 	movw	r3, #6576	@ 0x19b0
 8001550:	443b      	add	r3, r7
 8001552:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8001556:	0111      	lsls	r1, r2, #4
 8001558:	f642 12a4 	movw	r2, #10660	@ 0x29a4
 800155c:	443a      	add	r2, r7
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	440a      	add	r2, r1
 8001562:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001566:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800156a:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 800156e:	f642 12a8 	movw	r2, #10664	@ 0x29a8
 8001572:	443a      	add	r2, r7
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	0110      	lsls	r0, r2, #4
 8001578:	f642 12a4 	movw	r2, #10660	@ 0x29a4
 800157c:	443a      	add	r2, r7
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	4402      	add	r2, r0
 8001582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for(int j = 0; j < NUM_TARGETS; ++j){
 8001586:	f642 13a4 	movw	r3, #10660	@ 0x29a4
 800158a:	443b      	add	r3, r7
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	f642 12a4 	movw	r2, #10660	@ 0x29a4
 8001594:	443a      	add	r2, r7
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	f642 13a4 	movw	r3, #10660	@ 0x29a4
 800159c:	443b      	add	r3, r7
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	ddc3      	ble.n	800152c <geneticAlgorithm+0x31c>
        for (int i = 0; i < HALF_PARENTS; ++i){
 80015a4:	f642 13a8 	movw	r3, #10664	@ 0x29a8
 80015a8:	443b      	add	r3, r7
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	f642 12a8 	movw	r2, #10664	@ 0x29a8
 80015b2:	443a      	add	r2, r7
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	f642 13a8 	movw	r3, #10664	@ 0x29a8
 80015ba:	443b      	add	r3, r7
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b1f      	cmp	r3, #31
 80015c0:	dd97      	ble.n	80014f2 <geneticAlgorithm+0x2e2>

    firstCycleBreakout =  *DWT_CYCCNT;
    firstTimeBreakout = HAL_GetTick();
#endif

        for(int i = HALF_PARENTS; i < PARENTS; ++i)
 80015c2:	2320      	movs	r3, #32
 80015c4:	f642 12a0 	movw	r2, #10656	@ 0x29a0
 80015c8:	443a      	add	r2, r7
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e071      	b.n	80016b2 <geneticAlgorithm+0x4a2>
        {
            int parent1ind = crossoverRand(rng);
 80015ce:	4983      	ldr	r1, [pc, #524]	@ (80017dc <geneticAlgorithm+0x5cc>)
 80015d0:	4883      	ldr	r0, [pc, #524]	@ (80017e0 <geneticAlgorithm+0x5d0>)
 80015d2:	f000 f998 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 80015d6:	f642 1364 	movw	r3, #10596	@ 0x2964
 80015da:	443b      	add	r3, r7
 80015dc:	6018      	str	r0, [r3, #0]
            int parent2ind = crossoverRand(rng);
 80015de:	497f      	ldr	r1, [pc, #508]	@ (80017dc <geneticAlgorithm+0x5cc>)
 80015e0:	487f      	ldr	r0, [pc, #508]	@ (80017e0 <geneticAlgorithm+0x5d0>)
 80015e2:	f000 f990 	bl	8001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>
 80015e6:	f642 1360 	movw	r3, #10592	@ 0x2960
 80015ea:	443b      	add	r3, r7
 80015ec:	6018      	str	r0, [r3, #0]

            crossover(child, selectionPop[parent1ind], selectionPop[parent2ind]);
 80015ee:	4b7d      	ldr	r3, [pc, #500]	@ (80017e4 <geneticAlgorithm+0x5d4>)
 80015f0:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80015f4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80015f8:	443b      	add	r3, r7
 80015fa:	f642 1264 	movw	r2, #10596	@ 0x2964
 80015fe:	443a      	add	r2, r7
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	0192      	lsls	r2, r2, #6
 8001604:	1899      	adds	r1, r3, r2
 8001606:	4b77      	ldr	r3, [pc, #476]	@ (80017e4 <geneticAlgorithm+0x5d4>)
 8001608:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 800160c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001610:	443b      	add	r3, r7
 8001612:	f642 1260 	movw	r2, #10592	@ 0x2960
 8001616:	443a      	add	r2, r7
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	0192      	lsls	r2, r2, #6
 800161c:	441a      	add	r2, r3
 800161e:	4b72      	ldr	r3, [pc, #456]	@ (80017e8 <geneticAlgorithm+0x5d8>)
 8001620:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8001624:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001628:	443b      	add	r3, r7
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fd2c 	bl	8001088 <_Z9crossoverPiS_S_>
            mutate(child);
 8001630:	4b6d      	ldr	r3, [pc, #436]	@ (80017e8 <geneticAlgorithm+0x5d8>)
 8001632:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8001636:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800163a:	443b      	add	r3, r7
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fd89 	bl	8001154 <_Z6mutatePi>

            for(int j = 0; j < NUM_TARGETS; ++j){
 8001642:	2300      	movs	r3, #0
 8001644:	f642 129c 	movw	r2, #10652	@ 0x299c
 8001648:	443a      	add	r2, r7
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e022      	b.n	8001694 <geneticAlgorithm+0x484>
                selectionPop[i][j] = child[j];
 800164e:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001652:	f6a3 1388 	subw	r3, r3, #2440	@ 0x988
 8001656:	f642 129c 	movw	r2, #10652	@ 0x299c
 800165a:	443a      	add	r2, r7
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001662:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8001666:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 800166a:	f642 12a0 	movw	r2, #10656	@ 0x29a0
 800166e:	443a      	add	r2, r7
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	0110      	lsls	r0, r2, #4
 8001674:	f642 129c 	movw	r2, #10652	@ 0x299c
 8001678:	443a      	add	r2, r7
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4402      	add	r2, r0
 800167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for(int j = 0; j < NUM_TARGETS; ++j){
 8001682:	f642 139c 	movw	r3, #10652	@ 0x299c
 8001686:	443b      	add	r3, r7
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	f642 129c 	movw	r2, #10652	@ 0x299c
 8001690:	443a      	add	r2, r7
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	f642 139c 	movw	r3, #10652	@ 0x299c
 8001698:	443b      	add	r3, r7
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	ddd6      	ble.n	800164e <geneticAlgorithm+0x43e>
        for(int i = HALF_PARENTS; i < PARENTS; ++i)
 80016a0:	f642 13a0 	movw	r3, #10656	@ 0x29a0
 80016a4:	443b      	add	r3, r7
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f642 12a0 	movw	r2, #10656	@ 0x29a0
 80016ae:	443a      	add	r2, r7
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	f642 13a0 	movw	r3, #10656	@ 0x29a0
 80016b6:	443b      	add	r3, r7
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80016bc:	dd87      	ble.n	80015ce <geneticAlgorithm+0x3be>
            }

        }

        for(int i = 0; i < PARENTS; ++i){
 80016be:	2300      	movs	r3, #0
 80016c0:	f642 1298 	movw	r2, #10648	@ 0x2998
 80016c4:	443a      	add	r2, r7
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e03e      	b.n	8001748 <geneticAlgorithm+0x538>
            for(int j = 0; j < NUM_TARGETS; ++j)
 80016ca:	2300      	movs	r3, #0
 80016cc:	f642 1294 	movw	r2, #10644	@ 0x2994
 80016d0:	443a      	add	r2, r7
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e029      	b.n	800172a <geneticAlgorithm+0x51a>
            {
                population[i][j] = selectionPop[i][j];
 80016d6:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80016da:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 80016de:	f642 1298 	movw	r2, #10648	@ 0x2998
 80016e2:	443a      	add	r2, r7
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	0111      	lsls	r1, r2, #4
 80016e8:	f642 1294 	movw	r2, #10644	@ 0x2994
 80016ec:	443a      	add	r2, r7
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	440a      	add	r2, r1
 80016f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016f6:	f641 13b0 	movw	r3, #6576	@ 0x19b0
 80016fa:	443b      	add	r3, r7
 80016fc:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8001700:	f642 1298 	movw	r2, #10648	@ 0x2998
 8001704:	443a      	add	r2, r7
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	0110      	lsls	r0, r2, #4
 800170a:	f642 1294 	movw	r2, #10644	@ 0x2994
 800170e:	443a      	add	r2, r7
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	4402      	add	r2, r0
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for(int j = 0; j < NUM_TARGETS; ++j)
 8001718:	f642 1394 	movw	r3, #10644	@ 0x2994
 800171c:	443b      	add	r3, r7
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	f642 1294 	movw	r2, #10644	@ 0x2994
 8001726:	443a      	add	r2, r7
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	f642 1394 	movw	r3, #10644	@ 0x2994
 800172e:	443b      	add	r3, r7
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	ddcf      	ble.n	80016d6 <geneticAlgorithm+0x4c6>
        for(int i = 0; i < PARENTS; ++i){
 8001736:	f642 1398 	movw	r3, #10648	@ 0x2998
 800173a:	443b      	add	r3, r7
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	f642 1298 	movw	r2, #10648	@ 0x2998
 8001744:	443a      	add	r2, r7
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	f642 1398 	movw	r3, #10648	@ 0x2998
 800174c:	443b      	add	r3, r7
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b3f      	cmp	r3, #63	@ 0x3f
 8001752:	ddba      	ble.n	80016ca <geneticAlgorithm+0x4ba>
   for(int gen = 0; gen < GENERATIONS; gen++){
 8001754:	f642 13ac 	movw	r3, #10668	@ 0x29ac
 8001758:	443b      	add	r3, r7
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	f642 12ac 	movw	r2, #10668	@ 0x29ac
 8001762:	443a      	add	r2, r7
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	f642 13ac 	movw	r3, #10668	@ 0x29ac
 800176a:	443b      	add	r3, r7
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001772:	f6ff ae29 	blt.w	80013c8 <geneticAlgorithm+0x1b8>
    }

    //Genetic Algorithm End!
    ////////////////////////////////////////////////////////

    secondCycleCount = *DWT_CYCCNT;
 8001776:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <geneticAlgorithm+0x5dc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f642 1278 	movw	r2, #10616	@ 0x2978
 8001780:	443a      	add	r2, r7
 8001782:	6013      	str	r3, [r2, #0]
    secondTimestamp = HAL_GetTick();
 8001784:	f002 fbd8 	bl	8003f38 <HAL_GetTick>
 8001788:	f642 1374 	movw	r3, #10612	@ 0x2974
 800178c:	443b      	add	r3, r7
 800178e:	6018      	str	r0, [r3, #0]

    f_timeCycleData->cycleCount = secondCycleCount - firstCycleCount;
 8001790:	f642 1378 	movw	r3, #10616	@ 0x2978
 8001794:	443b      	add	r3, r7
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f507 5326 	add.w	r3, r7, #10624	@ 0x2980
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1ad2      	subs	r2, r2, r3
 80017a0:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80017a4:	f6a3 13ac 	subw	r3, r3, #2476	@ 0x9ac
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
    f_timeCycleData->timeElapsed = secondTimestamp - firstTimestamp;
 80017ac:	f642 1374 	movw	r3, #10612	@ 0x2974
 80017b0:	443b      	add	r3, r7
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	f642 137c 	movw	r3, #10620	@ 0x297c
 80017b8:	443b      	add	r3, r7
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	1ad2      	subs	r2, r2, r3
 80017be:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80017c2:	f6a3 13ac 	subw	r3, r3, #2476	@ 0x9ac
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	601a      	str	r2, [r3, #0]

    double finalFitness;

    for (int i = 0; i < PARENTS; ++i){
 80017ca:	2300      	movs	r3, #0
 80017cc:	f642 1284 	movw	r2, #10628	@ 0x2984
 80017d0:	443a      	add	r2, r7
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e057      	b.n	8001886 <geneticAlgorithm+0x676>
 80017d6:	bf00      	nop
 80017d8:	ffffd66c 	.word	0xffffd66c
 80017dc:	24000a90 	.word	0x24000a90
 80017e0:	2400146c 	.word	0x2400146c
 80017e4:	ffffd6b8 	.word	0xffffd6b8
 80017e8:	ffffd678 	.word	0xffffd678
 80017ec:	24000008 	.word	0x24000008
        double fitness = fitnessCalc(population[i], targetDistance);
 80017f0:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <geneticAlgorithm+0x6b0>)
 80017f2:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80017f6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80017fa:	443b      	add	r3, r7
 80017fc:	f642 1284 	movw	r2, #10628	@ 0x2984
 8001800:	443a      	add	r2, r7
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	0192      	lsls	r2, r2, #6
 8001806:	4413      	add	r3, r2
 8001808:	f242 0268 	movw	r2, #8296	@ 0x2068
 800180c:	443a      	add	r2, r7
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fbef 	bl	8000ff4 <_Z11fitnessCalcPiRA16_A16_d>
 8001816:	f642 1368 	movw	r3, #10600	@ 0x2968
 800181a:	443b      	add	r3, r7
 800181c:	ed83 0b00 	vstr	d0, [r3]

        if (i == 0)
 8001820:	f642 1384 	movw	r3, #10628	@ 0x2984
 8001824:	443b      	add	r3, r7
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <geneticAlgorithm+0x632>
        {
            finalFitness = fitness;
 800182c:	f642 1368 	movw	r3, #10600	@ 0x2968
 8001830:	443b      	add	r3, r7
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f642 1188 	movw	r1, #10632	@ 0x2988
 800183a:	4439      	add	r1, r7
 800183c:	e9c1 2300 	strd	r2, r3, [r1]
 8001840:	e018      	b.n	8001874 <geneticAlgorithm+0x664>
        }
        else
        {
            if(finalFitness > fitness)
 8001842:	f642 1388 	movw	r3, #10632	@ 0x2988
 8001846:	443b      	add	r3, r7
 8001848:	ed93 6b00 	vldr	d6, [r3]
 800184c:	f642 1368 	movw	r3, #10600	@ 0x2968
 8001850:	443b      	add	r3, r7
 8001852:	ed93 7b00 	vldr	d7, [r3]
 8001856:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	dd09      	ble.n	8001874 <geneticAlgorithm+0x664>
            {
                finalFitness = fitness;
 8001860:	f642 1368 	movw	r3, #10600	@ 0x2968
 8001864:	443b      	add	r3, r7
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f642 1188 	movw	r1, #10632	@ 0x2988
 800186e:	4439      	add	r1, r7
 8001870:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < PARENTS; ++i){
 8001874:	f642 1384 	movw	r3, #10628	@ 0x2984
 8001878:	443b      	add	r3, r7
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	f642 1284 	movw	r2, #10628	@ 0x2984
 8001882:	443a      	add	r2, r7
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	f642 1384 	movw	r3, #10628	@ 0x2984
 800188a:	443b      	add	r3, r7
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001890:	ddae      	ble.n	80017f0 <geneticAlgorithm+0x5e0>
            }
        }
    }

    return finalFitness;
 8001892:	f642 1388 	movw	r3, #10632	@ 0x2988
 8001896:	443b      	add	r3, r7
 8001898:	e9d3 4500 	ldrd	r4, r5, [r3]
}
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <geneticAlgorithm+0x6b4>)
 800189e:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 80018a2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80018a6:	443b      	add	r3, r7
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f882 	bl	80019b2 <_ZNSt6vectorISt4pairIdiESaIS1_EED1Ev>
    return finalFitness;
 80018ae:	ec45 4b17 	vmov	d7, r4, r5
}
 80018b2:	eeb0 0b47 	vmov.f64	d0, d7
 80018b6:	f507 5726 	add.w	r7, r7, #10624	@ 0x2980
 80018ba:	3730      	adds	r7, #48	@ 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bdb0      	pop	{r4, r5, r7, pc}
 80018c0:	ffffe6b8 	.word	0xffffe6b8
 80018c4:	ffffd66c 	.word	0xffffd66c

080018c8 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEC1Ej>:
      mersenne_twister_engine(result_type __sd)
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
      { seed(__sd); }
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fa31 	bl	8001d3c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZNSt24uniform_int_distributionIiEC1Eii>:

      /**
       * @brief Constructs a uniform distribution object.
       */
      explicit
      uniform_int_distribution(_IntType __a,
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
			       _IntType __b
				 = __gnu_cxx::__int_traits<_IntType>::__max)
      : _M_param(__a, __b)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fa60 	bl	8001dbc <_ZNSt24uniform_int_distributionIiE10param_typeC1Eii>
      { }
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_>:
      /**
       * @brief Generating functions.
       */
      template<typename _UniformRandomBitGenerator>
	result_type
	operator()(_UniformRandomBitGenerator& __urng)
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
        { return this->operator()(__urng, _M_param); }
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fa70 	bl	8001dfc <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_RKNS0_10param_typeE>
 800191c:	4603      	mov	r3, r0
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    }

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	ee06 3a90 	vmov	s13, r3
 8001940:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8001944:	eeb0 1b46 	vmov.f64	d1, d6
 8001948:	eeb0 0b47 	vmov.f64	d0, d7
 800194c:	f005 fb2c 	bl	8006fa8 <pow>
 8001950:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001954:	eeb0 0b47 	vmov.f64	d0, d7
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type()
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fa7a 	bl	8001e6a <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8001998:	461a      	mov	r2, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fa84 	bl	8001ea8 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE13_M_deallocateEPS1_j>
      }
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fc0c 	bl	80011c0 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE12_Vector_implD1Ev>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_ZNSt6vectorISt4pairIdiESaIS1_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 80019b2:	b5b0      	push	{r4, r5, r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681d      	ldr	r5, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685c      	ldr	r4, [r3, #4]
		      _M_get_Tp_allocator());
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fa88 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 80019ca:	4603      	mov	r3, r0
 80019cc:	617d      	str	r5, [r7, #20]
 80019ce:	613c      	str	r4, [r7, #16]
 80019d0:	60fb      	str	r3, [r7, #12]
    __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>&)
    {
      std::_Destroy(__first, __last);
 80019d2:	6939      	ldr	r1, [r7, #16]
 80019d4:	6978      	ldr	r0, [r7, #20]
 80019d6:	f000 fd37 	bl	8002448 <_ZSt8_DestroyIPSt4pairIdiEEvT_S3_>
    }
 80019da:	bf00      	nop
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffce 	bl	8001980 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EED1Ev>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}

080019ee <_ZNSt6vectorISt4pairIdiESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f805 	bl	8001a04 <_ZNSt6vectorISt4pairIdiESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80019fa:	4603      	mov	r3, r0
      }
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_ZNSt6vectorISt4pairIdiESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001a0c:	2301      	movs	r3, #1
      }
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_ZNSt6vectorISt4pairIdiESaIS1_EE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fa62 	bl	8001ef0 <_ZNKSt6vectorISt4pairIdiESaIS1_EE8max_sizeEv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	4293      	cmp	r3, r2
 8001a32:	bf8c      	ite	hi
 8001a34:	2301      	movhi	r3, #1
 8001a36:	2300      	movls	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <_ZNSt6vectorISt4pairIdiESaIS1_EE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8001a3e:	4838      	ldr	r0, [pc, #224]	@ (8001b20 <_ZNSt6vectorISt4pairIdiESaIS1_EE7reserveEj+0x104>)
 8001a40:	f005 f938 	bl	8006cb4 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fa64 	bl	8001f12 <_ZNKSt6vectorISt4pairIdiESaIS1_EE8capacityEv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	bf8c      	ite	hi
 8001a52:	2301      	movhi	r3, #1
 8001a54:	2300      	movls	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d05c      	beq.n	8001b16 <_ZNSt6vectorISt4pairIdiESaIS1_EE7reserveEj+0xfa>
	{
	  const size_type __old_size = size();
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fa68 	bl	8001f32 <_ZNKSt6vectorISt4pairIdiESaIS1_EE4sizeEv>
 8001a62:	61b8      	str	r0, [r7, #24]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001a64:	f7ff ffc3 	bl	80019ee <_ZNSt6vectorISt4pairIdiESaIS1_EE15_S_use_relocateEv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d014      	beq.n	8001a98 <_ZNSt6vectorISt4pairIdiESaIS1_EE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fa6d 	bl	8001f52 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE11_M_allocateEj>
 8001a78:	61f8      	str	r0, [r7, #28]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681c      	ldr	r4, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fa28 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8001a8a:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	4629      	mov	r1, r5
 8001a90:	4620      	mov	r0, r4
 8001a92:	f000 fa77 	bl	8001f84 <_ZNSt6vectorISt4pairIdiESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001a96:	e022      	b.n	8001ade <_ZNSt6vectorISt4pairIdiESaIS1_EE7reserveEj+0xc2>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fa85 	bl	8001fac <_ZSt32__make_move_if_noexcept_iteratorISt4pairIdiESt13move_iteratorIPS1_EET0_PT_>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fa7f 	bl	8001fac <_ZSt32__make_move_if_noexcept_iteratorISt4pairIdiESt13move_iteratorIPS1_EET0_PT_>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fa88 	bl	8001fca <_ZNSt6vectorISt4pairIdiESaIS1_EE20_M_allocate_and_copyISt13move_iteratorIPS1_EEES6_jT_S8_>
 8001aba:	61f8      	str	r0, [r7, #28]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681d      	ldr	r5, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685c      	ldr	r4, [r3, #4]
			    _M_get_Tp_allocator());
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fa07 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8001acc:	4603      	mov	r3, r0
 8001ace:	617d      	str	r5, [r7, #20]
 8001ad0:	613c      	str	r4, [r7, #16]
 8001ad2:	60fb      	str	r3, [r7, #12]
      std::_Destroy(__first, __last);
 8001ad4:	6939      	ldr	r1, [r7, #16]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f000 fcb6 	bl	8002448 <_ZSt8_DestroyIPSt4pairIdiEEvT_S3_>
    }
 8001adc:	bf00      	nop
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	111b      	asrs	r3, r3, #4
	  _M_deallocate(this->_M_impl._M_start,
 8001af0:	461a      	mov	r2, r3
 8001af2:	f000 f9d9 	bl	8001ea8 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE13_M_deallocateEPS1_j>
	  this->_M_impl._M_start = __tmp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	441a      	add	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	609a      	str	r2, [r3, #8]
	}
    }
 8001b16:	bf00      	nop
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08008b3c 	.word	0x08008b3c

08001b24 <_ZSt9make_pairIiRiESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS2_INS3_IT0_E4typeEE6__typeEEOS4_OS9_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8001b30:	68b8      	ldr	r0, [r7, #8]
 8001b32:	f000 fa66 	bl	8002002 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001b36:	4604      	mov	r4, r0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fa6d 	bl	8002018 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 fa72 	bl	800202e <_ZNSt4pairIiiEC1IiRiLb1EEEOT_OT0_>
    }
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}

08001b52 <_ZNSt4pairIdiEC1IiiLb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fa4f 	bl	8002002 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001b64:	4603      	mov	r3, r0
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	ed83 7b00 	vstr	d7, [r3]
	  second(std::forward<_U2>(__p.second))
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fa41 	bl	8002002 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001b80:	4603      	mov	r3, r0
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZNSt6vectorISt4pairIdiESaIS1_EE9push_backEOS1_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f000 fa5f 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fa65 	bl	8002076 <_ZNSt6vectorISt4pairIdiESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_ZNSt6vectorISt4pairIdiESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	4413      	add	r3, r2
      }
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_ZSt9make_pairIRdRiESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>:
    make_pair(_T1&& __x, _T2&& __y)
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f000 fa8d 	bl	8002100 <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>
 8001be6:	4604      	mov	r4, r0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa15 	bl	8002018 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fa8e 	bl	8002116 <_ZNSt4pairIdiEC1IRdRiLb1EEEOT_OT0_>
    }
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}

08001c02 <_ZNSt4pairIdiEaSEOS0_>:
      operator=(__conditional_t<__and_<is_move_assignable<_T1>,
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	first = std::forward<first_type>(__p.first);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fa9c 	bl	800214c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8001c14:	4603      	mov	r3, r0
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]
	second = std::forward<second_type>(__p.second);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	3308      	adds	r3, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f9ec 	bl	8002002 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]
	return *this;
 8001c32:	687b      	ldr	r3, [r7, #4]
      }
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZNSt6vectorISt4pairIdiESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fa88 	bl	8002162 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	f107 020c 	add.w	r2, r7, #12
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fa70 	bl	8002162 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_ZNSt6vectorISt4pairIdiESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	1d1a      	adds	r2, r3, #4
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fa5f 	bl	8002162 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZSt11nth_elementIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_>:
   *  holds that `*j < *i` is false.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
 8001cae:	b5b0      	push	{r4, r5, r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af02      	add	r7, sp, #8
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __nth);
      __glibcxx_requires_valid_range(__nth, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      if (__first == __last || __nth == __last)
 8001cba:	1d3a      	adds	r2, r7, #4
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fa5d 	bl	8002182 <_ZN9__gnu_cxxeqIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <_ZSt11nth_elementIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_+0x34>
 8001cce:	1d3a      	adds	r2, r7, #4
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fa53 	bl	8002182 <_ZN9__gnu_cxxeqIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <_ZSt11nth_elementIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_+0x38>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <_ZSt11nth_elementIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_+0x3a>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d117      	bne.n	8001d1c <_ZSt11nth_elementIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_+0x6e>
	return;

      std::__introselect(__first, __nth, __last,
			 std::__lg(__last - __first) * 2,
 8001cec:	f107 020c 	add.w	r2, r7, #12
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fa5c 	bl	80021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fa6d 	bl	80021dc <_ZSt4__lgIiET_S0_>
 8001d02:	4603      	mov	r3, r0
      std::__introselect(__first, __nth, __last,
 8001d04:	005c      	lsls	r4, r3, #1
			 __gnu_cxx::__ops::__iter_less_iter());
 8001d06:	f7fe ffeb 	bl	8000ce0 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      std::__introselect(__first, __nth, __last,
 8001d0a:	f88d 5000 	strb.w	r5, [sp]
 8001d0e:	4623      	mov	r3, r4
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fa6f 	bl	80021f8 <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_>
 8001d1a:	e000      	b.n	8001d1e <_ZSt11nth_elementIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_+0x70>
	return;
 8001d1c:	bf00      	nop
    }
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}

08001d24 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj>:
	   size_t __w, size_t __n, size_t __m, size_t __r,
	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
			    __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
	__detail::_Shift<_UIntType, __w>::__value>(__sd);
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f000 faa3 	bl	8002292 <_ZNSt8__detail5__modIjLj0ELj1ELj0EEET_S1_>
 8001d4c:	4602      	mov	r2, r0
      _M_x[0] = __detail::__mod<_UIntType,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]

      for (size_t __i = 1; __i < state_size; ++__i)
 8001d52:	2301      	movs	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e021      	b.n	8001d9c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj+0x60>
	{
	  _UIntType __x = _M_x[__i - 1];
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d62:	60bb      	str	r3, [r7, #8]
	  __x ^= __x >> (__w - 2);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	0f9b      	lsrs	r3, r3, #30
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	4053      	eors	r3, r2
 8001d6c:	60bb      	str	r3, [r7, #8]
	  __x *= __f;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4a11      	ldr	r2, [pc, #68]	@ (8001db8 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj+0x7c>)
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	60bb      	str	r3, [r7, #8]
	  __x += __detail::__mod<_UIntType, __n>(__i);
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fa99 	bl	80022b0 <_ZNSt8__detail5__modIjLj624ELj1ELj0EEET_S1_>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4413      	add	r3, r2
 8001d84:	60bb      	str	r3, [r7, #8]
	  _M_x[__i] = __detail::__mod<_UIntType,
	    __detail::_Shift<_UIntType, __w>::__value>(__x);
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f000 fa83 	bl	8002292 <_ZNSt8__detail5__modIjLj0ELj1ELj0EEET_S1_>
 8001d8c:	4601      	mov	r1, r0
	  _M_x[__i] = __detail::__mod<_UIntType,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t __i = 1; __i < state_size; ++__i)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f5b3 7f1c 	cmp.w	r3, #624	@ 0x270
 8001da2:	d3d9      	bcc.n	8001d58 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE4seedEj+0x1c>
	}
      _M_p = state_size;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001daa:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    }
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	6c078965 	.word	0x6c078965

08001dbc <_ZNSt24uniform_int_distributionIiE10param_typeC1Eii>:
	param_type(_IntType __a,
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	: _M_a(__a), _M_b(__b)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]
	  __glibcxx_assert(_M_a <= _M_b);
 8001dd4:	f7fe ff70 	bl	8000cb8 <_ZSt23__is_constant_evaluatedv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <_ZNSt24uniform_int_distributionIiE10param_typeC1Eii+0x32>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dd01      	ble.n	8001dee <_ZNSt24uniform_int_distributionIiE10param_typeC1Eii+0x32>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <_ZNSt24uniform_int_distributionIiE10param_typeC1Eii+0x34>
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b00      	cmp	r3, #0
	}
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_RKNS0_10param_typeE>:
    };

  template<typename _IntType>
    template<typename _UniformRandomBitGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b08f      	sub	sp, #60	@ 0x3c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
      {
	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
	typedef typename make_unsigned<result_type>::type __utype;
	typedef typename common_type<_Gresult_type, __utype>::type __uctype;

	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	633b      	str	r3, [r7, #48]	@ 0x30
	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	static_assert( __urngmin < __urngmax,
	    "Uniform random bit generator must define min() < max()");
	constexpr __uctype __urngrange = __urngmax - __urngmin;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	62bb      	str	r3, [r7, #40]	@ 0x28

	const __uctype __urange
	  = __uctype(__param.b()) - __uctype(__param.a());
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fa58 	bl	80022ce <_ZNKSt24uniform_int_distributionIiE10param_type1bEv>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461c      	mov	r4, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fa5f 	bl	80022e6 <_ZNKSt24uniform_int_distributionIiE10param_type1aEv>
 8001e28:	4603      	mov	r3, r0
	const __uctype __urange
 8001e2a:	1ae3      	subs	r3, r4, r3
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24

	__uctype __ret;
	if (__urngrange > __urange)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d00a      	beq.n	8001e4c <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_RKNS0_10param_typeE+0x50>
	  {
	    // downscaling

	    const __uctype __uerange = __urange + 1; // __urange can be zero
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	3301      	adds	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
#endif
	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)
	      {
		// __urng produces values that use exactly 32-bits,
		// so use 64-bit integers to downscale to desired range.
		__UINT32_TYPE__ __u32erange = __uerange;
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	61fb      	str	r3, [r7, #28]
		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
 8001e40:	69f9      	ldr	r1, [r7, #28]
 8001e42:	68b8      	ldr	r0, [r7, #8]
 8001e44:	f000 fa5b 	bl	80022fe <_ZNSt24uniform_int_distributionIiE5_S_ndIySt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEmEET1_RT0_S4_>
 8001e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e4a:	e003      	b.n	8001e54 <_ZNSt24uniform_int_distributionIiEclISt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEiRT_RKNS0_10param_typeE+0x58>
		__ret = __tmp + (__uctype(__urng()) - __urngmin);
	      }
	    while (__ret > __urange || __ret < __tmp);
	  }
	else
	  __ret = __uctype(__urng()) - __urngmin;
 8001e4c:	68b8      	ldr	r0, [r7, #8]
 8001e4e:	f000 fac1 	bl	80023d4 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 8001e52:	6378      	str	r0, [r7, #52]	@ 0x34

	return __ret + __param.a();
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fa46 	bl	80022e6 <_ZNKSt24uniform_int_distributionIiE10param_type1aEv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e60:	4413      	add	r3, r2
      }
 8001e62:	4618      	mov	r0, r3
 8001e64:	373c      	adds	r7, #60	@ 0x3c
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}

08001e6a <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	{ }
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_ZNSt15__new_allocatorISt4pairIdiEED1Ev>:
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	if (__p)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE13_M_deallocateEPS1_j+0x2a>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	617b      	str	r3, [r7, #20]
      { __a.deallocate(__p, __n); }
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	69b9      	ldr	r1, [r7, #24]
 8001eca:	69f8      	ldr	r0, [r7, #28]
 8001ecc:	f000 fdf0 	bl	8002ab0 <_ZNSt15__new_allocatorISt4pairIdiEE10deallocateEPS1_j>
 8001ed0:	bf00      	nop
      }
 8001ed2:	bf00      	nop
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_ZNKSt6vectorISt4pairIdiESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fad1 	bl	80024a2 <_ZNKSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 faad 	bl	8002462 <_ZNSt6vectorISt4pairIdiESaIS1_EE11_S_max_sizeERKS2_>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZNKSt6vectorISt4pairIdiESaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	111b      	asrs	r3, r3, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_ZNKSt6vectorISt4pairIdiESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	111b      	asrs	r3, r3, #4
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE11_M_allocateEj+0x28>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fdcd 	bl	8002b0e <_ZNSt15__new_allocatorISt4pairIdiEE8allocateEjPKv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE11_M_allocateEj+0x2a>
 8001f7a:	2300      	movs	r3, #0
      }
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZNSt6vectorISt4pairIdiESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8001f92:	f88d 4000 	strb.w	r4, [sp]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fa8b 	bl	80024b8 <_ZNSt6vectorISt4pairIdiESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8001fa2:	4603      	mov	r3, r0
      }
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}

08001fac <_ZSt32__make_move_if_noexcept_iteratorISt4pairIdiESt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fa8e 	bl	80024dc <_ZNSt13move_iteratorIPSt4pairIdiEEC1ES2_>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZNSt6vectorISt4pairIdiESaIS1_EE20_M_allocate_and_copyISt13move_iteratorIPS1_EEES6_jT_S8_>:
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	pointer
	_M_allocate_and_copy(size_type __n,
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ffb8 	bl	8001f52 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE11_M_allocateEj>
 8001fe2:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff77 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8001fec:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa84 	bl	8002500 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt4pairIdiEES3_S2_ET0_T_S6_S5_RSaIT1_E>
	      return __result;
 8001ff8:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_ZNSt4pairIiiEC1IiRiLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 800203a:	68b8      	ldr	r0, [r7, #8]
 800203c:	f7ff ffe1 	bl	8002002 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8002040:	4603      	mov	r3, r0
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffe5 	bl	8002018 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800204e:	4603      	mov	r3, r0
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	605a      	str	r2, [r3, #4]
	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_ZNSt6vectorISt4pairIdiESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8002076:	b5b0      	push	{r4, r5, r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	d028      	beq.n	80020de <_ZNSt6vectorISt4pairIdiESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x68>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800208c:	687d      	ldr	r5, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685c      	ldr	r4, [r3, #4]
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	f000 fa45 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002098:	4603      	mov	r3, r0
 800209a:	61fd      	str	r5, [r7, #28]
 800209c:	61bc      	str	r4, [r7, #24]
 800209e:	617b      	str	r3, [r7, #20]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f000 fa3e 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80020a6:	4602      	mov	r2, r0
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	60ba      	str	r2, [r7, #8]
      template<typename _Up, typename... _Args>
	__attribute__((__always_inline__))
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4619      	mov	r1, r3
 80020b6:	2010      	movs	r0, #16
 80020b8:	f7fe fe06 	bl	8000cc8 <_ZnwjPv>
 80020bc:	4604      	mov	r4, r0
 80020be:	68b8      	ldr	r0, [r7, #8]
 80020c0:	f000 fa2f 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80020c4:	4603      	mov	r3, r0
 80020c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020cc:	bf00      	nop
	}
 80020ce:	bf00      	nop
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f103 0210 	add.w	r2, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80020dc:	e00c      	b.n	80020f8 <_ZNSt6vectorISt4pairIdiESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x82>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fdd4 	bl	8001c8c <_ZNSt6vectorISt4pairIdiESaIS1_EE3endEv>
 80020e4:	4604      	mov	r4, r0
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f000 fa1b 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4621      	mov	r1, r4
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fa20 	bl	8002538 <_ZNSt6vectorISt4pairIdiESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bdb0      	pop	{r4, r5, r7, pc}

08002100 <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_ZNSt4pairIdiEC1IRdRiLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f7ff ffec 	bl	8002100 <_ZSt7forwardIRdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002128:	4603      	mov	r3, r0
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	68f9      	ldr	r1, [r7, #12]
 8002130:	e9c1 2300 	strd	r2, r3, [r1]
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff6f 	bl	8002018 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800213a:	4603      	mov	r3, r0
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	609a      	str	r2, [r3, #8]
	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_ZN9__gnu_cxxeqIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002182:	b590      	push	{r4, r7, lr}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 faa9 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8002192:	4603      	mov	r3, r0
 8002194:	681c      	ldr	r4, [r3, #0]
 8002196:	6838      	ldr	r0, [r7, #0]
 8002198:	f000 faa4 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 800219c:	4603      	mov	r3, r0
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	429c      	cmp	r4, r3
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}

080021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80021b2:	b590      	push	{r4, r7, lr}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fa91 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 80021c2:	4603      	mov	r3, r0
 80021c4:	681c      	ldr	r4, [r3, #0]
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f000 fa8c 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 80021cc:	4603      	mov	r3, r0
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1ae3      	subs	r3, r4, r3
 80021d2:	111b      	asrs	r3, r3, #4
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}

080021dc <_ZSt4__lgIiET_S0_>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp
    __lg(_Tp __n)
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
    {
#if __cplusplus >= 201402L
      return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fa87 	bl	80026fa <_ZSt11__bit_widthIjEiT_>
 80021ec:	4603      	mov	r3, r0
 80021ee:	3b01      	subs	r3, #1
		    ? __builtin_clzll(+__n)
		    : (sizeof(+__n) == sizeof(long)
			 ? __builtin_clzl(+__n)
			 : __builtin_clz(+__n)));
#endif
    }
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_>:
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
      while (__last - __first > 3)
 8002206:	e02d      	b.n	8002264 <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_+0x6c>
	  if (__depth_limit == 0)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d110      	bne.n	8002230 <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_+0x38>
	      std::__heap_select(__first, __nth + 1, __last, __comp);
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fd21 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 800221a:	4601      	mov	r1, r0
 800221c:	4633      	mov	r3, r6
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fa7a 	bl	800271a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
	      std::iter_swap(__first, __nth);
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 faa9 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
 800222e:	e02d      	b.n	800228c <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_+0x94>
	  --__depth_limit;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	3b01      	subs	r3, #1
 8002234:	603b      	str	r3, [r7, #0]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8002236:	462a      	mov	r2, r5
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fab7 	bl	80027ae <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>
 8002240:	4603      	mov	r3, r0
 8002242:	617b      	str	r3, [r7, #20]
	  if (__cut <= __nth)
 8002244:	f107 0208 	add.w	r2, r7, #8
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f000 faee 	bl	8002830 <_ZN9__gnu_cxxleIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_+0x68>
	    __first = __cut;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e001      	b.n	8002264 <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_+0x6c>
	    __last = __cut;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	607b      	str	r3, [r7, #4]
      while (__last - __first > 3)
 8002264:	f107 020c 	add.w	r2, r7, #12
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ffa0 	bl	80021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002272:	4603      	mov	r3, r0
 8002274:	2b03      	cmp	r3, #3
 8002276:	bfcc      	ite	gt
 8002278:	2301      	movgt	r3, #1
 800227a:	2300      	movle	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1c2      	bne.n	8002208 <_ZSt13__introselectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_T1_+0x10>
      std::__insertion_sort(__first, __last, __comp);
 8002282:	4622      	mov	r2, r4
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 faea 	bl	8002860 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002292 <_ZNSt8__detail5__modIjLj0ELj1ELj0EEET_S1_>:
      __mod(_Tp __x)
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	    constexpr _Tp __a1 = __a ? __a : 1;
 800229a:	2301      	movs	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fb49 	bl	8002936 <_ZNSt8__detail4_ModIjLj0ELj1ELj0ELb1ELb0EE6__calcEj>
 80022a4:	4603      	mov	r3, r0
 80022a6:	bf00      	nop
      }
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZNSt8__detail5__modIjLj624ELj1ELj0EEET_S1_>:
      __mod(_Tp __x)
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	    constexpr _Tp __a1 = __a ? __a : 1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fb47 	bl	8002950 <_ZNSt8__detail4_ModIjLj624ELj1ELj0ELb1ELb1EE6__calcEj>
 80022c2:	4603      	mov	r3, r0
 80022c4:	bf00      	nop
      }
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZNKSt24uniform_int_distributionIiE10param_type1bEv>:
	b() const
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	{ return _M_b; }
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_ZNKSt24uniform_int_distributionIiE10param_type1aEv>:
	a() const
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	{ return _M_a; }
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_ZNSt24uniform_int_distributionIiE5_S_ndIySt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEmEET1_RT0_S4_>:
	_S_nd(_Urbg& __g, _Up __range)
 80022fe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002302:	b08c      	sub	sp, #48	@ 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	61f8      	str	r0, [r7, #28]
 8002308:	61b9      	str	r1, [r7, #24]
	  _Wp __product = _Wp(__g()) * _Wp(__range);
 800230a:	69f8      	ldr	r0, [r7, #28]
 800230c:	f000 f862 	bl	80023d4 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 8002310:	4603      	mov	r3, r0
 8002312:	2200      	movs	r2, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	617a      	str	r2, [r7, #20]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2200      	movs	r2, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002324:	460b      	mov	r3, r1
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	fb02 f203 	mul.w	r2, r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002332:	4601      	mov	r1, r0
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	fba2 8901 	umull	r8, r9, r2, r1
 8002342:	444b      	add	r3, r9
 8002344:	4699      	mov	r9, r3
 8002346:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
 800234a:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	  _Up __low = _Up(__product);
 800234e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__low < __range)
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	429a      	cmp	r2, r3
 8002358:	d22d      	bcs.n	80023b6 <_ZNSt24uniform_int_distributionIiE5_S_ndIySt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEmEET1_RT0_S4_+0xb8>
	      _Up __threshold = -__range % __range;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	425b      	negs	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	fbb3 f2f2 	udiv	r2, r3, r2
 8002364:	69b9      	ldr	r1, [r7, #24]
 8002366:	fb01 f202 	mul.w	r2, r1, r2
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	623b      	str	r3, [r7, #32]
	      while (__low < __threshold)
 800236e:	e01e      	b.n	80023ae <_ZNSt24uniform_int_distributionIiE5_S_ndIySt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEmEET1_RT0_S4_+0xb0>
		  __product = _Wp(__g()) * _Wp(__range);
 8002370:	69f8      	ldr	r0, [r7, #28]
 8002372:	f000 f82f 	bl	80023d4 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 8002376:	4603      	mov	r3, r0
 8002378:	2200      	movs	r2, #0
 800237a:	469a      	mov	sl, r3
 800237c:	4693      	mov	fp, r2
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2200      	movs	r2, #0
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800238a:	4603      	mov	r3, r0
 800238c:	fb03 f20b 	mul.w	r2, r3, fp
 8002390:	460b      	mov	r3, r1
 8002392:	fb0a f303 	mul.w	r3, sl, r3
 8002396:	4413      	add	r3, r2
 8002398:	4602      	mov	r2, r0
 800239a:	fbaa 4502 	umull	r4, r5, sl, r2
 800239e:	442b      	add	r3, r5
 80023a0:	461d      	mov	r5, r3
 80023a2:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 80023a6:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
		  __low = _Up(__product);
 80023aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
	      while (__low < __threshold)
 80023ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d3dc      	bcc.n	8002370 <_ZNSt24uniform_int_distributionIiE5_S_ndIySt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEmEET1_RT0_S4_+0x72>
	  return __product >> _Up_traits::__digits;
 80023b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	000a      	movs	r2, r1
 80023c4:	2300      	movs	r3, #0
 80023c6:	4613      	mov	r3, r2
	}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3730      	adds	r7, #48	@ 0x30
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023d4 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>:
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
			    __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
			    __s, __b, __t, __c, __l, __f>::
    operator()()
    {
      // Reload the vector - cost is O(n) amortized over n calls.
      if (_M_p >= state_size)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	@ 0x9c0
 80023e2:	f5b3 7f1c 	cmp.w	r3, #624	@ 0x270
 80023e6:	d302      	bcc.n	80023ee <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv+0x1a>
	_M_gen_rand();
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 facd 	bl	8002988 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv>

      // Calculate o(x(i)).
      result_type __z = _M_x[_M_p++];
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	@ 0x9c0
 80023f4:	1c59      	adds	r1, r3, #1
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	f8c2 19c0 	str.w	r1, [r2, #2496]	@ 0x9c0
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	60fb      	str	r3, [r7, #12]
      __z ^= (__z >> __u) & __d;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	0adb      	lsrs	r3, r3, #11
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4053      	eors	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
      __z ^= (__z << __s) & __b;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	01da      	lsls	r2, r3, #7
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv+0x6c>)
 8002414:	4013      	ands	r3, r2
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4053      	eors	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
      __z ^= (__z << __t) & __c;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	03da      	lsls	r2, r3, #15
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv+0x70>)
 8002422:	4013      	ands	r3, r2
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4053      	eors	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
      __z ^= (__z >> __l);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	0c9b      	lsrs	r3, r3, #18
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4053      	eors	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

      return __z;
 8002434:	68fb      	ldr	r3, [r7, #12]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	9d2c5680 	.word	0x9d2c5680
 8002444:	efc60000 	.word	0xefc60000

08002448 <_ZSt8_DestroyIPSt4pairIdiEEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return std::_Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002452:	6839      	ldr	r1, [r7, #0]
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fb3b 	bl	8002ad0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIdiEEEvT_S5_>
    }
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_ZNSt6vectorISt4pairIdiESaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002462:	b580      	push	{r7, lr}
 8002464:	b088      	sub	sp, #32
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800246a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	617b      	str	r3, [r7, #20]
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800247c:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return _M_max_size(); }
 8002480:	bf00      	nop
	return __a.max_size();
 8002482:	bf00      	nop
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002484:	60fb      	str	r3, [r7, #12]
	return (std::min)(__diffmax, __allocmax);
 8002486:	f107 020c 	add.w	r2, r7, #12
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fb28 	bl	8002ae6 <_ZSt3minIjERKT_S2_S2_>
 8002496:	4603      	mov	r3, r0
 8002498:	681b      	ldr	r3, [r3, #0]
      }
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZNKSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZNSt6vectorISt4pairIdiESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fb47 	bl	8002b60 <_ZSt12__relocate_aIPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_>
 80024d2:	4603      	mov	r3, r0
      }
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_ZNSt13move_iteratorIPSt4pairIdiEEC1ES2_>:
      move_iterator(iterator_type __i)
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80024e6:	463b      	mov	r3, r7
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fb56 	bl	8002b9a <_ZSt4moveIRPSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS5_>
 80024ee:	4603      	mov	r3, r0
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt4pairIdiEES3_S2_ET0_T_S6_S5_RSaIT1_E>:

#if _GLIBCXX_HOSTED
  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fb4c 	bl	8002bb0 <_ZSt18uninitialized_copyISt13move_iteratorIPSt4pairIdiEES3_ET0_T_S6_S5_>
 8002518:	4603      	mov	r3, r0
    }
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_ZNSt6vectorISt4pairIdiESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b094      	sub	sp, #80	@ 0x50
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002544:	4a66      	ldr	r2, [pc, #408]	@ (80026e0 <_ZNSt6vectorISt4pairIdiESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1a8>)
 8002546:	2101      	movs	r1, #1
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fb45 	bl	8002bd8 <_ZNKSt6vectorISt4pairIdiESaIS1_EE12_M_check_lenEjPKc>
 800254e:	64b8      	str	r0, [r7, #72]	@ 0x48
      pointer __old_start = this->_M_impl._M_start;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	647b      	str	r3, [r7, #68]	@ 0x44
      pointer __old_finish = this->_M_impl._M_finish;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40
      const size_type __elems_before = __position - begin();
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff fb6d 	bl	8001c3c <_ZNSt6vectorISt4pairIdiESaIS1_EE5beginEv>
 8002562:	4603      	mov	r3, r0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	f107 0210 	add.w	r2, r7, #16
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fe1e 	bl	80021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002576:	4603      	mov	r3, r0
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
      pointer __new_start(this->_M_allocate(__len));
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fce7 	bl	8001f52 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE11_M_allocateEj>
 8002584:	63b8      	str	r0, [r7, #56]	@ 0x38
      pointer __new_finish(__new_start);
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002588:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800258a:	68fd      	ldr	r5, [r7, #12]
				   __new_start + __elems_before,
 800258c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800258e:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 8002590:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002592:	18d4      	adds	r4, r2, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ffc4 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 800259a:	4603      	mov	r3, r0
 800259c:	637d      	str	r5, [r7, #52]	@ 0x34
 800259e:	633c      	str	r4, [r7, #48]	@ 0x30
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80025a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025a4:	f7ff ffbd 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b2:	623a      	str	r2, [r7, #32]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	2010      	movs	r0, #16
 80025ba:	f7fe fb85 	bl	8000cc8 <_ZnwjPv>
 80025be:	4604      	mov	r4, r0
 80025c0:	6a38      	ldr	r0, [r7, #32]
 80025c2:	f7ff ffae 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80025c6:	4603      	mov	r3, r0
 80025c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025ce:	bf00      	nop
	}
 80025d0:	bf00      	nop
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80025d2:	2300      	movs	r3, #0
 80025d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80025d6:	f7ff fa0a 	bl	80019ee <_ZNSt6vectorISt4pairIdiESaIS1_EE15_S_use_relocateEv>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d027      	beq.n	8002630 <_ZNSt6vectorISt4pairIdiESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf8>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f87d 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fc72 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 80025f6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80025f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025fa:	4621      	mov	r1, r4
 80025fc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80025fe:	f7ff fcc1 	bl	8001f84 <_ZNSt6vectorISt4pairIdiESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8002602:	64f8      	str	r0, [r7, #76]	@ 0x4c

	      ++__new_finish;
 8002604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002606:	3310      	adds	r3, #16
 8002608:	64fb      	str	r3, [r7, #76]	@ 0x4c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f868 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8002614:	4603      	mov	r3, r0
 8002616:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fc5d 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8002620:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002622:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002626:	4620      	mov	r0, r4
 8002628:	f7ff fcac 	bl	8001f84 <_ZNSt6vectorISt4pairIdiESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800262c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800262e:	e026      	b.n	800267e <_ZNSt6vectorISt4pairIdiESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x146>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f855 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 800263a:	4603      	mov	r3, r0
 800263c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fc4a 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8002646:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800264a:	4621      	mov	r1, r4
 800264c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800264e:	f000 fb0a 	bl	8002c66 <_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_>
 8002652:	64f8      	str	r0, [r7, #76]	@ 0x4c

	      ++__new_finish;
 8002654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002656:	3310      	adds	r3, #16
 8002658:	64fb      	str	r3, [r7, #76]	@ 0x4c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f840 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8002664:	4603      	mov	r3, r0
 8002666:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fc35 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8002670:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002672:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002676:	4620      	mov	r0, r4
 8002678:	f000 faf5 	bl	8002c66 <_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_>
 800267c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800267e:	f7ff f9b6 	bl	80019ee <_ZNSt6vectorISt4pairIdiESaIS1_EE15_S_use_relocateEv>
 8002682:	4603      	mov	r3, r0
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00e      	beq.n	80026ac <_ZNSt6vectorISt4pairIdiESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fc22 	bl	8001eda <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE19_M_get_Tp_allocatorEv>
 8002696:	4602      	mov	r2, r0
 8002698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	617a      	str	r2, [r7, #20]
      std::_Destroy(__first, __last);
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	69f8      	ldr	r0, [r7, #28]
 80026a6:	f7ff fecf 	bl	8002448 <_ZSt8_DestroyIPSt4pairIdiEEvT_S3_>
    }
 80026aa:	bf00      	nop
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80026ac:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 80026b8:	461a      	mov	r2, r3
 80026ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80026bc:	f7ff fbf4 	bl	8001ea8 <_ZNSt12_Vector_baseISt4pairIdiESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026c4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026ca:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80026cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026d2:	441a      	add	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]
    }
 80026d8:	bf00      	nop
 80026da:	3750      	adds	r7, #80	@ 0x50
 80026dc:	46bd      	mov	sp, r7
 80026de:	bdb0      	pop	{r4, r5, r7, pc}
 80026e0:	08008b4c 	.word	0x08008b4c

080026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_ZSt11__bit_widthIjEiT_>:
      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
    }

  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
 8002702:	2320      	movs	r3, #32
 8002704:	60fb      	str	r3, [r7, #12]
      return _Nd - std::__countl_zero(__x);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fac6 	bl	8002c98 <_ZSt13__countl_zeroIjEiT_>
 800270c:	4603      	mov	r3, r0
 800270e:	f1c3 0320 	rsb	r3, r3, #32
    }
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8002728:	463b      	mov	r3, r7
 800272a:	461a      	mov	r2, r3
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 facf 	bl	8002cd2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e013      	b.n	8002762 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x48>
	if (__comp(__i, __first))
 800273a:	463b      	mov	r3, r7
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	6979      	ldr	r1, [r7, #20]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fb4a 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800274c:	463b      	mov	r3, r7
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fb5b 	bl	8002e0e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fb2b 	bl	8002db8 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEppEv>
 8002762:	1d3a      	adds	r2, r7, #4
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fb0c 	bl	8002d88 <_ZN9__gnu_cxxltIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e1      	bne.n	800273a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x20>
    }
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fb84 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8002792:	4604      	mov	r4, r0
 8002794:	463b      	mov	r3, r7
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fb7f 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 800279c:	4603      	mov	r3, r0
 800279e:	4619      	mov	r1, r3
 80027a0:	4620      	mov	r0, r4
 80027a2:	f000 fb86 	bl	8002eb2 <_ZSt4swapIdiENSt9enable_ifIXsrSt6__and_IJSt14__is_swappableIT_ES2_IT0_EEE5valueEvE4typeERSt4pairIS3_S5_ESC_>
    }
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd90      	pop	{r4, r7, pc}

080027ae <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 80027ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b0:	b089      	sub	sp, #36	@ 0x24
 80027b2:	af02      	add	r7, sp, #8
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80027ba:	f107 020c 	add.w	r2, r7, #12
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fcf4 	bl	80021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	da00      	bge.n	80027d2 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_+0x24>
 80027d0:	3301      	adds	r3, #1
 80027d2:	105b      	asrs	r3, r3, #1
 80027d4:	461a      	mov	r2, r3
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fa3d 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80027e2:	4603      	mov	r3, r0
 80027e4:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fa35 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80027f2:	4604      	mov	r4, r0
 80027f4:	f107 0308 	add.w	r3, r7, #8
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fb66 	bl	8002ecc <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEmiEi>
 8002800:	4603      	mov	r3, r0
 8002802:	f88d 5000 	strb.w	r5, [sp]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4621      	mov	r1, r4
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fb77 	bl	8002efe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa20 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 800281c:	4633      	mov	r3, r6
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	f000 fbc1 	bl	8002fa8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>
 8002826:	4603      	mov	r3, r0
    }
 8002828:	4618      	mov	r0, r3
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002830 <_ZN9__gnu_cxxleIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    { return __lhs.base() <= __rhs.base(); }
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff52 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8002840:	4603      	mov	r3, r0
 8002842:	681c      	ldr	r4, [r3, #0]
 8002844:	6838      	ldr	r0, [r7, #0]
 8002846:	f7ff ff4d 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 800284a:	4603      	mov	r3, r0
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429c      	cmp	r4, r3
 8002850:	bf94      	ite	ls
 8002852:	2301      	movls	r3, #1
 8002854:	2300      	movhi	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b08b      	sub	sp, #44	@ 0x2c
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800286c:	f107 0208 	add.w	r2, r7, #8
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fc83 	bl	8002182 <_ZN9__gnu_cxxeqIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d155      	bne.n	800292e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xce>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f9e7 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 800288e:	4603      	mov	r3, r0
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
 8002892:	e040      	b.n	8002916 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xb6>
	  if (__comp(__i, __first))
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fa9d 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d02b      	beq.n	80028fe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x9e>
		__val = _GLIBCXX_MOVE(*__i);
 80028a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 faf5 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fbd4 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f107 0410 	add.w	r4, r7, #16
 80028be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f9c6 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fbc6 	bl	8003068 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
	      *__first = _GLIBCXX_MOVE(__val);
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fada 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80028e6:	4604      	mov	r4, r0
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fbb7 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff f983 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
 80028fc:	e006      	b.n	800290c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xac>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 80028fe:	4630      	mov	r0, r6
 8002900:	f7fe fa02 	bl	8000d08 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8002904:	4629      	mov	r1, r5
 8002906:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002908:	f000 fbc6 	bl	8003098 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800290c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fa51 	bl	8002db8 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEppEv>
 8002916:	f107 0208 	add.w	r2, r7, #8
 800291a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fb89 	bl	8003038 <_ZN9__gnu_cxxneIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1b3      	bne.n	8002894 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x34>
 800292c:	e000      	b.n	8002930 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xd0>
      if (__first == __last) return;
 800292e:	bf00      	nop
    }
 8002930:	372c      	adds	r7, #44	@ 0x2c
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002936 <_ZNSt8__detail4_ModIjLj0ELj1ELj0ELb1ELb0EE6__calcEj>:
	__calc(_Tp __x)
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	  _Tp __res = __a * __x + __c;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
	  return __res;
 8002942:	68fb      	ldr	r3, [r7, #12]
	}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_ZNSt8__detail4_ModIjLj624ELj1ELj0ELb1ELb1EE6__calcEj>:
	__calc(_Tp __x)
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	  _Tp __res = __a * __x + __c;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60fb      	str	r3, [r7, #12]
	    __res %= __m;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	091a      	lsrs	r2, r3, #4
 8002960:	4908      	ldr	r1, [pc, #32]	@ (8002984 <_ZNSt8__detail4_ModIjLj624ELj1ELj0ELb1ELb1EE6__calcEj+0x34>)
 8002962:	fba1 1202 	umull	r1, r2, r1, r2
 8002966:	0892      	lsrs	r2, r2, #2
 8002968:	f44f 711c 	mov.w	r1, #624	@ 0x270
 800296c:	fb01 f202 	mul.w	r2, r1, r2
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
	  return __res;
 8002974:	68fb      	ldr	r3, [r7, #12]
	}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	1a41a41b 	.word	0x1a41a41b

08002988 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv>:
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
 8002988:	b480      	push	{r7}
 800298a:	b08b      	sub	sp, #44	@ 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
      const _UIntType __upper_mask = (~_UIntType()) << __r;
 8002990:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002994:	61fb      	str	r3, [r7, #28]
      const _UIntType __lower_mask = ~__upper_mask;
 8002996:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800299a:	61bb      	str	r3, [r7, #24]
      for (size_t __k = 0; __k < (__n - __m); ++__k)
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a0:	e028      	b.n	80029f4 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x6c>
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029aa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
			   | (_M_x[__k + 1] & __lower_mask));
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	1c59      	adds	r1, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	f203 128d 	addw	r2, r3, #397	@ 0x18d
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	4053      	eors	r3, r2
		       ^ ((__y & 0x01) ? __a : 0));
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f002 0201 	and.w	r2, r2, #1
 80029d8:	2a00      	cmp	r2, #0
 80029da:	d001      	beq.n	80029e0 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x58>
 80029dc:	4a33      	ldr	r2, [pc, #204]	@ (8002aac <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x124>)
 80029de:	e000      	b.n	80029e2 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x5a>
 80029e0:	2200      	movs	r2, #0
 80029e2:	ea82 0103 	eor.w	r1, r2, r3
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t __k = 0; __k < (__n - __m); ++__k)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	2be2      	cmp	r3, #226	@ 0xe2
 80029f8:	d9d3      	bls.n	80029a2 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x1a>
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 80029fa:	23e3      	movs	r3, #227	@ 0xe3
 80029fc:	623b      	str	r3, [r7, #32]
 80029fe:	e028      	b.n	8002a52 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0xca>
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a3a      	ldr	r2, [r7, #32]
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
			   | (_M_x[__k + 1] & __lower_mask));
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	1c59      	adds	r1, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f1a3 02e3 	sub.w	r2, r3, #227	@ 0xe3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	4053      	eors	r3, r2
		       ^ ((__y & 0x01) ? __a : 0));
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	f002 0201 	and.w	r2, r2, #1
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	d001      	beq.n	8002a3e <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0xb6>
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aac <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x124>)
 8002a3c:	e000      	b.n	8002a40 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0xb8>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	ea82 0103 	eor.w	r1, r2, r3
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a3a      	ldr	r2, [r7, #32]
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f240 226e 	movw	r2, #622	@ 0x26e
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d9d1      	bls.n	8002a00 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x78>
      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 39bc 	ldr.w	r3, [r3, #2492]	@ 0x9bc
 8002a62:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
		       | (_M_x[0] & __lower_mask));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 2630 	ldr.w	r2, [r3, #1584]	@ 0x630
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	4053      	eors	r3, r2
		       ^ ((__y & 0x01) ? __a : 0));
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	f002 0201 	and.w	r2, r2, #1
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	d001      	beq.n	8002a8c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x104>
 8002a88:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x124>)
 8002a8a:	e000      	b.n	8002a8e <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x106>
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	405a      	eors	r2, r3
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8c3 29bc 	str.w	r2, [r3, #2492]	@ 0x9bc
      _M_p = 0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    }
 8002a9e:	bf00      	nop
 8002aa0:	372c      	adds	r7, #44	@ 0x2c
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	9908b0df 	.word	0x9908b0df

08002ab0 <_ZNSt15__new_allocatorISt4pairIdiEE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	68b8      	ldr	r0, [r7, #8]
 8002ac4:	f004 f8da 	bl	8006c7c <_ZdlPvj>
      }
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIdiEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d201      	bcs.n	8002b00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	e000      	b.n	8002b02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002b00:	687b      	ldr	r3, [r7, #4]
    }
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_ZNSt15__new_allocatorISt4pairIdiEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002b1e:	f06f 4278 	mvn.w	r2, #4160749568	@ 0xf8000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bf8c      	ite	hi
 8002b28:	2301      	movhi	r3, #1
 8002b2a:	2300      	movls	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <_ZNSt15__new_allocatorISt4pairIdiEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b42:	d301      	bcc.n	8002b48 <_ZNSt15__new_allocatorISt4pairIdiEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002b44:	f004 f8b0 	bl	8006ca8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002b48:	f004 f8ab 	bl	8006ca2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 f895 	bl	8006c80 <_Znwj>
 8002b56:	4603      	mov	r3, r0
      }
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZSt12__relocate_aIPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fae4 	bl	800313c <_ZSt12__niter_baseIPSt4pairIdiEET_S3_>
 8002b74:	4604      	mov	r4, r0
 8002b76:	68b8      	ldr	r0, [r7, #8]
 8002b78:	f000 fae0 	bl	800313c <_ZSt12__niter_baseIPSt4pairIdiEET_S3_>
 8002b7c:	4605      	mov	r5, r0
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fadc 	bl	800313c <_ZSt12__niter_baseIPSt4pairIdiEET_S3_>
 8002b84:	4602      	mov	r2, r0
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f000 fae1 	bl	8003152 <_ZSt14__relocate_a_1IPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_>
 8002b90:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bdb0      	pop	{r4, r5, r7, pc}

08002b9a <_ZSt4moveIRPSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <_ZSt18uninitialized_copyISt13move_iteratorIPSt4pairIdiEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fae8 	bl	800319e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt4pairIdiEES5_EET0_T_S8_S7_>
 8002bce:	4603      	mov	r3, r0
    }
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZNKSt6vectorISt4pairIdiESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff f983 	bl	8001ef0 <_ZNKSt6vectorISt4pairIdiESaIS1_EE8max_sizeEv>
 8002bea:	4604      	mov	r4, r0
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff f9a0 	bl	8001f32 <_ZNKSt6vectorISt4pairIdiESaIS1_EE4sizeEv>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	1ae2      	subs	r2, r4, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	bf34      	ite	cc
 8002bfc:	2301      	movcc	r3, #1
 8002bfe:	2300      	movcs	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <_ZNKSt6vectorISt4pairIdiESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f004 f854 	bl	8006cb4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff f990 	bl	8001f32 <_ZNKSt6vectorISt4pairIdiESaIS1_EE4sizeEv>
 8002c12:	4604      	mov	r4, r0
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff f98c 	bl	8001f32 <_ZNKSt6vectorISt4pairIdiESaIS1_EE4sizeEv>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	f107 0208 	add.w	r2, r7, #8
 8002c22:	f107 0310 	add.w	r3, r7, #16
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fac8 	bl	80031be <_ZSt3maxIjERKT_S2_S2_>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4423      	add	r3, r4
 8002c34:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff f97b 	bl	8001f32 <_ZNKSt6vectorISt4pairIdiESaIS1_EE4sizeEv>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d306      	bcc.n	8002c52 <_ZNKSt6vectorISt4pairIdiESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff f953 	bl	8001ef0 <_ZNKSt6vectorISt4pairIdiESaIS1_EE8max_sizeEv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d904      	bls.n	8002c5c <_ZNKSt6vectorISt4pairIdiESaIS1_EE12_M_check_lenEjPKc+0x84>
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff f94c 	bl	8001ef0 <_ZNKSt6vectorISt4pairIdiESaIS1_EE8max_sizeEv>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	e000      	b.n	8002c5e <_ZNKSt6vectorISt4pairIdiESaIS1_EE12_M_check_lenEjPKc+0x86>
 8002c5c:	697b      	ldr	r3, [r7, #20]
      }
 8002c5e:	4618      	mov	r0, r3
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}

08002c66 <_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002c66:	b590      	push	{r4, r7, lr}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff f999 	bl	8001fac <_ZSt32__make_move_if_noexcept_iteratorISt4pairIdiESt13move_iteratorIPS1_EET0_PT_>
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	68b8      	ldr	r0, [r7, #8]
 8002c7e:	f7ff f995 	bl	8001fac <_ZSt32__make_move_if_noexcept_iteratorISt4pairIdiESt13move_iteratorIPS1_EET0_PT_>
 8002c82:	4601      	mov	r1, r0
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fc39 	bl	8002500 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt4pairIdiEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8002c8e:	4603      	mov	r3, r0
    }
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}

08002c98 <_ZSt13__countl_zeroIjEiT_>:
    __countl_zero(_Tp __x) noexcept
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	@ 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	61bb      	str	r3, [r7, #24]
      if (__x == 0)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <_ZSt13__countl_zeroIjEiT_+0x16>
        return _Nd;
 8002caa:	2320      	movs	r3, #32
 8002cac:	e00b      	b.n	8002cc6 <_ZSt13__countl_zeroIjEiT_+0x2e>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
 8002cae:	2340      	movs	r3, #64	@ 0x40
 8002cb0:	61fb      	str	r3, [r7, #28]
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	617b      	str	r3, [r7, #20]
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	613b      	str	r3, [r7, #16]
	  constexpr int __diff = _Nd_u - _Nd;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
	  return __builtin_clz(__x) - __diff;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	bf00      	nop
    }
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002cd2:	b5b0      	push	{r4, r5, r7, lr}
 8002cd4:	b092      	sub	sp, #72	@ 0x48
 8002cd6:	af06      	add	r7, sp, #24
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	  _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	  _DistanceType;

      if (__last - __first < 2)
 8002cde:	f107 020c 	add.w	r2, r7, #12
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fa62 	bl	80021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	bfd4      	ite	le
 8002cf4:	2301      	movle	r3, #1
 8002cf6:	2300      	movgt	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d13e      	bne.n	8002d7c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xaa>
	return;

      const _DistanceType __len = __last - __first;
 8002cfe:	f107 020c 	add.w	r2, r7, #12
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fa52 	bl	80021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002d0e:	62b8      	str	r0, [r7, #40]	@ 0x28
      _DistanceType __parent = (__len - 2) / 2;
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	3b02      	subs	r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da00      	bge.n	8002d1a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x48>
 8002d18:	3301      	adds	r3, #1
 8002d1a:	105b      	asrs	r3, r3, #1
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8002d1e:	f107 030c 	add.w	r3, r7, #12
 8002d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe ff99 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f8b1 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff f990 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f107 0410 	add.w	r4, r7, #16
 8002d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff f985 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f88d 5010 	strb.w	r5, [sp, #16]
 8002d5c:	466c      	mov	r4, sp
 8002d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fa3c 	bl	80031e6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
			     __comp);
	  if (__parent == 0)
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xae>
	    return;
	  __parent--;
 8002d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d76:	3b01      	subs	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      while (true)
 8002d7a:	e7d0      	b.n	8002d1e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x4c>
	return;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xb0>
	    return;
 8002d80:	bf00      	nop
	}
    }
 8002d82:	3730      	adds	r7, #48	@ 0x30
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bdb0      	pop	{r4, r5, r7, pc}

08002d88 <_ZN9__gnu_cxxltIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fca6 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	681c      	ldr	r4, [r3, #0]
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	f7ff fca1 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8002da2:	4603      	mov	r3, r0
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429c      	cmp	r4, r3
 8002da8:	bf34      	ite	cc
 8002daa:	2301      	movcc	r3, #1
 8002dac:	2300      	movcs	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}

08002db8 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f103 0210 	add.w	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	601a      	str	r2, [r3, #0]
	return *this;
 8002dcc:	687b      	ldr	r3, [r7, #4]
      }
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8002dda:	b590      	push	{r4, r7, lr}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f855 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8002df0:	4604      	mov	r4, r0
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f850 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f000 faa9 	bl	8003356 <_ZStltIdiEbRKSt4pairIT_T0_ES5_>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}

08002e0e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e10:	b08f      	sub	sp, #60	@ 0x3c
 8002e12:	af06      	add	r7, sp, #24
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f83b 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f91a 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f107 0410 	add.w	r4, r7, #16
 8002e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      *__result = _GLIBCXX_MOVE(*__first);
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f82d 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8002e40:	4604      	mov	r4, r0
 8002e42:	f107 030c 	add.w	r3, r7, #12
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f827 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f906 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f7fe fed2 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
			 _DistanceType(__last - __first),
 8002e5e:	f107 020c 	add.w	r2, r7, #12
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f9a2 	bl	80021b2 <_ZN9__gnu_cxxmiIPSt4pairIdiESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002e6e:	4605      	mov	r5, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f8f3 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8002e7a:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8002e7c:	f88d 6010 	strb.w	r6, [sp, #16]
 8002e80:	466c      	mov	r4, sp
 8002e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e88:	462a      	mov	r2, r5
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f9aa 	bl	80031e6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
    }
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	@ 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <_ZSt4swapIdiENSt9enable_ifIXsrSt6__and_IJSt14__is_swappableIT_ES2_IT0_EEE5valueEvE4typeERSt4pairIS3_S5_ESC_>:
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
    { __x.swap(__y); }
 8002ebc:	6839      	ldr	r1, [r7, #0]
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa7b 	bl	80033ba <_ZNSt4pairIdiE4swapERS0_>
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	425b      	negs	r3, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	f107 020c 	add.w	r2, r7, #12
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f937 	bl	8002162 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	f107 0018 	add.w	r0, r7, #24
 8002f14:	f7ff ff61 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x62>
	  if (__comp(__b, __c))
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	f107 0018 	add.w	r0, r7, #24
 8002f26:	f7ff ff58 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff fc24 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8002f38:	e032      	b.n	8002fa0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	  else if (__comp(__a, __c))
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	f107 0018 	add.w	r0, r7, #24
 8002f42:	f7ff ff4a 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x58>
	    std::iter_swap(__result, __c);
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff fc16 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8002f54:	e024      	b.n	8002fa0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff fc11 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8002f5e:	e01f      	b.n	8002fa0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__a, __c))
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	f107 0018 	add.w	r0, r7, #24
 8002f68:	f7ff ff37 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x7e>
	std::iter_swap(__result, __a);
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff fc03 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8002f7a:	e011      	b.n	8002fa0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__b, __c))
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	f107 0018 	add.w	r0, r7, #24
 8002f84:	f7ff ff29 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x9a>
	std::iter_swap(__result, __c);
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fbf5 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8002f96:	e003      	b.n	8002fa0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	std::iter_swap(__result, __b);
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fbf0 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8002fb6:	e004      	b.n	8002fc2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
	    ++__first;
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fefb 	bl	8002db8 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEppEv>
	  while (__comp(__first, __pivot))
 8002fc2:	463b      	mov	r3, r7
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff06 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f1      	bne.n	8002fb8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x10>
	  --__last;
 8002fd4:	f107 0308 	add.w	r3, r7, #8
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fa06 	bl	80033ea <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEmmEv>
	  while (__comp(__pivot, __last))
 8002fde:	e004      	b.n	8002fea <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x42>
	    --__last;
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa00 	bl	80033ea <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEmmEv>
	  while (__comp(__pivot, __last))
 8002fea:	463b      	mov	r3, r7
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fef2 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f1      	bne.n	8002fe0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x38>
	  if (!(__first < __last))
 8002ffc:	f107 0208 	add.w	r2, r7, #8
 8003000:	f107 030c 	add.w	r3, r7, #12
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff febe 	bl	8002d88 <_ZN9__gnu_cxxltIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800300c:	4603      	mov	r3, r0
 800300e:	f083 0301 	eor.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x74>
	    return __first;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	e009      	b.n	8003030 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x88>
	  std::iter_swap(__first, __last);
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff fbae 	bl	8002780 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
	  ++__first;
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fec5 	bl	8002db8 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEppEv>
	  while (__comp(__first, __pivot))
 800302e:	e7c8      	b.n	8002fc2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
    }
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_ZN9__gnu_cxxneIPSt4pairIdiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fb4e 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8003048:	4603      	mov	r3, r0
 800304a:	681c      	ldr	r4, [r3, #0]
 800304c:	6838      	ldr	r0, [r7, #0]
 800304e:	f7ff fb49 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 8003052:	4603      	mov	r3, r0
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429c      	cmp	r4, r3
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f9c9 	bl	800340c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEET_S9_>
 800307a:	4604      	mov	r4, r0
 800307c:	68b8      	ldr	r0, [r7, #8]
 800307e:	f000 f9c5 	bl	800340c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEET_S9_>
 8003082:	4603      	mov	r3, r0
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4619      	mov	r1, r3
 8003088:	4620      	mov	r0, r4
 800308a:	f000 f9ca 	bl	8003422 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800308e:	4603      	mov	r3, r0
    }
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b089      	sub	sp, #36	@ 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fef8 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe ffd7 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f107 0410 	add.w	r4, r7, #16
 80030b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      _RandomAccessIterator __next = __last;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
      --__next;
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f98f 	bl	80033ea <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEmmEv>
      while (__comp(__val, __next))
 80030cc:	e019      	b.n	8003102 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x6a>
	  *__last = _GLIBCXX_MOVE(*__next);
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fee2 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80030d6:	4604      	mov	r4, r0
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fedc 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe ffbb 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7fe fd87 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
	  __last = __next;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	607b      	str	r3, [r7, #4]
	  --__next;
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f974 	bl	80033ea <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEmmEv>
      while (__comp(__val, __next))
 8003102:	f107 0110 	add.w	r1, r7, #16
 8003106:	463b      	mov	r3, r7
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f9aa 	bl	8003464 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclISt4pairIdiENS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbRT_T0_>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1db      	bne.n	80030ce <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff febe 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 800311e:	4604      	mov	r4, r0
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe ff9b 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 800312a:	4603      	mov	r3, r0
 800312c:	4619      	mov	r1, r3
 800312e:	4620      	mov	r0, r4
 8003130:	f7fe fd67 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
    }
 8003134:	bf00      	nop
 8003136:	3724      	adds	r7, #36	@ 0x24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd90      	pop	{r4, r7, pc}

0800313c <_ZSt12__niter_baseIPSt4pairIdiEET_S3_>:
    __niter_base(_Iterator __it)
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <_ZSt14__relocate_a_1IPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8003152:	b590      	push	{r4, r7, lr}
 8003154:	b087      	sub	sp, #28
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8003164:	e012      	b.n	800318c <_ZSt14__relocate_a_1IPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f000 f990 	bl	800348c <_ZSt11__addressofISt4pairIdiEEPT_RS2_>
 800316c:	4604      	mov	r4, r0
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f98c 	bl	800348c <_ZSt11__addressofISt4pairIdiEEPT_RS2_>
 8003174:	4603      	mov	r3, r0
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4620      	mov	r0, r4
 800317c:	f000 f991 	bl	80034a2 <_ZSt19__relocate_object_aISt4pairIdiES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3310      	adds	r3, #16
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3310      	adds	r3, #16
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	d1e8      	bne.n	8003166 <_ZSt14__relocate_a_1IPSt4pairIdiES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 8003194:	697b      	ldr	r3, [r7, #20]
    }
 8003196:	4618      	mov	r0, r3
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}

0800319e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt4pairIdiEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f9af 	bl	8003512 <_ZSt16__do_uninit_copyISt13move_iteratorIPSt4pairIdiEES3_ET0_T_S6_S5_>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d201      	bcs.n	80031d8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	e000      	b.n	80031da <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80031d8:	687b      	ldr	r3, [r7, #4]
    }
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80031e6:	b5b0      	push	{r4, r5, r7, lr}
 80031e8:	b092      	sub	sp, #72	@ 0x48
 80031ea:	af06      	add	r7, sp, #24
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      _Distance __secondChild = __holeIndex;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      while (__secondChild < (__len - 1) / 2)
 80031fa:	e045      	b.n	8003288 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (__comp(__first + __secondChild,
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fd26 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 8003210:	4604      	mov	r4, r0
 8003212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fd1d 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 8003222:	4602      	mov	r2, r0
 8003224:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003228:	4621      	mov	r1, r4
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fdd5 	bl	8002dda <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEESA_EEbT_T0_>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x56>
	    __secondChild--;
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	3b01      	subs	r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fd0a 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 8003248:	4603      	mov	r3, r0
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	f107 0318 	add.w	r3, r7, #24
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fe22 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8003256:	4604      	mov	r4, r0
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fcfc 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 8003264:	4603      	mov	r3, r0
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fe14 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fef3 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 800327a:	4603      	mov	r3, r0
 800327c:	4619      	mov	r1, r3
 800327e:	4620      	mov	r0, r4
 8003280:	f7fe fcbf 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
	  __holeIndex = __secondChild;
 8003284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003286:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	da00      	bge.n	8003292 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xac>
 8003290:	3301      	adds	r3, #1
 8003292:	105b      	asrs	r3, r3, #1
 8003294:	461a      	mov	r2, r3
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	4293      	cmp	r3, r2
 800329a:	dbaf      	blt.n	80031fc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d136      	bne.n	8003314 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3b02      	subs	r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	da00      	bge.n	80032b0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xca>
 80032ae:	3301      	adds	r3, #1
 80032b0:	105b      	asrs	r3, r3, #1
 80032b2:	461a      	mov	r2, r3
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d12c      	bne.n	8003314 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12e>
	  __secondChild = 2 * (__secondChild + 1);
 80032ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032bc:	3301      	adds	r3, #1
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fcc7 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80032ce:	4603      	mov	r3, r0
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	f107 0320 	add.w	r3, r7, #32
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fddf 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80032dc:	4604      	mov	r4, r0
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fcb7 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80032ee:	4603      	mov	r3, r0
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fdcf 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe feae 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8003304:	4603      	mov	r3, r0
 8003306:	4619      	mov	r1, r3
 8003308:	4620      	mov	r0, r4
 800330a:	f7fe fc7a 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
	  __holeIndex = __secondChild - 1;
 800330e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003310:	3b01      	subs	r3, #1
 8003312:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 8003314:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f929 	bl	8003570 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4629      	mov	r1, r5
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fce3 	bl	8000cf0 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800332a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800332e:	f7fe fe97 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8003332:	4602      	mov	r2, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	9304      	str	r3, [sp, #16]
 800333a:	466c      	mov	r4, sp
 800333c:	4613      	mov	r3, r2
 800333e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f91c 	bl	8003586 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>
    }
 800334e:	bf00      	nop
 8003350:	3730      	adds	r7, #48	@ 0x30
 8003352:	46bd      	mov	sp, r7
 8003354:	bdb0      	pop	{r4, r5, r7, pc}

08003356 <_ZStltIdiEbRKSt4pairIT_T0_ES5_>:
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
    { return __x.first < __y.first
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	ed93 6b00 	vldr	d6, [r3]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	ed93 7b00 	vldr	d7, [r3]
	     || (!(__y.first < __x.first) && __x.second < __y.second); }
 800336c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	d418      	bmi.n	80033a8 <_ZStltIdiEbRKSt4pairIT_T0_ES5_+0x52>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	ed93 6b00 	vldr	d6, [r3]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	ed93 7b00 	vldr	d7, [r3]
 8003382:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	bf4c      	ite	mi
 800338c:	2301      	movmi	r3, #1
 800338e:	2300      	movpl	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f083 0301 	eor.w	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <_ZStltIdiEbRKSt4pairIT_T0_ES5_+0x56>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	da01      	bge.n	80033ac <_ZStltIdiEbRKSt4pairIT_T0_ES5_+0x56>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <_ZStltIdiEbRKSt4pairIT_T0_ES5_+0x58>
 80033ac:	2300      	movs	r3, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <_ZNSt4pairIdiE4swapERS0_>:
      swap(pair& __p)
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	swap(first, __p.first);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f94a 	bl	8003664 <_ZSt4swapIdENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	swap(second, __p.second);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f103 0208 	add.w	r2, r3, #8
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 f966 	bl	80036ae <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      }
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	--_M_current;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1a3 0210 	sub.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
	return *this;
 80033fe:	687b      	ldr	r3, [r7, #4]
      }
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003422:	b5b0      	push	{r4, r5, r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f95c 	bl	80036ec <_ZSt12__niter_baseIPSt4pairIdiESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8003434:	4604      	mov	r4, r0
 8003436:	68b8      	ldr	r0, [r7, #8]
 8003438:	f000 f958 	bl	80036ec <_ZSt12__niter_baseIPSt4pairIdiESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800343c:	4605      	mov	r5, r0
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f954 	bl	80036ec <_ZSt12__niter_baseIPSt4pairIdiESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	4629      	mov	r1, r5
 800344a:	4620      	mov	r0, r4
 800344c:	f000 f95c 	bl	8003708 <_ZSt23__copy_move_backward_a1ILb1EPSt4pairIdiES2_ET1_T0_S4_S3_>
 8003450:	4603      	mov	r3, r0
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f967 	bl	8003728 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800345a:	4603      	mov	r3, r0
    }
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bdb0      	pop	{r4, r5, r7, pc}

08003464 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclISt4pairIdiENS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fd11 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8003478:	4603      	mov	r3, r0
 800347a:	4619      	mov	r1, r3
 800347c:	68b8      	ldr	r0, [r7, #8]
 800347e:	f7ff ff6a 	bl	8003356 <_ZStltIdiEbRKSt4pairIT_T0_ES5_>
 8003482:	4603      	mov	r3, r0
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_ZSt11__addressofISt4pairIdiEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <_ZSt19__relocate_object_aISt4pairIdiES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80034a2:	b590      	push	{r4, r7, lr}
 80034a4:	b08f      	sub	sp, #60	@ 0x3c
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80034ae:	68b8      	ldr	r0, [r7, #8]
 80034b0:	f7fe fdd6 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	61fa      	str	r2, [r7, #28]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80034c0:	69f8      	ldr	r0, [r7, #28]
 80034c2:	f7ff f82e 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80034c6:	4602      	mov	r2, r0
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	613a      	str	r2, [r7, #16]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4619      	mov	r1, r3
 80034d6:	2010      	movs	r0, #16
 80034d8:	f7fd fbf6 	bl	8000cc8 <_ZnwjPv>
 80034dc:	4604      	mov	r4, r0
 80034de:	6938      	ldr	r0, [r7, #16]
 80034e0:	f7ff f81f 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80034e4:	4603      	mov	r3, r0
 80034e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034ec:	bf00      	nop
	}
 80034ee:	bf00      	nop
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80034f0:	68b8      	ldr	r0, [r7, #8]
 80034f2:	f7ff ffcb 	bl	800348c <_ZSt11__addressofISt4pairIdiEEPT_RS2_>
 80034f6:	4602      	mov	r2, r0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80034fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
	{ __p->~_Up(); }
 8003506:	bf00      	nop
	}
 8003508:	bf00      	nop
    }
 800350a:	bf00      	nop
 800350c:	373c      	adds	r7, #60	@ 0x3c
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}

08003512 <_ZSt16__do_uninit_copyISt13move_iteratorIPSt4pairIdiEES3_ET0_T_S6_S5_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8003512:	b590      	push	{r4, r7, lr}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8003522:	e015      	b.n	8003550 <_ZSt16__do_uninit_copyISt13move_iteratorIPSt4pairIdiEES3_ET0_T_S6_S5_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8003524:	6978      	ldr	r0, [r7, #20]
 8003526:	f7ff ffb1 	bl	800348c <_ZSt11__addressofISt4pairIdiEEPT_RS2_>
 800352a:	4604      	mov	r4, r0
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f932 	bl	800379a <_ZNKSt13move_iteratorIPSt4pairIdiEEdeEv>
 8003536:	4603      	mov	r3, r0
 8003538:	4619      	mov	r1, r3
 800353a:	4620      	mov	r0, r4
 800353c:	f000 f939 	bl	80037b2 <_ZSt10_ConstructISt4pairIdiEJS1_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f917 	bl	8003778 <_ZNSt13move_iteratorIPSt4pairIdiEEppEv>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3310      	adds	r3, #16
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	f107 0208 	add.w	r2, r7, #8
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f8fb 	bl	8003756 <_ZStneIPSt4pairIdiEEbRKSt13move_iteratorIT_ES7_>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1de      	bne.n	8003524 <_ZSt16__do_uninit_copyISt13move_iteratorIPSt4pairIdiEES3_ET0_T_S6_S5_+0x12>
	  return __cur;
 8003566:	697b      	ldr	r3, [r7, #20]
    }
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}

08003570 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8003586:	b590      	push	{r4, r7, lr}
 8003588:	b089      	sub	sp, #36	@ 0x24
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3b01      	subs	r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	da00      	bge.n	800359c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x16>
 800359a:	3301      	adds	r3, #1
 800359c:	105b      	asrs	r3, r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80035a0:	e02c      	b.n	80035fc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x76>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80035a2:	f107 030c 	add.w	r3, r7, #12
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fb57 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80035ae:	4603      	mov	r3, r0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	f107 0310 	add.w	r3, r7, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fc6f 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80035bc:	4604      	mov	r4, r0
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	69f9      	ldr	r1, [r7, #28]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fb49 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 80035ca:	4603      	mov	r3, r0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fc61 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80035d8:	4603      	mov	r3, r0
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fd40 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4619      	mov	r1, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7fe fb0c 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
	  __holeIndex = __parent;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da00      	bge.n	80035f8 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x72>
 80035f6:	3301      	adds	r3, #1
 80035f8:	105b      	asrs	r3, r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	dd11      	ble.n	8003628 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa2>
 8003604:	f107 030c 	add.w	r3, r7, #12
 8003608:	69f9      	ldr	r1, [r7, #28]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fb26 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 8003610:	4603      	mov	r3, r0
 8003612:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003616:	4619      	mov	r1, r3
 8003618:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800361a:	f000 f8e0 	bl	80037de <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEES5_EEbT_RT0_>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa2>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1b9      	bne.n	80035a2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x1c>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fb11 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 800363a:	4603      	mov	r3, r0
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	f107 0318 	add.w	r3, r7, #24
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fc29 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 8003648:	4604      	mov	r4, r0
 800364a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800364e:	f7fe fd07 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 8003652:	4603      	mov	r3, r0
 8003654:	4619      	mov	r1, r3
 8003656:	4620      	mov	r0, r4
 8003658:	f7fe fad3 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
    }
 800365c:	bf00      	nop
 800365e:	3724      	adds	r7, #36	@ 0x24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd90      	pop	{r4, r7, pc}

08003664 <_ZSt4swapIdENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8ca 	bl	8003808 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8003674:	4603      	mov	r3, r0
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f000 f8c2 	bl	8003808 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8003684:	4603      	mov	r3, r0
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	e9c1 2300 	strd	r2, r3, [r1]
      __b = _GLIBCXX_MOVE(__tmp);
 8003690:	f107 0308 	add.w	r3, r7, #8
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f8b7 	bl	8003808 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 800369a:	4603      	mov	r3, r0
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	e9c1 2300 	strd	r2, r3, [r1]
    }
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f8b0 	bl	800381e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 80036be:	4603      	mov	r3, r0
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f000 f8aa 	bl	800381e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 80036ca:	4603      	mov	r3, r0
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f8a1 	bl	800381e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 80036dc:	4603      	mov	r3, r0
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	601a      	str	r2, [r3, #0]
    }
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <_ZSt12__niter_baseIPSt4pairIdiESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80036f4:	1d3b      	adds	r3, r7, #4
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fff4 	bl	80026e4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEE4baseEv>
 80036fc:	4603      	mov	r3, r0
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <_ZSt23__copy_move_backward_a1ILb1EPSt4pairIdiES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f88b 	bl	8003834 <_ZSt23__copy_move_backward_a2ILb1EPSt4pairIdiES2_ET1_T0_S4_S3_>
 800371e:	4603      	mov	r3, r0
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ffda 	bl	80036ec <_ZSt12__niter_baseIPSt4pairIdiESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8003738:	4602      	mov	r2, r0
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	111b      	asrs	r3, r3, #4
 8003740:	461a      	mov	r2, r3
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fa88 	bl	8001c5c <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEplEi>
 800374c:	4603      	mov	r3, r0
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <_ZStneIPSt4pairIdiEEbRKSt13move_iteratorIT_ES7_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f876 	bl	8003854 <_ZSteqIPSt4pairIdiEEbRKSt13move_iteratorIT_ES7_>
 8003768:	4603      	mov	r3, r0
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZNSt13move_iteratorIPSt4pairIdiEEppEv>:
      operator++()
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f103 0210 	add.w	r2, r3, #16
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
	return *this;
 800378c:	687b      	ldr	r3, [r7, #4]
      }
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_ZNKSt13move_iteratorIPSt4pairIdiEEdeEv>:
      operator*() const
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_ZSt10_ConstructISt4pairIdiEJS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80037b2:	b590      	push	{r4, r7, lr}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4619      	mov	r1, r3
 80037c0:	2010      	movs	r0, #16
 80037c2:	f7fd fa81 	bl	8000cc8 <_ZnwjPv>
 80037c6:	4604      	mov	r4, r0
 80037c8:	6838      	ldr	r0, [r7, #0]
 80037ca:	f7fe feaa 	bl	8002522 <_ZSt7forwardISt4pairIdiEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037ce:	4603      	mov	r3, r0
 80037d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd90      	pop	{r4, r7, pc}

080037de <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPSt4pairIdiESt6vectorIS5_SaIS5_EEEES5_EEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 80037ea:	f107 0308 	add.w	r3, r7, #8
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fb53 	bl	8002e9a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIdiESt6vectorIS2_SaIS2_EEEdeEv>
 80037f4:	4603      	mov	r3, r0
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fdac 	bl	8003356 <_ZStltIdiEbRKSt4pairIT_T0_ES5_>
 80037fe:	4603      	mov	r3, r0
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_ZSt23__copy_move_backward_a2ILb1EPSt4pairIdiES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f81b 	bl	8003880 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIdiES5_EET0_T_S7_S6_>
 800384a:	4603      	mov	r3, r0
    }
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZSteqIPSt4pairIdiEEbRKSt13move_iteratorIT_ES7_>:
    operator==(const move_iterator<_Iterator>& __x,
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f833 	bl	80038ca <_ZNKSt13move_iteratorIPSt4pairIdiEE4baseEv>
 8003864:	4604      	mov	r4, r0
 8003866:	6838      	ldr	r0, [r7, #0]
 8003868:	f000 f82f 	bl	80038ca <_ZNKSt13move_iteratorIPSt4pairIdiEE4baseEv>
 800386c:	4603      	mov	r3, r0
 800386e:	429c      	cmp	r4, r3
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}

08003880 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIdiES5_EET0_T_S7_S6_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	111b      	asrs	r3, r3, #4
 8003894:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8003896:	e010      	b.n	80038ba <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIdiES5_EET0_T_S7_S6_+0x3a>
	    *--__result = std::move(*--__last);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b10      	subs	r3, #16
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3b10      	subs	r3, #16
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68b8      	ldr	r0, [r7, #8]
 80038a6:	f7fe fbdb 	bl	8002060 <_ZSt4moveIRSt4pairIdiEEONSt16remove_referenceIT_E4typeEOS4_>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe f9a7 	bl	8001c02 <_ZNSt4pairIdiEaSEOS0_>
	  for (; __n > 0; --__n)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	dceb      	bgt.n	8003898 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIdiES5_EET0_T_S7_S6_+0x18>
	  return __result;
 80038c0:	687b      	ldr	r3, [r7, #4]
	}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZNKSt13move_iteratorIPSt4pairIdiEE4baseEv>:
      base() const
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <_Z41__static_initialization_and_destruction_0v>:
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
volatile unsigned int *DWT_CYCCNT   = (volatile unsigned int *)0xE0001004; //address of the register
volatile unsigned int *DWT_CONTROL  = (volatile unsigned int *)0xE0001000; //address of the register
volatile unsigned int *DWT_LAR      = (volatile unsigned int *)0xE0001FB0; //address of the register
volatile unsigned int *SCB_DEMCR    = (volatile unsigned int *)0xE000EDFC; //address of the register

static std::random_device rd;
 80038e8:	4813      	ldr	r0, [pc, #76]	@ (8003938 <_Z41__static_initialization_and_destruction_0v+0x54>)
 80038ea:	f7fd fa19 	bl	8000d20 <_ZNSt13random_deviceC1Ev>
static std::mt19937 rng(rd());
 80038ee:	4812      	ldr	r0, [pc, #72]	@ (8003938 <_Z41__static_initialization_and_destruction_0v+0x54>)
 80038f0:	f7fd fa48 	bl	8000d84 <_ZNSt13random_deviceclEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4619      	mov	r1, r3
 80038f8:	4810      	ldr	r0, [pc, #64]	@ (800393c <_Z41__static_initialization_and_destruction_0v+0x58>)
 80038fa:	f7fd ffe5 	bl	80018c8 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEC1Ej>
std::uniform_int_distribution<int> targetsRand(0, NUM_TARGETS - 1);
 80038fe:	220f      	movs	r2, #15
 8003900:	2100      	movs	r1, #0
 8003902:	480f      	ldr	r0, [pc, #60]	@ (8003940 <_Z41__static_initialization_and_destruction_0v+0x5c>)
 8003904:	f7fd ffee 	bl	80018e4 <_ZNSt24uniform_int_distributionIiEC1Eii>
std::uniform_int_distribution<int> pivotRand(0, NUM_TARGETS - 2);
 8003908:	220e      	movs	r2, #14
 800390a:	2100      	movs	r1, #0
 800390c:	480d      	ldr	r0, [pc, #52]	@ (8003944 <_Z41__static_initialization_and_destruction_0v+0x60>)
 800390e:	f7fd ffe9 	bl	80018e4 <_ZNSt24uniform_int_distributionIiEC1Eii>
std::uniform_int_distribution<int> distanceRand(0, MAX_DISTANCE);
 8003912:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003916:	2100      	movs	r1, #0
 8003918:	480b      	ldr	r0, [pc, #44]	@ (8003948 <_Z41__static_initialization_and_destruction_0v+0x64>)
 800391a:	f7fd ffe3 	bl	80018e4 <_ZNSt24uniform_int_distributionIiEC1Eii>
std::uniform_int_distribution<int> crossoverRand(0, HALF_PARENTS - 1);
 800391e:	221f      	movs	r2, #31
 8003920:	2100      	movs	r1, #0
 8003922:	480a      	ldr	r0, [pc, #40]	@ (800394c <_Z41__static_initialization_and_destruction_0v+0x68>)
 8003924:	f7fd ffde 	bl	80018e4 <_ZNSt24uniform_int_distributionIiEC1Eii>
std::uniform_int_distribution<int> mutateRand(1, 100);
 8003928:	2264      	movs	r2, #100	@ 0x64
 800392a:	2101      	movs	r1, #1
 800392c:	4808      	ldr	r0, [pc, #32]	@ (8003950 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 800392e:	f7fd ffd9 	bl	80018e4 <_ZNSt24uniform_int_distributionIiEC1Eii>
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	240000cc 	.word	0x240000cc
 800393c:	24000a90 	.word	0x24000a90
 8003940:	24001454 	.word	0x24001454
 8003944:	2400145c 	.word	0x2400145c
 8003948:	24001464 	.word	0x24001464
 800394c:	2400146c 	.word	0x2400146c
 8003950:	24001474 	.word	0x24001474

08003954 <_Z41__static_initialization_and_destruction_1v>:
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
static std::random_device rd;
 8003958:	4802      	ldr	r0, [pc, #8]	@ (8003964 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800395a:	f7fd fa07 	bl	8000d6c <_ZNSt13random_deviceD1Ev>
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	240000cc 	.word	0x240000cc

08003968 <_GLOBAL__sub_I_DWT_CYCCNT>:
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
 800396c:	f7ff ffba 	bl	80038e4 <_Z41__static_initialization_and_destruction_0v>
 8003970:	bd80      	pop	{r7, pc}

08003972 <_GLOBAL__sub_D_DWT_CYCCNT>:
 8003972:	b580      	push	{r7, lr}
 8003974:	af00      	add	r7, sp, #0
 8003976:	f7ff ffed 	bl	8003954 <_Z41__static_initialization_and_destruction_1v>
 800397a:	bd80      	pop	{r7, pc}

0800397c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800397c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80039b8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003980:	f7fd f982 	bl	8000c88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003984:	f7fd f8e0 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003988:	480c      	ldr	r0, [pc, #48]	@ (80039bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800398a:	490d      	ldr	r1, [pc, #52]	@ (80039c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800398c:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003990:	e002      	b.n	8003998 <LoopCopyDataInit>

08003992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003996:	3304      	adds	r3, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800399c:	d3f9      	bcc.n	8003992 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399e:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039a0:	4c0a      	ldr	r4, [pc, #40]	@ (80039cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a4:	e001      	b.n	80039aa <LoopFillZerobss>

080039a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a8:	3204      	adds	r2, #4

080039aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ac:	d3fb      	bcc.n	80039a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ae:	f004 fb53 	bl	8008058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039b2:	f7fc fe83 	bl	80006bc <main>
  bx  lr
 80039b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80039bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039c0:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80039c4:	0800a5d8 	.word	0x0800a5d8
  ldr r2, =_sbss
 80039c8:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 80039cc:	24001ac0 	.word	0x24001ac0

080039d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC3_IRQHandler>
	...

080039d4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	@ 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80039de:	2300      	movs	r3, #0
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <BSP_LED_Init+0x28>
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d006      	beq.n	80039fc <BSP_LED_Init+0x28>
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d003      	beq.n	80039fc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039f4:	f06f 0301 	mvn.w	r3, #1
 80039f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fa:	e055      	b.n	8003aa8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8003a02:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a08:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a12:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	e021      	b.n	8003a66 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10f      	bne.n	8003a48 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8003a28:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a2e:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a38:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	e00e      	b.n	8003a66 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8003a48:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a4e:	4a19      	ldr	r2, [pc, #100]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a58:	4b16      	ldr	r3, [pc, #88]	@ (8003ab4 <BSP_LED_Init+0xe0>)
 8003a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <BSP_LED_Init+0xe4>)
 8003a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a6e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003abc <BSP_LED_Init+0xe8>)
 8003a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a84:	f107 0218 	add.w	r2, r7, #24
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fbde 	bl	800424c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <BSP_LED_Init+0xe8>)
 8003a94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	4a07      	ldr	r2, [pc, #28]	@ (8003ab8 <BSP_LED_Init+0xe4>)
 8003a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f000 fd82 	bl	80045ac <HAL_GPIO_WritePin>
  }

  return ret;
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3730      	adds	r7, #48	@ 0x30
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	08008b78 	.word	0x08008b78
 8003abc:	2400001c 	.word	0x2400001c

08003ac0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <BSP_LED_On+0x28>
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d006      	beq.n	8003ae8 <BSP_LED_On+0x28>
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d003      	beq.n	8003ae8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ae0:	f06f 0301 	mvn.w	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e00b      	b.n	8003b00 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	4a08      	ldr	r2, [pc, #32]	@ (8003b0c <BSP_LED_On+0x4c>)
 8003aec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	4a07      	ldr	r2, [pc, #28]	@ (8003b10 <BSP_LED_On+0x50>)
 8003af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af8:	2201      	movs	r2, #1
 8003afa:	4619      	mov	r1, r3
 8003afc:	f000 fd56 	bl	80045ac <HAL_GPIO_WritePin>
  }

  return ret;
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2400001c 	.word	0x2400001c
 8003b10:	08008b78 	.word	0x08008b78

08003b14 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <BSP_LED_Off+0x28>
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d006      	beq.n	8003b3c <BSP_LED_Off+0x28>
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d003      	beq.n	8003b3c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b34:	f06f 0301 	mvn.w	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e00b      	b.n	8003b54 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <BSP_LED_Off+0x4c>)
 8003b40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	4a07      	ldr	r2, [pc, #28]	@ (8003b64 <BSP_LED_Off+0x50>)
 8003b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f000 fd2c 	bl	80045ac <HAL_GPIO_WritePin>
  }

  return ret;
 8003b54:	68fb      	ldr	r3, [r7, #12]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	2400001c 	.word	0x2400001c
 8003b64:	08008b78 	.word	0x08008b78

08003b68 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460a      	mov	r2, r1
 8003b72:	71fb      	strb	r3, [r7, #7]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8003b78:	4b2e      	ldr	r3, [pc, #184]	@ (8003c34 <BSP_PB_Init+0xcc>)
 8003b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c34 <BSP_PB_Init+0xcc>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <BSP_PB_Init+0xcc>)
 8003b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8003b96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b9a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8003ba4:	79bb      	ldrb	r3, [r7, #6]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	4a21      	ldr	r2, [pc, #132]	@ (8003c38 <BSP_PB_Init+0xd0>)
 8003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb6:	f107 020c 	add.w	r2, r7, #12
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb45 	bl	800424c <HAL_GPIO_Init>
 8003bc2:	e031      	b.n	8003c28 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003bc4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003bc8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003c38 <BSP_PB_Init+0xd0>)
 8003bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd2:	f107 020c 	add.w	r2, r7, #12
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fb37 	bl	800424c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4a16      	ldr	r2, [pc, #88]	@ (8003c3c <BSP_PB_Init+0xd4>)
 8003be4:	441a      	add	r2, r3
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	4915      	ldr	r1, [pc, #84]	@ (8003c40 <BSP_PB_Init+0xd8>)
 8003bea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f000 fae7 	bl	80041c4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4a10      	ldr	r2, [pc, #64]	@ (8003c3c <BSP_PB_Init+0xd4>)
 8003bfc:	1898      	adds	r0, r3, r2
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	4a10      	ldr	r2, [pc, #64]	@ (8003c44 <BSP_PB_Init+0xdc>)
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	461a      	mov	r2, r3
 8003c08:	2100      	movs	r1, #0
 8003c0a:	f000 fabc 	bl	8004186 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003c0e:	2028      	movs	r0, #40	@ 0x28
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <BSP_PB_Init+0xe0>)
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f000 fa7f 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003c20:	2328      	movs	r3, #40	@ 0x28
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa95 	bl	8004152 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	24000028 	.word	0x24000028
 8003c3c:	2400147c 	.word	0x2400147c
 8003c40:	08008b80 	.word	0x08008b80
 8003c44:	2400002c 	.word	0x2400002c
 8003c48:	24000030 	.word	0x24000030

08003c4c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4a04      	ldr	r2, [pc, #16]	@ (8003c6c <BSP_PB_IRQHandler+0x20>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fac4 	bl	80041ec <HAL_EXTI_IRQHandler>
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2400147c 	.word	0x2400147c

08003c70 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c86:	f06f 0301 	mvn.w	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e018      	b.n	8003cc0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2294      	movs	r2, #148	@ 0x94
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <BSP_COM_Init+0x5c>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f86e 	bl	8003d7c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	2294      	movs	r2, #148	@ 0x94
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	4a08      	ldr	r2, [pc, #32]	@ (8003ccc <BSP_COM_Init+0x5c>)
 8003caa:	4413      	add	r3, r2
 8003cac:	6839      	ldr	r1, [r7, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f80e 	bl	8003cd0 <MX_USART3_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003cba:	f06f 0303 	mvn.w	r3, #3
 8003cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	24001484 	.word	0x24001484

08003cd0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <MX_USART3_Init+0x60>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	220c      	movs	r2, #12
 8003cee:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	895b      	ldrh	r3, [r3, #10]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	891b      	ldrh	r3, [r3, #8]
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	899b      	ldrh	r3, [r3, #12]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d1c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f001 ff3c 	bl	8005b9c <HAL_UART_Init>
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	24000018 	.word	0x24000018

08003d34 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8003d3c:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <__io_putchar+0x30>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	2394      	movs	r3, #148	@ 0x94
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	4a07      	ldr	r2, [pc, #28]	@ (8003d68 <__io_putchar+0x34>)
 8003d4a:	1898      	adds	r0, r3, r2
 8003d4c:	1d39      	adds	r1, r7, #4
 8003d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d52:	2201      	movs	r2, #1
 8003d54:	f001 ff7c 	bl	8005c50 <HAL_UART_Transmit>
  return ch;
 8003d58:	687b      	ldr	r3, [r7, #4]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	24001518 	.word	0x24001518
 8003d68:	24001484 	.word	0x24001484

08003d6c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fc fdb9 	bl	80008e8 <BSP_PB_Callback>
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	@ 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8003d84:	4b27      	ldr	r3, [pc, #156]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d8a:	4a26      	ldr	r2, [pc, #152]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d94:	4b23      	ldr	r3, [pc, #140]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003da8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003daa:	f043 0308 	orr.w	r3, r3, #8
 8003dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003db2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003dc0:	4b18      	ldr	r3, [pc, #96]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003dc6:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003dd0:	4b14      	ldr	r3, [pc, #80]	@ (8003e24 <COM1_MspInit+0xa8>)
 8003dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8003dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003de2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003de8:	2302      	movs	r3, #2
 8003dea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003dec:	2301      	movs	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003df0:	2307      	movs	r3, #7
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	4619      	mov	r1, r3
 8003dfa:	480b      	ldr	r0, [pc, #44]	@ (8003e28 <COM1_MspInit+0xac>)
 8003dfc:	f000 fa26 	bl	800424c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003e00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e04:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e06:	2302      	movs	r3, #2
 8003e08:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4619      	mov	r1, r3
 8003e14:	4804      	ldr	r0, [pc, #16]	@ (8003e28 <COM1_MspInit+0xac>)
 8003e16:	f000 fa19 	bl	800424c <HAL_GPIO_Init>
}
 8003e1a:	bf00      	nop
 8003e1c:	3728      	adds	r7, #40	@ 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58020c00 	.word	0x58020c00

08003e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e32:	2003      	movs	r0, #3
 8003e34:	f000 f968 	bl	8004108 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e38:	f001 fa1c 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <HAL_Init+0x68>)
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	4913      	ldr	r1, [pc, #76]	@ (8003e98 <HAL_Init+0x6c>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e56:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <HAL_Init+0x68>)
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e98 <HAL_Init+0x6c>)
 8003e60:	5cd3      	ldrb	r3, [r2, r3]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e9c <HAL_Init+0x70>)
 8003e6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e70:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea0 <HAL_Init+0x74>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e76:	2000      	movs	r0, #0
 8003e78:	f000 f814 	bl	8003ea4 <HAL_InitTick>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e002      	b.n	8003e8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e86:	f7fc fd49 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58024400 	.word	0x58024400
 8003e98:	08008b68 	.word	0x08008b68
 8003e9c:	24000004 	.word	0x24000004
 8003ea0:	24000000 	.word	0x24000000

08003ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003eac:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_InitTick+0x60>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e021      	b.n	8003efc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003eb8:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <HAL_InitTick+0x64>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <HAL_InitTick+0x60>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f94d 	bl	800416e <HAL_SYSTICK_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00e      	b.n	8003efc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d80a      	bhi.n	8003efa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f000 f917 	bl	800411e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ef0:	4a06      	ldr	r2, [pc, #24]	@ (8003f0c <HAL_InitTick+0x68>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	24000038 	.word	0x24000038
 8003f08:	24000000 	.word	0x24000000
 8003f0c:	24000034 	.word	0x24000034

08003f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f14:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <HAL_IncTick+0x20>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_IncTick+0x24>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a04      	ldr	r2, [pc, #16]	@ (8003f34 <HAL_IncTick+0x24>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	24000038 	.word	0x24000038
 8003f34:	2400151c 	.word	0x2400151c

08003f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f3c:	4b03      	ldr	r3, [pc, #12]	@ (8003f4c <HAL_GetTick+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2400151c 	.word	0x2400151c

08003f50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <HAL_GetREVID+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0c1b      	lsrs	r3, r3, #16
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	5c001000 	.word	0x5c001000

08003f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f78:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f84:	4013      	ands	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f90:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f96:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	60d3      	str	r3, [r2, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	05fa0000 	.word	0x05fa0000

08003fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb4:	4b04      	ldr	r3, [pc, #16]	@ (8003fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 0307 	and.w	r3, r3, #7
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db0b      	blt.n	8003ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	4907      	ldr	r1, [pc, #28]	@ (8004004 <__NVIC_EnableIRQ+0x38>)
 8003fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2001      	movs	r0, #1
 8003fee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000e100 	.word	0xe000e100

08004008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	db0a      	blt.n	8004032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	490c      	ldr	r1, [pc, #48]	@ (8004054 <__NVIC_SetPriority+0x4c>)
 8004022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	440b      	add	r3, r1
 800402c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004030:	e00a      	b.n	8004048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4908      	ldr	r1, [pc, #32]	@ (8004058 <__NVIC_SetPriority+0x50>)
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	3b04      	subs	r3, #4
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	440b      	add	r3, r1
 8004046:	761a      	strb	r2, [r3, #24]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000e100 	.word	0xe000e100
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	@ 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	2b04      	cmp	r3, #4
 8004078:	bf28      	it	cs
 800407a:	2304      	movcs	r3, #4
 800407c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3304      	adds	r3, #4
 8004082:	2b06      	cmp	r3, #6
 8004084:	d902      	bls.n	800408c <NVIC_EncodePriority+0x30>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3b03      	subs	r3, #3
 800408a:	e000      	b.n	800408e <NVIC_EncodePriority+0x32>
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	f04f 32ff 	mov.w	r2, #4294967295
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	401a      	ands	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a4:	f04f 31ff 	mov.w	r1, #4294967295
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	43d9      	mvns	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	4313      	orrs	r3, r2
         );
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3724      	adds	r7, #36	@ 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040d4:	d301      	bcc.n	80040da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00f      	b.n	80040fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <SysTick_Config+0x40>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e2:	210f      	movs	r1, #15
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f7ff ff8e 	bl	8004008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <SysTick_Config+0x40>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <SysTick_Config+0x40>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	e000e010 	.word	0xe000e010

08004108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff29 	bl	8003f68 <__NVIC_SetPriorityGrouping>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	4603      	mov	r3, r0
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800412c:	f7ff ff40 	bl	8003fb0 <__NVIC_GetPriorityGrouping>
 8004130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	6978      	ldr	r0, [r7, #20]
 8004138:	f7ff ff90 	bl	800405c <NVIC_EncodePriority>
 800413c:	4602      	mov	r2, r0
 800413e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff5f 	bl	8004008 <__NVIC_SetPriority>
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800415c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff33 	bl	8003fcc <__NVIC_EnableIRQ>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ffa4 	bl	80040c4 <SysTick_Config>
 800417c:	4603      	mov	r3, r0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004186:	b480      	push	{r7}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	460b      	mov	r3, r1
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e00a      	b.n	80041b8 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80041a2:	7afb      	ldrb	r3, [r7, #11]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]
      break;
 80041ae:	e002      	b.n	80041b6 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	bf00      	nop
  }

  return status;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e003      	b.n	80041e0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80041de:	2300      	movs	r3, #0
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	2201      	movs	r2, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	011a      	lsls	r2, r3, #4
 8004214:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <HAL_EXTI_IRQHandler+0x5c>)
 8004216:	4413      	add	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4798      	blx	r3
    }
  }
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	58000088 	.word	0x58000088

0800424c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	@ 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800425a:	4b89      	ldr	r3, [pc, #548]	@ (8004480 <HAL_GPIO_Init+0x234>)
 800425c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800425e:	e194      	b.n	800458a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8186 	beq.w	8004584 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d005      	beq.n	8004290 <HAL_GPIO_Init+0x44>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d130      	bne.n	80042f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042c6:	2201      	movs	r2, #1
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	f003 0201 	and.w	r2, r3, #1
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d017      	beq.n	800432e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d123      	bne.n	8004382 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	08da      	lsrs	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3208      	adds	r2, #8
 8004342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	220f      	movs	r2, #15
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	08da      	lsrs	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3208      	adds	r2, #8
 800437c:	69b9      	ldr	r1, [r7, #24]
 800437e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	2203      	movs	r2, #3
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 0203 	and.w	r2, r3, #3
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80e0 	beq.w	8004584 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004484 <HAL_GPIO_Init+0x238>)
 80043c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004484 <HAL_GPIO_Init+0x238>)
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80043d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <HAL_GPIO_Init+0x238>)
 80043d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043e2:	4a29      	ldr	r2, [pc, #164]	@ (8004488 <HAL_GPIO_Init+0x23c>)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	3302      	adds	r3, #2
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	220f      	movs	r2, #15
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a20      	ldr	r2, [pc, #128]	@ (800448c <HAL_GPIO_Init+0x240>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d052      	beq.n	80044b4 <HAL_GPIO_Init+0x268>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1f      	ldr	r2, [pc, #124]	@ (8004490 <HAL_GPIO_Init+0x244>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d031      	beq.n	800447a <HAL_GPIO_Init+0x22e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1e      	ldr	r2, [pc, #120]	@ (8004494 <HAL_GPIO_Init+0x248>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02b      	beq.n	8004476 <HAL_GPIO_Init+0x22a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <HAL_GPIO_Init+0x24c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d025      	beq.n	8004472 <HAL_GPIO_Init+0x226>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1c      	ldr	r2, [pc, #112]	@ (800449c <HAL_GPIO_Init+0x250>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01f      	beq.n	800446e <HAL_GPIO_Init+0x222>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1b      	ldr	r2, [pc, #108]	@ (80044a0 <HAL_GPIO_Init+0x254>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d019      	beq.n	800446a <HAL_GPIO_Init+0x21e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1a      	ldr	r2, [pc, #104]	@ (80044a4 <HAL_GPIO_Init+0x258>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0x21a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <HAL_GPIO_Init+0x25c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00d      	beq.n	8004462 <HAL_GPIO_Init+0x216>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <HAL_GPIO_Init+0x260>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x212>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <HAL_GPIO_Init+0x264>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_GPIO_Init+0x20e>
 8004456:	2309      	movs	r3, #9
 8004458:	e02d      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 800445a:	230a      	movs	r3, #10
 800445c:	e02b      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 800445e:	2308      	movs	r3, #8
 8004460:	e029      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 8004462:	2307      	movs	r3, #7
 8004464:	e027      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 8004466:	2306      	movs	r3, #6
 8004468:	e025      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 800446a:	2305      	movs	r3, #5
 800446c:	e023      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 800446e:	2304      	movs	r3, #4
 8004470:	e021      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 8004472:	2303      	movs	r3, #3
 8004474:	e01f      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 8004476:	2302      	movs	r3, #2
 8004478:	e01d      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 800447a:	2301      	movs	r3, #1
 800447c:	e01b      	b.n	80044b6 <HAL_GPIO_Init+0x26a>
 800447e:	bf00      	nop
 8004480:	58000080 	.word	0x58000080
 8004484:	58024400 	.word	0x58024400
 8004488:	58000400 	.word	0x58000400
 800448c:	58020000 	.word	0x58020000
 8004490:	58020400 	.word	0x58020400
 8004494:	58020800 	.word	0x58020800
 8004498:	58020c00 	.word	0x58020c00
 800449c:	58021000 	.word	0x58021000
 80044a0:	58021400 	.word	0x58021400
 80044a4:	58021800 	.word	0x58021800
 80044a8:	58021c00 	.word	0x58021c00
 80044ac:	58022000 	.word	0x58022000
 80044b0:	58022400 	.word	0x58022400
 80044b4:	2300      	movs	r3, #0
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f002 0203 	and.w	r2, r2, #3
 80044bc:	0092      	lsls	r2, r2, #2
 80044be:	4093      	lsls	r3, r2
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c6:	4938      	ldr	r1, [pc, #224]	@ (80045a8 <HAL_GPIO_Init+0x35c>)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	3302      	adds	r3, #2
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80044fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f ae63 	bne.w	8004260 <HAL_GPIO_Init+0x14>
  }
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	3724      	adds	r7, #36	@ 0x24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	58000400 	.word	0x58000400

080045ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
 80045b8:	4613      	mov	r3, r2
 80045ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045bc:	787b      	ldrb	r3, [r7, #1]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045c2:	887a      	ldrh	r2, [r7, #2]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80045c8:	e003      	b.n	80045d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045ca:	887b      	ldrh	r3, [r7, #2]
 80045cc:	041a      	lsls	r2, r3, #16
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	619a      	str	r2, [r3, #24]
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045e8:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_PWREx_ConfigSupply+0x70>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d00a      	beq.n	800460a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045f4:	4b16      	ldr	r3, [pc, #88]	@ (8004650 <HAL_PWREx_ConfigSupply+0x70>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d001      	beq.n	8004606 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e01f      	b.n	8004646 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e01d      	b.n	8004646 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800460a:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <HAL_PWREx_ConfigSupply+0x70>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f023 0207 	bic.w	r2, r3, #7
 8004612:	490f      	ldr	r1, [pc, #60]	@ (8004650 <HAL_PWREx_ConfigSupply+0x70>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4313      	orrs	r3, r2
 8004618:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800461a:	f7ff fc8d 	bl	8003f38 <HAL_GetTick>
 800461e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004620:	e009      	b.n	8004636 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004622:	f7ff fc89 	bl	8003f38 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004630:	d901      	bls.n	8004636 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e007      	b.n	8004646 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_PWREx_ConfigSupply+0x70>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004642:	d1ee      	bne.n	8004622 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	58024800 	.word	0x58024800

08004654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	@ 0x30
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f000 bc48 	b.w	8004ef8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8088 	beq.w	8004786 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004676:	4b99      	ldr	r3, [pc, #612]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004680:	4b96      	ldr	r3, [pc, #600]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004688:	2b10      	cmp	r3, #16
 800468a:	d007      	beq.n	800469c <HAL_RCC_OscConfig+0x48>
 800468c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468e:	2b18      	cmp	r3, #24
 8004690:	d111      	bne.n	80046b6 <HAL_RCC_OscConfig+0x62>
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	4b8f      	ldr	r3, [pc, #572]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d06d      	beq.n	8004784 <HAL_RCC_OscConfig+0x130>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d169      	bne.n	8004784 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f000 bc21 	b.w	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x7a>
 80046c0:	4b86      	ldr	r3, [pc, #536]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a85      	ldr	r2, [pc, #532]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80046c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	e02e      	b.n	800472c <HAL_RCC_OscConfig+0xd8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x9c>
 80046d6:	4b81      	ldr	r3, [pc, #516]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a80      	ldr	r2, [pc, #512]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b7e      	ldr	r3, [pc, #504]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7d      	ldr	r2, [pc, #500]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80046e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e01d      	b.n	800472c <HAL_RCC_OscConfig+0xd8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0xc0>
 80046fa:	4b78      	ldr	r3, [pc, #480]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a77      	ldr	r2, [pc, #476]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4b75      	ldr	r3, [pc, #468]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a74      	ldr	r2, [pc, #464]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e00b      	b.n	800472c <HAL_RCC_OscConfig+0xd8>
 8004714:	4b71      	ldr	r3, [pc, #452]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a70      	ldr	r2, [pc, #448]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 800471a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	4b6e      	ldr	r3, [pc, #440]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a6d      	ldr	r2, [pc, #436]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800472a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d013      	beq.n	800475c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7ff fc00 	bl	8003f38 <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800473c:	f7ff fbfc 	bl	8003f38 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	@ 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e3d4      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800474e:	4b63      	ldr	r3, [pc, #396]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0xe8>
 800475a:	e014      	b.n	8004786 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7ff fbec 	bl	8003f38 <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7ff fbe8 	bl	8003f38 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	@ 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e3c0      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004776:	4b59      	ldr	r3, [pc, #356]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x110>
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80ca 	beq.w	8004928 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004794:	4b51      	ldr	r3, [pc, #324]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800479c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800479e:	4b4f      	ldr	r3, [pc, #316]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_RCC_OscConfig+0x166>
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2b18      	cmp	r3, #24
 80047ae:	d156      	bne.n	800485e <HAL_RCC_OscConfig+0x20a>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d151      	bne.n	800485e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ba:	4b48      	ldr	r3, [pc, #288]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_RCC_OscConfig+0x17e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e392      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047d2:	4b42      	ldr	r3, [pc, #264]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 0219 	bic.w	r2, r3, #25
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	493f      	ldr	r1, [pc, #252]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7ff fba8 	bl	8003f38 <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ec:	f7ff fba4 	bl	8003f38 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e37c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047fe:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	f7ff fba1 	bl	8003f50 <HAL_GetREVID>
 800480e:	4603      	mov	r3, r0
 8004810:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004814:	4293      	cmp	r3, r2
 8004816:	d817      	bhi.n	8004848 <HAL_RCC_OscConfig+0x1f4>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d108      	bne.n	8004832 <HAL_RCC_OscConfig+0x1de>
 8004820:	4b2e      	ldr	r3, [pc, #184]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004828:	4a2c      	ldr	r2, [pc, #176]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 800482a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800482e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004830:	e07a      	b.n	8004928 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	031b      	lsls	r3, r3, #12
 8004840:	4926      	ldr	r1, [pc, #152]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004846:	e06f      	b.n	8004928 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	4921      	ldr	r1, [pc, #132]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800485c:	e064      	b.n	8004928 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d047      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004866:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 0219 	bic.w	r2, r3, #25
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	491a      	ldr	r1, [pc, #104]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7ff fb5e 	bl	8003f38 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004880:	f7ff fb5a 	bl	8003f38 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e332      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	f7ff fb57 	bl	8003f50 <HAL_GetREVID>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d819      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b40      	cmp	r3, #64	@ 0x40
 80048b2:	d108      	bne.n	80048c6 <HAL_RCC_OscConfig+0x272>
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048bc:	4a07      	ldr	r2, [pc, #28]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80048be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c2:	6053      	str	r3, [r2, #4]
 80048c4:	e030      	b.n	8004928 <HAL_RCC_OscConfig+0x2d4>
 80048c6:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	031b      	lsls	r3, r3, #12
 80048d4:	4901      	ldr	r1, [pc, #4]	@ (80048dc <HAL_RCC_OscConfig+0x288>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
 80048da:	e025      	b.n	8004928 <HAL_RCC_OscConfig+0x2d4>
 80048dc:	58024400 	.word	0x58024400
 80048e0:	4b9a      	ldr	r3, [pc, #616]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	4997      	ldr	r1, [pc, #604]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
 80048f4:	e018      	b.n	8004928 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f6:	4b95      	ldr	r3, [pc, #596]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a94      	ldr	r2, [pc, #592]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7ff fb19 	bl	8003f38 <HAL_GetTick>
 8004906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490a:	f7ff fb15 	bl	8003f38 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e2ed      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800491c:	4b8b      	ldr	r3, [pc, #556]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a9 	beq.w	8004a88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004936:	4b85      	ldr	r3, [pc, #532]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800493e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004940:	4b82      	ldr	r3, [pc, #520]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d007      	beq.n	800495c <HAL_RCC_OscConfig+0x308>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b18      	cmp	r3, #24
 8004950:	d13a      	bne.n	80049c8 <HAL_RCC_OscConfig+0x374>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d135      	bne.n	80049c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800495c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_OscConfig+0x320>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b80      	cmp	r3, #128	@ 0x80
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e2c1      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004974:	f7ff faec 	bl	8003f50 <HAL_GetREVID>
 8004978:	4603      	mov	r3, r0
 800497a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800497e:	4293      	cmp	r3, r2
 8004980:	d817      	bhi.n	80049b2 <HAL_RCC_OscConfig+0x35e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	2b20      	cmp	r3, #32
 8004988:	d108      	bne.n	800499c <HAL_RCC_OscConfig+0x348>
 800498a:	4b70      	ldr	r3, [pc, #448]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004992:	4a6e      	ldr	r2, [pc, #440]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004994:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004998:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800499a:	e075      	b.n	8004a88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800499c:	4b6b      	ldr	r3, [pc, #428]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	069b      	lsls	r3, r3, #26
 80049aa:	4968      	ldr	r1, [pc, #416]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049b0:	e06a      	b.n	8004a88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049b2:	4b66      	ldr	r3, [pc, #408]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	4962      	ldr	r1, [pc, #392]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049c6:	e05f      	b.n	8004a88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d042      	beq.n	8004a56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049d0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80049d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7ff faac 	bl	8003f38 <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049e4:	f7ff faa8 	bl	8003f38 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e280      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049f6:	4b55      	ldr	r3, [pc, #340]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a02:	f7ff faa5 	bl	8003f50 <HAL_GetREVID>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d817      	bhi.n	8004a40 <HAL_RCC_OscConfig+0x3ec>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d108      	bne.n	8004a2a <HAL_RCC_OscConfig+0x3d6>
 8004a18:	4b4c      	ldr	r3, [pc, #304]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a20:	4a4a      	ldr	r2, [pc, #296]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a26:	6053      	str	r3, [r2, #4]
 8004a28:	e02e      	b.n	8004a88 <HAL_RCC_OscConfig+0x434>
 8004a2a:	4b48      	ldr	r3, [pc, #288]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	069b      	lsls	r3, r3, #26
 8004a38:	4944      	ldr	r1, [pc, #272]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	604b      	str	r3, [r1, #4]
 8004a3e:	e023      	b.n	8004a88 <HAL_RCC_OscConfig+0x434>
 8004a40:	4b42      	ldr	r3, [pc, #264]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	493f      	ldr	r1, [pc, #252]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
 8004a54:	e018      	b.n	8004a88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a56:	4b3d      	ldr	r3, [pc, #244]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7ff fa69 	bl	8003f38 <HAL_GetTick>
 8004a66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a6a:	f7ff fa65 	bl	8003f38 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e23d      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a7c:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d036      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7ff fa46 	bl	8003f38 <HAL_GetTick>
 8004aac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7ff fa42 	bl	8003f38 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e21a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ac2:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x45c>
 8004ace:	e018      	b.n	8004b02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7ff fa2c 	bl	8003f38 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7ff fa28 	bl	8003f38 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e200      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004af6:	4b15      	ldr	r3, [pc, #84]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d039      	beq.n	8004b82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b16:	4b0d      	ldr	r3, [pc, #52]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004b1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b22:	f7ff fa09 	bl	8003f38 <HAL_GetTick>
 8004b26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b2a:	f7ff fa05 	bl	8003f38 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1dd      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b3c:	4b03      	ldr	r3, [pc, #12]	@ (8004b4c <HAL_RCC_OscConfig+0x4f8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x4d6>
 8004b48:	e01b      	b.n	8004b82 <HAL_RCC_OscConfig+0x52e>
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b50:	4b9b      	ldr	r3, [pc, #620]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a9a      	ldr	r2, [pc, #616]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004b56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b5c:	f7ff f9ec 	bl	8003f38 <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b64:	f7ff f9e8 	bl	8003f38 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1c0      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b76:	4b92      	ldr	r3, [pc, #584]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 8081 	beq.w	8004c92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b90:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc4 <HAL_RCC_OscConfig+0x770>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a8b      	ldr	r2, [pc, #556]	@ (8004dc4 <HAL_RCC_OscConfig+0x770>)
 8004b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b9c:	f7ff f9cc 	bl	8003f38 <HAL_GetTick>
 8004ba0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba4:	f7ff f9c8 	bl	8003f38 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1a0      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bb6:	4b83      	ldr	r3, [pc, #524]	@ (8004dc4 <HAL_RCC_OscConfig+0x770>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d106      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x584>
 8004bca:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	4a7c      	ldr	r2, [pc, #496]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd6:	e02d      	b.n	8004c34 <HAL_RCC_OscConfig+0x5e0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5a6>
 8004be0:	4b77      	ldr	r3, [pc, #476]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be4:	4a76      	ldr	r2, [pc, #472]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bec:	4b74      	ldr	r3, [pc, #464]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf0:	4a73      	ldr	r2, [pc, #460]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004bf2:	f023 0304 	bic.w	r3, r3, #4
 8004bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCC_OscConfig+0x5e0>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b05      	cmp	r3, #5
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x5c8>
 8004c02:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c06:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	f043 0304 	orr.w	r3, r3, #4
 8004c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c12:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0x5e0>
 8004c1c:	4b68      	ldr	r3, [pc, #416]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c20:	4a67      	ldr	r2, [pc, #412]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c28:	4b65      	ldr	r3, [pc, #404]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2c:	4a64      	ldr	r2, [pc, #400]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	f023 0304 	bic.w	r3, r3, #4
 8004c32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7ff f97c 	bl	8003f38 <HAL_GetTick>
 8004c40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7ff f978 	bl	8003f38 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e14e      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5a:	4b59      	ldr	r3, [pc, #356]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0ee      	beq.n	8004c44 <HAL_RCC_OscConfig+0x5f0>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7ff f966 	bl	8003f38 <HAL_GetTick>
 8004c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c70:	f7ff f962 	bl	8003f38 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e138      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c86:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1ee      	bne.n	8004c70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 812d 	beq.w	8004ef6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c9c:	4b48      	ldr	r3, [pc, #288]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca4:	2b18      	cmp	r3, #24
 8004ca6:	f000 80bd 	beq.w	8004e24 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	f040 809e 	bne.w	8004df0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb4:	4b42      	ldr	r3, [pc, #264]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a41      	ldr	r2, [pc, #260]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7ff f93a 	bl	8003f38 <HAL_GetTick>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7ff f936 	bl	8003f38 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e10e      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cda:	4b39      	ldr	r3, [pc, #228]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce6:	4b36      	ldr	r3, [pc, #216]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cea:	4b37      	ldr	r3, [pc, #220]	@ (8004dc8 <HAL_RCC_OscConfig+0x774>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cf6:	0112      	lsls	r2, r2, #4
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	4931      	ldr	r1, [pc, #196]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	3b01      	subs	r3, #1
 8004d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	061b      	lsls	r3, r3, #24
 8004d2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d30:	4923      	ldr	r1, [pc, #140]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d36:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a21      	ldr	r2, [pc, #132]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d42:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d46:	4b21      	ldr	r3, [pc, #132]	@ (8004dcc <HAL_RCC_OscConfig+0x778>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d4e:	00d2      	lsls	r2, r2, #3
 8004d50:	491b      	ldr	r1, [pc, #108]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d56:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	f023 020c 	bic.w	r2, r3, #12
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	4917      	ldr	r1, [pc, #92]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d68:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	f023 0202 	bic.w	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d74:	4912      	ldr	r1, [pc, #72]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d7a:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	4a10      	ldr	r2, [pc, #64]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d86:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d92:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d9e:	4b08      	ldr	r3, [pc, #32]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4a07      	ldr	r2, [pc, #28]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004daa:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a04      	ldr	r2, [pc, #16]	@ (8004dc0 <HAL_RCC_OscConfig+0x76c>)
 8004db0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7ff f8bf 	bl	8003f38 <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dbc:	e011      	b.n	8004de2 <HAL_RCC_OscConfig+0x78e>
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	58024800 	.word	0x58024800
 8004dc8:	fffffc0c 	.word	0xfffffc0c
 8004dcc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7ff f8b2 	bl	8003f38 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e08a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004de2:	4b47      	ldr	r3, [pc, #284]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x77c>
 8004dee:	e082      	b.n	8004ef6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df0:	4b43      	ldr	r3, [pc, #268]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a42      	ldr	r2, [pc, #264]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7ff f89c 	bl	8003f38 <HAL_GetTick>
 8004e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7ff f898 	bl	8003f38 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e070      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e16:	4b3a      	ldr	r3, [pc, #232]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x7b0>
 8004e22:	e068      	b.n	8004ef6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e24:	4b36      	ldr	r3, [pc, #216]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e2a:	4b35      	ldr	r3, [pc, #212]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d031      	beq.n	8004e9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 0203 	and.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d12a      	bne.n	8004e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d122      	bne.n	8004e9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d11a      	bne.n	8004e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0a5b      	lsrs	r3, r3, #9
 8004e6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d111      	bne.n	8004e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	0c1b      	lsrs	r3, r3, #16
 8004e7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d108      	bne.n	8004e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	0e1b      	lsrs	r3, r3, #24
 8004e8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e02b      	b.n	8004ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea4:	08db      	lsrs	r3, r3, #3
 8004ea6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eaa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d01f      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004eb6:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	4a11      	ldr	r2, [pc, #68]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ec2:	f7ff f839 	bl	8003f38 <HAL_GetTick>
 8004ec6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ec8:	bf00      	nop
 8004eca:	f7ff f835 	bl	8003f38 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d0f9      	beq.n	8004eca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eda:	4b0a      	ldr	r3, [pc, #40]	@ (8004f04 <HAL_RCC_OscConfig+0x8b0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ee2:	00d2      	lsls	r2, r2, #3
 8004ee4:	4906      	ldr	r1, [pc, #24]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004eea:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4a04      	ldr	r2, [pc, #16]	@ (8004f00 <HAL_RCC_OscConfig+0x8ac>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3730      	adds	r7, #48	@ 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	58024400 	.word	0x58024400
 8004f04:	ffff0007 	.word	0xffff0007

08004f08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e19c      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d910      	bls.n	8004f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	4b87      	ldr	r3, [pc, #540]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 020f 	bic.w	r2, r3, #15
 8004f32:	4985      	ldr	r1, [pc, #532]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3a:	4b83      	ldr	r3, [pc, #524]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e184      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d010      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	4b7b      	ldr	r3, [pc, #492]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d908      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f68:	4b78      	ldr	r3, [pc, #480]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	4975      	ldr	r1, [pc, #468]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d010      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	4b70      	ldr	r3, [pc, #448]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d908      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f96:	4b6d      	ldr	r3, [pc, #436]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	496a      	ldr	r1, [pc, #424]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	4b64      	ldr	r3, [pc, #400]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d908      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fc4:	4b61      	ldr	r3, [pc, #388]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	495e      	ldr	r1, [pc, #376]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d010      	beq.n	8005004 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	4b59      	ldr	r3, [pc, #356]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d908      	bls.n	8005004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ff2:	4b56      	ldr	r3, [pc, #344]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	4953      	ldr	r1, [pc, #332]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8005000:	4313      	orrs	r3, r2
 8005002:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d010      	beq.n	8005032 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	4b4d      	ldr	r3, [pc, #308]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	429a      	cmp	r2, r3
 800501e:	d908      	bls.n	8005032 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005020:	4b4a      	ldr	r3, [pc, #296]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f023 020f 	bic.w	r2, r3, #15
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4947      	ldr	r1, [pc, #284]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 800502e:	4313      	orrs	r3, r2
 8005030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d055      	beq.n	80050ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800503e:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4940      	ldr	r1, [pc, #256]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 800504c:	4313      	orrs	r3, r2
 800504e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d107      	bne.n	8005068 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005058:	4b3c      	ldr	r3, [pc, #240]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d121      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0f6      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d107      	bne.n	8005080 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005070:	4b36      	ldr	r3, [pc, #216]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d115      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0ea      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005088:	4b30      	ldr	r3, [pc, #192]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0de      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005098:	4b2c      	ldr	r3, [pc, #176]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0d6      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050a8:	4b28      	ldr	r3, [pc, #160]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f023 0207 	bic.w	r2, r3, #7
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4925      	ldr	r1, [pc, #148]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ba:	f7fe ff3d 	bl	8003f38 <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c2:	f7fe ff39 	bl	8003f38 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0be      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d8:	4b1c      	ldr	r3, [pc, #112]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d1eb      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d010      	beq.n	8005118 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	4b14      	ldr	r3, [pc, #80]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	429a      	cmp	r2, r3
 8005104:	d208      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005106:	4b11      	ldr	r3, [pc, #68]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f023 020f 	bic.w	r2, r3, #15
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	490e      	ldr	r1, [pc, #56]	@ (800514c <HAL_RCC_ClockConfig+0x244>)
 8005114:	4313      	orrs	r3, r2
 8005116:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d214      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 020f 	bic.w	r2, r3, #15
 800512e:	4906      	ldr	r1, [pc, #24]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <HAL_RCC_ClockConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d005      	beq.n	8005150 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e086      	b.n	8005256 <HAL_RCC_ClockConfig+0x34e>
 8005148:	52002000 	.word	0x52002000
 800514c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d010      	beq.n	800517e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	4b3f      	ldr	r3, [pc, #252]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005168:	429a      	cmp	r2, r3
 800516a:	d208      	bcs.n	800517e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800516c:	4b3c      	ldr	r3, [pc, #240]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	4939      	ldr	r1, [pc, #228]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 800517a:	4313      	orrs	r3, r2
 800517c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d010      	beq.n	80051ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	4b34      	ldr	r3, [pc, #208]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005196:	429a      	cmp	r2, r3
 8005198:	d208      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800519a:	4b31      	ldr	r3, [pc, #196]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	492e      	ldr	r1, [pc, #184]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d010      	beq.n	80051da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d208      	bcs.n	80051da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051c8:	4b25      	ldr	r3, [pc, #148]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	4922      	ldr	r1, [pc, #136]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d010      	beq.n	8005208 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d208      	bcs.n	8005208 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	4917      	ldr	r1, [pc, #92]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 8005204:	4313      	orrs	r3, r2
 8005206:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005208:	f000 f834 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 800520c:	4602      	mov	r2, r0
 800520e:	4b14      	ldr	r3, [pc, #80]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	4912      	ldr	r1, [pc, #72]	@ (8005264 <HAL_RCC_ClockConfig+0x35c>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
 8005224:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005226:	4b0e      	ldr	r3, [pc, #56]	@ (8005260 <HAL_RCC_ClockConfig+0x358>)
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	4a0d      	ldr	r2, [pc, #52]	@ (8005264 <HAL_RCC_ClockConfig+0x35c>)
 8005230:	5cd3      	ldrb	r3, [r2, r3]
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <HAL_RCC_ClockConfig+0x360>)
 800523e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005240:	4a0a      	ldr	r2, [pc, #40]	@ (800526c <HAL_RCC_ClockConfig+0x364>)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005246:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <HAL_RCC_ClockConfig+0x368>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe fe2a 	bl	8003ea4 <HAL_InitTick>
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	58024400 	.word	0x58024400
 8005264:	08008b68 	.word	0x08008b68
 8005268:	24000004 	.word	0x24000004
 800526c:	24000000 	.word	0x24000000
 8005270:	24000034 	.word	0x24000034

08005274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005274:	b480      	push	{r7}
 8005276:	b089      	sub	sp, #36	@ 0x24
 8005278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800527a:	4bb3      	ldr	r3, [pc, #716]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005282:	2b18      	cmp	r3, #24
 8005284:	f200 8155 	bhi.w	8005532 <HAL_RCC_GetSysClockFreq+0x2be>
 8005288:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <HAL_RCC_GetSysClockFreq+0x1c>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052f5 	.word	0x080052f5
 8005294:	08005533 	.word	0x08005533
 8005298:	08005533 	.word	0x08005533
 800529c:	08005533 	.word	0x08005533
 80052a0:	08005533 	.word	0x08005533
 80052a4:	08005533 	.word	0x08005533
 80052a8:	08005533 	.word	0x08005533
 80052ac:	08005533 	.word	0x08005533
 80052b0:	0800531b 	.word	0x0800531b
 80052b4:	08005533 	.word	0x08005533
 80052b8:	08005533 	.word	0x08005533
 80052bc:	08005533 	.word	0x08005533
 80052c0:	08005533 	.word	0x08005533
 80052c4:	08005533 	.word	0x08005533
 80052c8:	08005533 	.word	0x08005533
 80052cc:	08005533 	.word	0x08005533
 80052d0:	08005321 	.word	0x08005321
 80052d4:	08005533 	.word	0x08005533
 80052d8:	08005533 	.word	0x08005533
 80052dc:	08005533 	.word	0x08005533
 80052e0:	08005533 	.word	0x08005533
 80052e4:	08005533 	.word	0x08005533
 80052e8:	08005533 	.word	0x08005533
 80052ec:	08005533 	.word	0x08005533
 80052f0:	08005327 	.word	0x08005327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f4:	4b94      	ldr	r3, [pc, #592]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005300:	4b91      	ldr	r3, [pc, #580]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	4a90      	ldr	r2, [pc, #576]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
 8005310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005312:	e111      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005314:	4b8d      	ldr	r3, [pc, #564]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005316:	61bb      	str	r3, [r7, #24]
      break;
 8005318:	e10e      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800531a:	4b8d      	ldr	r3, [pc, #564]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800531c:	61bb      	str	r3, [r7, #24]
      break;
 800531e:	e10b      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005320:	4b8c      	ldr	r3, [pc, #560]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005322:	61bb      	str	r3, [r7, #24]
      break;
 8005324:	e108      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005326:	4b88      	ldr	r3, [pc, #544]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005330:	4b85      	ldr	r3, [pc, #532]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800533a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800533c:	4b82      	ldr	r3, [pc, #520]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005346:	4b80      	ldr	r3, [pc, #512]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	08db      	lsrs	r3, r3, #3
 800534c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80e1 	beq.w	800552c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b02      	cmp	r3, #2
 800536e:	f000 8083 	beq.w	8005478 <HAL_RCC_GetSysClockFreq+0x204>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b02      	cmp	r3, #2
 8005376:	f200 80a1 	bhi.w	80054bc <HAL_RCC_GetSysClockFreq+0x248>
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x114>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d056      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005386:	e099      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005388:	4b6f      	ldr	r3, [pc, #444]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d02d      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005394:	4b6c      	ldr	r3, [pc, #432]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	08db      	lsrs	r3, r3, #3
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	4a6b      	ldr	r2, [pc, #428]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053be:	4b62      	ldr	r3, [pc, #392]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053ee:	e087      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2e8>
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b51      	ldr	r3, [pc, #324]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a02 	vldr	s12, [r7, #8]
 8005416:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005432:	e065      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005560 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005446:	4b40      	ldr	r3, [pc, #256]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a02 	vldr	s12, [r7, #8]
 800545a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005476:	e043      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005564 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548a:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549a:	ed97 6a02 	vldr	s12, [r7, #8]
 800549e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ba:	e021      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005560 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a02 	vldr	s12, [r7, #8]
 80054e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005500:	4b11      	ldr	r3, [pc, #68]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	0a5b      	lsrs	r3, r3, #9
 8005506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800550a:	3301      	adds	r3, #1
 800550c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005518:	edd7 6a07 	vldr	s13, [r7, #28]
 800551c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005524:	ee17 3a90 	vmov	r3, s15
 8005528:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800552a:	e005      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
      break;
 8005530:	e002      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005534:	61bb      	str	r3, [r7, #24]
      break;
 8005536:	bf00      	nop
  }

  return sysclockfreq;
 8005538:	69bb      	ldr	r3, [r7, #24]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3724      	adds	r7, #36	@ 0x24
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
 800554c:	03d09000 	.word	0x03d09000
 8005550:	003d0900 	.word	0x003d0900
 8005554:	007a1200 	.word	0x007a1200
 8005558:	46000000 	.word	0x46000000
 800555c:	4c742400 	.word	0x4c742400
 8005560:	4a742400 	.word	0x4a742400
 8005564:	4af42400 	.word	0x4af42400

08005568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800556e:	f7ff fe81 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8005572:	4602      	mov	r2, r0
 8005574:	4b10      	ldr	r3, [pc, #64]	@ (80055b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	490f      	ldr	r1, [pc, #60]	@ (80055bc <HAL_RCC_GetHCLKFreq+0x54>)
 8005580:	5ccb      	ldrb	r3, [r1, r3]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	4a09      	ldr	r2, [pc, #36]	@ (80055bc <HAL_RCC_GetHCLKFreq+0x54>)
 8005596:	5cd3      	ldrb	r3, [r2, r3]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	4a07      	ldr	r2, [pc, #28]	@ (80055c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80055a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055a6:	4a07      	ldr	r2, [pc, #28]	@ (80055c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055ac:	4b04      	ldr	r3, [pc, #16]	@ (80055c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	58024400 	.word	0x58024400
 80055bc:	08008b68 	.word	0x08008b68
 80055c0:	24000004 	.word	0x24000004
 80055c4:	24000000 	.word	0x24000000

080055c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055cc:	f7ff ffcc 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4904      	ldr	r1, [pc, #16]	@ (80055f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	58024400 	.word	0x58024400
 80055f0:	08008b68 	.word	0x08008b68

080055f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055f8:	f7ff ffb6 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 80055fc:	4602      	mov	r2, r0
 80055fe:	4b06      	ldr	r3, [pc, #24]	@ (8005618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	4904      	ldr	r1, [pc, #16]	@ (800561c <HAL_RCC_GetPCLK2Freq+0x28>)
 800560a:	5ccb      	ldrb	r3, [r1, r3]
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	58024400 	.word	0x58024400
 800561c:	08008b68 	.word	0x08008b68

08005620 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005624:	f7ff ffa0 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	091b      	lsrs	r3, r3, #4
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4904      	ldr	r1, [pc, #16]	@ (8005648 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	58024400 	.word	0x58024400
 8005648:	08008b68 	.word	0x08008b68

0800564c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	@ 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005654:	4ba1      	ldr	r3, [pc, #644]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800565e:	4b9f      	ldr	r3, [pc, #636]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005662:	0b1b      	lsrs	r3, r3, #12
 8005664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005668:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800566a:	4b9c      	ldr	r3, [pc, #624]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005676:	4b99      	ldr	r3, [pc, #612]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	08db      	lsrs	r3, r3, #3
 800567c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8111 	beq.w	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b02      	cmp	r3, #2
 800569e:	f000 8083 	beq.w	80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	f200 80a1 	bhi.w	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d056      	beq.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80056b6:	e099      	b.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b8:	4b88      	ldr	r3, [pc, #544]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02d      	beq.n	8005720 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056c4:	4b85      	ldr	r3, [pc, #532]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	08db      	lsrs	r3, r3, #3
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	4a84      	ldr	r2, [pc, #528]	@ (80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
 80056d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ee:	4b7b      	ldr	r3, [pc, #492]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005702:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800571e:	e087      	b.n	8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800572e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005732:	4b6a      	ldr	r3, [pc, #424]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	ed97 6a03 	vldr	s12, [r7, #12]
 8005746:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800574a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005762:	e065      	b.n	8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005776:	4b59      	ldr	r3, [pc, #356]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005786:	ed97 6a03 	vldr	s12, [r7, #12]
 800578a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800578e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800579a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057a6:	e043      	b.n	8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80057b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ba:	4b48      	ldr	r3, [pc, #288]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ea:	e021      	b.n	8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fe:	4b37      	ldr	r3, [pc, #220]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005812:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800582e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005830:	4b2a      	ldr	r3, [pc, #168]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005834:	0a5b      	lsrs	r3, r3, #9
 8005836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800584a:	edd7 6a07 	vldr	s13, [r7, #28]
 800584e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005856:	ee17 2a90 	vmov	r2, s15
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800585e:	4b1f      	ldr	r3, [pc, #124]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005862:	0c1b      	lsrs	r3, r3, #16
 8005864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005878:	edd7 6a07 	vldr	s13, [r7, #28]
 800587c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005884:	ee17 2a90 	vmov	r2, s15
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800588c:	4b13      	ldr	r3, [pc, #76]	@ (80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b2:	ee17 2a90 	vmov	r2, s15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058ba:	e008      	b.n	80058ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	609a      	str	r2, [r3, #8]
}
 80058ce:	bf00      	nop
 80058d0:	3724      	adds	r7, #36	@ 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	58024400 	.word	0x58024400
 80058e0:	03d09000 	.word	0x03d09000
 80058e4:	46000000 	.word	0x46000000
 80058e8:	4c742400 	.word	0x4c742400
 80058ec:	4a742400 	.word	0x4a742400
 80058f0:	4af42400 	.word	0x4af42400

080058f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b089      	sub	sp, #36	@ 0x24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005906:	4b9f      	ldr	r3, [pc, #636]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590a:	0d1b      	lsrs	r3, r3, #20
 800590c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005910:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005912:	4b9c      	ldr	r3, [pc, #624]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005916:	0a1b      	lsrs	r3, r3, #8
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800591e:	4b99      	ldr	r3, [pc, #612]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8111 	beq.w	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b02      	cmp	r3, #2
 8005946:	f000 8083 	beq.w	8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b02      	cmp	r3, #2
 800594e:	f200 80a1 	bhi.w	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d056      	beq.n	8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800595e:	e099      	b.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005960:	4b88      	ldr	r3, [pc, #544]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d02d      	beq.n	80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800596c:	4b85      	ldr	r3, [pc, #532]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	08db      	lsrs	r3, r3, #3
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	4a84      	ldr	r2, [pc, #528]	@ (8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
 800597c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b7b      	ldr	r3, [pc, #492]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059c6:	e087      	b.n	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059da:	4b6a      	ldr	r3, [pc, #424]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0a:	e065      	b.n	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	4b59      	ldr	r3, [pc, #356]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a4e:	e043      	b.n	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a62:	4b48      	ldr	r3, [pc, #288]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a92:	e021      	b.n	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa6:	4b37      	ldr	r3, [pc, #220]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ad6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	0a5b      	lsrs	r3, r3, #9
 8005ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afe:	ee17 2a90 	vmov	r2, s15
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005b06:	4b1f      	ldr	r3, [pc, #124]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	0c1b      	lsrs	r3, r3, #16
 8005b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2c:	ee17 2a90 	vmov	r2, s15
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005b34:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	0e1b      	lsrs	r3, r3, #24
 8005b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b5a:	ee17 2a90 	vmov	r2, s15
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b62:	e008      	b.n	8005b76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	609a      	str	r2, [r3, #8]
}
 8005b76:	bf00      	nop
 8005b78:	3724      	adds	r7, #36	@ 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	58024400 	.word	0x58024400
 8005b88:	03d09000 	.word	0x03d09000
 8005b8c:	46000000 	.word	0x46000000
 8005b90:	4c742400 	.word	0x4c742400
 8005b94:	4a742400 	.word	0x4a742400
 8005b98:	4af42400 	.word	0x4af42400

08005b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e042      	b.n	8005c34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f83b 	bl	8005c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2224      	movs	r2, #36	@ 0x24
 8005bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fe28 	bl	800683c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f8bd 	bl	8005d6c <UART_SetConfig>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e01b      	b.n	8005c34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fea7 	bl	8006980 <UART_CheckIdleState>
 8005c32:	4603      	mov	r3, r0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	@ 0x28
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d17b      	bne.n	8005d62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_UART_Transmit+0x26>
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e074      	b.n	8005d64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2221      	movs	r2, #33	@ 0x21
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c8a:	f7fe f955 	bl	8003f38 <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca8:	d108      	bne.n	8005cbc <HAL_UART_Transmit+0x6c>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e003      	b.n	8005cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cc4:	e030      	b.n	8005d28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 feff 	bl	8006ad4 <UART_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e03d      	b.n	8005d64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10b      	bne.n	8005d06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	3302      	adds	r3, #2
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	e007      	b.n	8005d16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1c8      	bne.n	8005cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2140      	movs	r1, #64	@ 0x40
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fec8 	bl	8006ad4 <UART_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e006      	b.n	8005d64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e000      	b.n	8005d64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d62:	2302      	movs	r3, #2
  }
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d70:	b092      	sub	sp, #72	@ 0x48
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4bbe      	ldr	r3, [pc, #760]	@ (8006094 <UART_SetConfig+0x328>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4ab3      	ldr	r2, [pc, #716]	@ (8006098 <UART_SetConfig+0x32c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	4baf      	ldr	r3, [pc, #700]	@ (800609c <UART_SetConfig+0x330>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005de8:	430b      	orrs	r3, r1
 8005dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df2:	f023 010f 	bic.w	r1, r3, #15
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4aa6      	ldr	r2, [pc, #664]	@ (80060a0 <UART_SetConfig+0x334>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d177      	bne.n	8005efc <UART_SetConfig+0x190>
 8005e0c:	4ba5      	ldr	r3, [pc, #660]	@ (80060a4 <UART_SetConfig+0x338>)
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e14:	2b28      	cmp	r3, #40	@ 0x28
 8005e16:	d86d      	bhi.n	8005ef4 <UART_SetConfig+0x188>
 8005e18:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <UART_SetConfig+0xb4>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005ec5 	.word	0x08005ec5
 8005e24:	08005ef5 	.word	0x08005ef5
 8005e28:	08005ef5 	.word	0x08005ef5
 8005e2c:	08005ef5 	.word	0x08005ef5
 8005e30:	08005ef5 	.word	0x08005ef5
 8005e34:	08005ef5 	.word	0x08005ef5
 8005e38:	08005ef5 	.word	0x08005ef5
 8005e3c:	08005ef5 	.word	0x08005ef5
 8005e40:	08005ecd 	.word	0x08005ecd
 8005e44:	08005ef5 	.word	0x08005ef5
 8005e48:	08005ef5 	.word	0x08005ef5
 8005e4c:	08005ef5 	.word	0x08005ef5
 8005e50:	08005ef5 	.word	0x08005ef5
 8005e54:	08005ef5 	.word	0x08005ef5
 8005e58:	08005ef5 	.word	0x08005ef5
 8005e5c:	08005ef5 	.word	0x08005ef5
 8005e60:	08005ed5 	.word	0x08005ed5
 8005e64:	08005ef5 	.word	0x08005ef5
 8005e68:	08005ef5 	.word	0x08005ef5
 8005e6c:	08005ef5 	.word	0x08005ef5
 8005e70:	08005ef5 	.word	0x08005ef5
 8005e74:	08005ef5 	.word	0x08005ef5
 8005e78:	08005ef5 	.word	0x08005ef5
 8005e7c:	08005ef5 	.word	0x08005ef5
 8005e80:	08005edd 	.word	0x08005edd
 8005e84:	08005ef5 	.word	0x08005ef5
 8005e88:	08005ef5 	.word	0x08005ef5
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005ef5 	.word	0x08005ef5
 8005e94:	08005ef5 	.word	0x08005ef5
 8005e98:	08005ef5 	.word	0x08005ef5
 8005e9c:	08005ef5 	.word	0x08005ef5
 8005ea0:	08005ee5 	.word	0x08005ee5
 8005ea4:	08005ef5 	.word	0x08005ef5
 8005ea8:	08005ef5 	.word	0x08005ef5
 8005eac:	08005ef5 	.word	0x08005ef5
 8005eb0:	08005ef5 	.word	0x08005ef5
 8005eb4:	08005ef5 	.word	0x08005ef5
 8005eb8:	08005ef5 	.word	0x08005ef5
 8005ebc:	08005ef5 	.word	0x08005ef5
 8005ec0:	08005eed 	.word	0x08005eed
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eca:	e222      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e21e      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eda:	e21a      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005edc:	2310      	movs	r3, #16
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e216      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005ee4:	2320      	movs	r3, #32
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e212      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005eec:	2340      	movs	r3, #64	@ 0x40
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e20e      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005ef4:	2380      	movs	r3, #128	@ 0x80
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e20a      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a69      	ldr	r2, [pc, #420]	@ (80060a8 <UART_SetConfig+0x33c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d130      	bne.n	8005f68 <UART_SetConfig+0x1fc>
 8005f06:	4b67      	ldr	r3, [pc, #412]	@ (80060a4 <UART_SetConfig+0x338>)
 8005f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d826      	bhi.n	8005f60 <UART_SetConfig+0x1f4>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <UART_SetConfig+0x1ac>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f31 	.word	0x08005f31
 8005f1c:	08005f39 	.word	0x08005f39
 8005f20:	08005f41 	.word	0x08005f41
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f36:	e1ec      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3e:	e1e8      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005f40:	2308      	movs	r3, #8
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f46:	e1e4      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4e:	e1e0      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005f50:	2320      	movs	r3, #32
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f56:	e1dc      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005f58:	2340      	movs	r3, #64	@ 0x40
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e1d8      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e1d4      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a4f      	ldr	r2, [pc, #316]	@ (80060ac <UART_SetConfig+0x340>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d130      	bne.n	8005fd4 <UART_SetConfig+0x268>
 8005f72:	4b4c      	ldr	r3, [pc, #304]	@ (80060a4 <UART_SetConfig+0x338>)
 8005f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d826      	bhi.n	8005fcc <UART_SetConfig+0x260>
 8005f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <UART_SetConfig+0x218>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005f9d 	.word	0x08005f9d
 8005f88:	08005fa5 	.word	0x08005fa5
 8005f8c:	08005fad 	.word	0x08005fad
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fc5 	.word	0x08005fc5
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa2:	e1b6      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005faa:	e1b2      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005fac:	2308      	movs	r3, #8
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb2:	e1ae      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fba:	e1aa      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc2:	e1a6      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005fc4:	2340      	movs	r3, #64	@ 0x40
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fca:	e1a2      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e19e      	b.n	8006312 <UART_SetConfig+0x5a6>
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a35      	ldr	r2, [pc, #212]	@ (80060b0 <UART_SetConfig+0x344>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d130      	bne.n	8006040 <UART_SetConfig+0x2d4>
 8005fde:	4b31      	ldr	r3, [pc, #196]	@ (80060a4 <UART_SetConfig+0x338>)
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d826      	bhi.n	8006038 <UART_SetConfig+0x2cc>
 8005fea:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff0 <UART_SetConfig+0x284>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006009 	.word	0x08006009
 8005ff4:	08006011 	.word	0x08006011
 8005ff8:	08006019 	.word	0x08006019
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006029 	.word	0x08006029
 8006004:	08006031 	.word	0x08006031
 8006008:	2300      	movs	r3, #0
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600e:	e180      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006010:	2304      	movs	r3, #4
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e17c      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006018:	2308      	movs	r3, #8
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e178      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006020:	2310      	movs	r3, #16
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e174      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006028:	2320      	movs	r3, #32
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602e:	e170      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006030:	2340      	movs	r3, #64	@ 0x40
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006036:	e16c      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603e:	e168      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1b      	ldr	r2, [pc, #108]	@ (80060b4 <UART_SetConfig+0x348>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d142      	bne.n	80060d0 <UART_SetConfig+0x364>
 800604a:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <UART_SetConfig+0x338>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	2b05      	cmp	r3, #5
 8006054:	d838      	bhi.n	80060c8 <UART_SetConfig+0x35c>
 8006056:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <UART_SetConfig+0x2f0>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006075 	.word	0x08006075
 8006060:	0800607d 	.word	0x0800607d
 8006064:	08006085 	.word	0x08006085
 8006068:	0800608d 	.word	0x0800608d
 800606c:	080060b9 	.word	0x080060b9
 8006070:	080060c1 	.word	0x080060c1
 8006074:	2300      	movs	r3, #0
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e14a      	b.n	8006312 <UART_SetConfig+0x5a6>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e146      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608a:	e142      	b.n	8006312 <UART_SetConfig+0x5a6>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006092:	e13e      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006094:	cfff69f3 	.word	0xcfff69f3
 8006098:	58000c00 	.word	0x58000c00
 800609c:	11fff4ff 	.word	0x11fff4ff
 80060a0:	40011000 	.word	0x40011000
 80060a4:	58024400 	.word	0x58024400
 80060a8:	40004400 	.word	0x40004400
 80060ac:	40004800 	.word	0x40004800
 80060b0:	40004c00 	.word	0x40004c00
 80060b4:	40005000 	.word	0x40005000
 80060b8:	2320      	movs	r3, #32
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e128      	b.n	8006312 <UART_SetConfig+0x5a6>
 80060c0:	2340      	movs	r3, #64	@ 0x40
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e124      	b.n	8006312 <UART_SetConfig+0x5a6>
 80060c8:	2380      	movs	r3, #128	@ 0x80
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e120      	b.n	8006312 <UART_SetConfig+0x5a6>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4acb      	ldr	r2, [pc, #812]	@ (8006404 <UART_SetConfig+0x698>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d176      	bne.n	80061c8 <UART_SetConfig+0x45c>
 80060da:	4bcb      	ldr	r3, [pc, #812]	@ (8006408 <UART_SetConfig+0x69c>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060e2:	2b28      	cmp	r3, #40	@ 0x28
 80060e4:	d86c      	bhi.n	80061c0 <UART_SetConfig+0x454>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <UART_SetConfig+0x380>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006191 	.word	0x08006191
 80060f0:	080061c1 	.word	0x080061c1
 80060f4:	080061c1 	.word	0x080061c1
 80060f8:	080061c1 	.word	0x080061c1
 80060fc:	080061c1 	.word	0x080061c1
 8006100:	080061c1 	.word	0x080061c1
 8006104:	080061c1 	.word	0x080061c1
 8006108:	080061c1 	.word	0x080061c1
 800610c:	08006199 	.word	0x08006199
 8006110:	080061c1 	.word	0x080061c1
 8006114:	080061c1 	.word	0x080061c1
 8006118:	080061c1 	.word	0x080061c1
 800611c:	080061c1 	.word	0x080061c1
 8006120:	080061c1 	.word	0x080061c1
 8006124:	080061c1 	.word	0x080061c1
 8006128:	080061c1 	.word	0x080061c1
 800612c:	080061a1 	.word	0x080061a1
 8006130:	080061c1 	.word	0x080061c1
 8006134:	080061c1 	.word	0x080061c1
 8006138:	080061c1 	.word	0x080061c1
 800613c:	080061c1 	.word	0x080061c1
 8006140:	080061c1 	.word	0x080061c1
 8006144:	080061c1 	.word	0x080061c1
 8006148:	080061c1 	.word	0x080061c1
 800614c:	080061a9 	.word	0x080061a9
 8006150:	080061c1 	.word	0x080061c1
 8006154:	080061c1 	.word	0x080061c1
 8006158:	080061c1 	.word	0x080061c1
 800615c:	080061c1 	.word	0x080061c1
 8006160:	080061c1 	.word	0x080061c1
 8006164:	080061c1 	.word	0x080061c1
 8006168:	080061c1 	.word	0x080061c1
 800616c:	080061b1 	.word	0x080061b1
 8006170:	080061c1 	.word	0x080061c1
 8006174:	080061c1 	.word	0x080061c1
 8006178:	080061c1 	.word	0x080061c1
 800617c:	080061c1 	.word	0x080061c1
 8006180:	080061c1 	.word	0x080061c1
 8006184:	080061c1 	.word	0x080061c1
 8006188:	080061c1 	.word	0x080061c1
 800618c:	080061b9 	.word	0x080061b9
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006196:	e0bc      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006198:	2304      	movs	r3, #4
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e0b8      	b.n	8006312 <UART_SetConfig+0x5a6>
 80061a0:	2308      	movs	r3, #8
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a6:	e0b4      	b.n	8006312 <UART_SetConfig+0x5a6>
 80061a8:	2310      	movs	r3, #16
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ae:	e0b0      	b.n	8006312 <UART_SetConfig+0x5a6>
 80061b0:	2320      	movs	r3, #32
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b6:	e0ac      	b.n	8006312 <UART_SetConfig+0x5a6>
 80061b8:	2340      	movs	r3, #64	@ 0x40
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061be:	e0a8      	b.n	8006312 <UART_SetConfig+0x5a6>
 80061c0:	2380      	movs	r3, #128	@ 0x80
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c6:	e0a4      	b.n	8006312 <UART_SetConfig+0x5a6>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a8f      	ldr	r2, [pc, #572]	@ (800640c <UART_SetConfig+0x6a0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d130      	bne.n	8006234 <UART_SetConfig+0x4c8>
 80061d2:	4b8d      	ldr	r3, [pc, #564]	@ (8006408 <UART_SetConfig+0x69c>)
 80061d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b05      	cmp	r3, #5
 80061dc:	d826      	bhi.n	800622c <UART_SetConfig+0x4c0>
 80061de:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <UART_SetConfig+0x478>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	080061fd 	.word	0x080061fd
 80061e8:	08006205 	.word	0x08006205
 80061ec:	0800620d 	.word	0x0800620d
 80061f0:	08006215 	.word	0x08006215
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	08006225 	.word	0x08006225
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006202:	e086      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006204:	2304      	movs	r3, #4
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620a:	e082      	b.n	8006312 <UART_SetConfig+0x5a6>
 800620c:	2308      	movs	r3, #8
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006212:	e07e      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006214:	2310      	movs	r3, #16
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621a:	e07a      	b.n	8006312 <UART_SetConfig+0x5a6>
 800621c:	2320      	movs	r3, #32
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006222:	e076      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006224:	2340      	movs	r3, #64	@ 0x40
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622a:	e072      	b.n	8006312 <UART_SetConfig+0x5a6>
 800622c:	2380      	movs	r3, #128	@ 0x80
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006232:	e06e      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a75      	ldr	r2, [pc, #468]	@ (8006410 <UART_SetConfig+0x6a4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d130      	bne.n	80062a0 <UART_SetConfig+0x534>
 800623e:	4b72      	ldr	r3, [pc, #456]	@ (8006408 <UART_SetConfig+0x69c>)
 8006240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b05      	cmp	r3, #5
 8006248:	d826      	bhi.n	8006298 <UART_SetConfig+0x52c>
 800624a:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <UART_SetConfig+0x4e4>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006269 	.word	0x08006269
 8006254:	08006271 	.word	0x08006271
 8006258:	08006279 	.word	0x08006279
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	2300      	movs	r3, #0
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626e:	e050      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006270:	2304      	movs	r3, #4
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006276:	e04c      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006278:	2308      	movs	r3, #8
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627e:	e048      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006286:	e044      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006288:	2320      	movs	r3, #32
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628e:	e040      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006290:	2340      	movs	r3, #64	@ 0x40
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006296:	e03c      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006298:	2380      	movs	r3, #128	@ 0x80
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629e:	e038      	b.n	8006312 <UART_SetConfig+0x5a6>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5b      	ldr	r2, [pc, #364]	@ (8006414 <UART_SetConfig+0x6a8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d130      	bne.n	800630c <UART_SetConfig+0x5a0>
 80062aa:	4b57      	ldr	r3, [pc, #348]	@ (8006408 <UART_SetConfig+0x69c>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	2b05      	cmp	r3, #5
 80062b4:	d826      	bhi.n	8006304 <UART_SetConfig+0x598>
 80062b6:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <UART_SetConfig+0x550>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062d5 	.word	0x080062d5
 80062c0:	080062dd 	.word	0x080062dd
 80062c4:	080062e5 	.word	0x080062e5
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062fd 	.word	0x080062fd
 80062d4:	2302      	movs	r3, #2
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062da:	e01a      	b.n	8006312 <UART_SetConfig+0x5a6>
 80062dc:	2304      	movs	r3, #4
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e2:	e016      	b.n	8006312 <UART_SetConfig+0x5a6>
 80062e4:	2308      	movs	r3, #8
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ea:	e012      	b.n	8006312 <UART_SetConfig+0x5a6>
 80062ec:	2310      	movs	r3, #16
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f2:	e00e      	b.n	8006312 <UART_SetConfig+0x5a6>
 80062f4:	2320      	movs	r3, #32
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fa:	e00a      	b.n	8006312 <UART_SetConfig+0x5a6>
 80062fc:	2340      	movs	r3, #64	@ 0x40
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006302:	e006      	b.n	8006312 <UART_SetConfig+0x5a6>
 8006304:	2380      	movs	r3, #128	@ 0x80
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630a:	e002      	b.n	8006312 <UART_SetConfig+0x5a6>
 800630c:	2380      	movs	r3, #128	@ 0x80
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3f      	ldr	r2, [pc, #252]	@ (8006414 <UART_SetConfig+0x6a8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	f040 80f8 	bne.w	800650e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800631e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006322:	2b20      	cmp	r3, #32
 8006324:	dc46      	bgt.n	80063b4 <UART_SetConfig+0x648>
 8006326:	2b02      	cmp	r3, #2
 8006328:	f2c0 8082 	blt.w	8006430 <UART_SetConfig+0x6c4>
 800632c:	3b02      	subs	r3, #2
 800632e:	2b1e      	cmp	r3, #30
 8006330:	d87e      	bhi.n	8006430 <UART_SetConfig+0x6c4>
 8006332:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <UART_SetConfig+0x5cc>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	080063bb 	.word	0x080063bb
 800633c:	08006431 	.word	0x08006431
 8006340:	080063c3 	.word	0x080063c3
 8006344:	08006431 	.word	0x08006431
 8006348:	08006431 	.word	0x08006431
 800634c:	08006431 	.word	0x08006431
 8006350:	080063d3 	.word	0x080063d3
 8006354:	08006431 	.word	0x08006431
 8006358:	08006431 	.word	0x08006431
 800635c:	08006431 	.word	0x08006431
 8006360:	08006431 	.word	0x08006431
 8006364:	08006431 	.word	0x08006431
 8006368:	08006431 	.word	0x08006431
 800636c:	08006431 	.word	0x08006431
 8006370:	080063e3 	.word	0x080063e3
 8006374:	08006431 	.word	0x08006431
 8006378:	08006431 	.word	0x08006431
 800637c:	08006431 	.word	0x08006431
 8006380:	08006431 	.word	0x08006431
 8006384:	08006431 	.word	0x08006431
 8006388:	08006431 	.word	0x08006431
 800638c:	08006431 	.word	0x08006431
 8006390:	08006431 	.word	0x08006431
 8006394:	08006431 	.word	0x08006431
 8006398:	08006431 	.word	0x08006431
 800639c:	08006431 	.word	0x08006431
 80063a0:	08006431 	.word	0x08006431
 80063a4:	08006431 	.word	0x08006431
 80063a8:	08006431 	.word	0x08006431
 80063ac:	08006431 	.word	0x08006431
 80063b0:	08006423 	.word	0x08006423
 80063b4:	2b40      	cmp	r3, #64	@ 0x40
 80063b6:	d037      	beq.n	8006428 <UART_SetConfig+0x6bc>
 80063b8:	e03a      	b.n	8006430 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063ba:	f7ff f931 	bl	8005620 <HAL_RCCEx_GetD3PCLK1Freq>
 80063be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063c0:	e03c      	b.n	800643c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f940 	bl	800564c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d0:	e034      	b.n	800643c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063d2:	f107 0318 	add.w	r3, r7, #24
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fa8c 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e0:	e02c      	b.n	800643c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063e2:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <UART_SetConfig+0x69c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063ee:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <UART_SetConfig+0x69c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	08db      	lsrs	r3, r3, #3
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	4a07      	ldr	r2, [pc, #28]	@ (8006418 <UART_SetConfig+0x6ac>)
 80063fa:	fa22 f303 	lsr.w	r3, r2, r3
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006400:	e01c      	b.n	800643c <UART_SetConfig+0x6d0>
 8006402:	bf00      	nop
 8006404:	40011400 	.word	0x40011400
 8006408:	58024400 	.word	0x58024400
 800640c:	40007800 	.word	0x40007800
 8006410:	40007c00 	.word	0x40007c00
 8006414:	58000c00 	.word	0x58000c00
 8006418:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800641c:	4b9d      	ldr	r3, [pc, #628]	@ (8006694 <UART_SetConfig+0x928>)
 800641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006420:	e00c      	b.n	800643c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006422:	4b9d      	ldr	r3, [pc, #628]	@ (8006698 <UART_SetConfig+0x92c>)
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006426:	e009      	b.n	800643c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642e:	e005      	b.n	800643c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800643a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800643c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 81de 	beq.w	8006800 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	4a94      	ldr	r2, [pc, #592]	@ (800669c <UART_SetConfig+0x930>)
 800644a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644e:	461a      	mov	r2, r3
 8006450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006452:	fbb3 f3f2 	udiv	r3, r3, r2
 8006456:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4413      	add	r3, r2
 8006462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006464:	429a      	cmp	r2, r3
 8006466:	d305      	bcc.n	8006474 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006470:	429a      	cmp	r2, r3
 8006472:	d903      	bls.n	800647c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800647a:	e1c1      	b.n	8006800 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647e:	2200      	movs	r2, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	60fa      	str	r2, [r7, #12]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	4a84      	ldr	r2, [pc, #528]	@ (800669c <UART_SetConfig+0x930>)
 800648a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648e:	b29b      	uxth	r3, r3
 8006490:	2200      	movs	r2, #0
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800649e:	f7f9 ff77 	bl	8000390 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	020b      	lsls	r3, r1, #8
 80064b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064b8:	0202      	lsls	r2, r0, #8
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	6849      	ldr	r1, [r1, #4]
 80064be:	0849      	lsrs	r1, r1, #1
 80064c0:	2000      	movs	r0, #0
 80064c2:	460c      	mov	r4, r1
 80064c4:	4605      	mov	r5, r0
 80064c6:	eb12 0804 	adds.w	r8, r2, r4
 80064ca:	eb43 0905 	adc.w	r9, r3, r5
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	469a      	mov	sl, r3
 80064d6:	4693      	mov	fp, r2
 80064d8:	4652      	mov	r2, sl
 80064da:	465b      	mov	r3, fp
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	f7f9 ff56 	bl	8000390 <__aeabi_uldivmod>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4613      	mov	r3, r2
 80064ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f2:	d308      	bcc.n	8006506 <UART_SetConfig+0x79a>
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064fa:	d204      	bcs.n	8006506 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	e17c      	b.n	8006800 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800650c:	e178      	b.n	8006800 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006516:	f040 80c5 	bne.w	80066a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800651a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800651e:	2b20      	cmp	r3, #32
 8006520:	dc48      	bgt.n	80065b4 <UART_SetConfig+0x848>
 8006522:	2b00      	cmp	r3, #0
 8006524:	db7b      	blt.n	800661e <UART_SetConfig+0x8b2>
 8006526:	2b20      	cmp	r3, #32
 8006528:	d879      	bhi.n	800661e <UART_SetConfig+0x8b2>
 800652a:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <UART_SetConfig+0x7c4>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	080065bb 	.word	0x080065bb
 8006534:	080065c3 	.word	0x080065c3
 8006538:	0800661f 	.word	0x0800661f
 800653c:	0800661f 	.word	0x0800661f
 8006540:	080065cb 	.word	0x080065cb
 8006544:	0800661f 	.word	0x0800661f
 8006548:	0800661f 	.word	0x0800661f
 800654c:	0800661f 	.word	0x0800661f
 8006550:	080065db 	.word	0x080065db
 8006554:	0800661f 	.word	0x0800661f
 8006558:	0800661f 	.word	0x0800661f
 800655c:	0800661f 	.word	0x0800661f
 8006560:	0800661f 	.word	0x0800661f
 8006564:	0800661f 	.word	0x0800661f
 8006568:	0800661f 	.word	0x0800661f
 800656c:	0800661f 	.word	0x0800661f
 8006570:	080065eb 	.word	0x080065eb
 8006574:	0800661f 	.word	0x0800661f
 8006578:	0800661f 	.word	0x0800661f
 800657c:	0800661f 	.word	0x0800661f
 8006580:	0800661f 	.word	0x0800661f
 8006584:	0800661f 	.word	0x0800661f
 8006588:	0800661f 	.word	0x0800661f
 800658c:	0800661f 	.word	0x0800661f
 8006590:	0800661f 	.word	0x0800661f
 8006594:	0800661f 	.word	0x0800661f
 8006598:	0800661f 	.word	0x0800661f
 800659c:	0800661f 	.word	0x0800661f
 80065a0:	0800661f 	.word	0x0800661f
 80065a4:	0800661f 	.word	0x0800661f
 80065a8:	0800661f 	.word	0x0800661f
 80065ac:	0800661f 	.word	0x0800661f
 80065b0:	08006611 	.word	0x08006611
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	d02e      	beq.n	8006616 <UART_SetConfig+0x8aa>
 80065b8:	e031      	b.n	800661e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ba:	f7ff f805 	bl	80055c8 <HAL_RCC_GetPCLK1Freq>
 80065be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065c0:	e033      	b.n	800662a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c2:	f7ff f817 	bl	80055f4 <HAL_RCC_GetPCLK2Freq>
 80065c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065c8:	e02f      	b.n	800662a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff f83c 	bl	800564c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d8:	e027      	b.n	800662a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065da:	f107 0318 	add.w	r3, r7, #24
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff f988 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e8:	e01f      	b.n	800662a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ea:	4b2d      	ldr	r3, [pc, #180]	@ (80066a0 <UART_SetConfig+0x934>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065f6:	4b2a      	ldr	r3, [pc, #168]	@ (80066a0 <UART_SetConfig+0x934>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	4a24      	ldr	r2, [pc, #144]	@ (8006694 <UART_SetConfig+0x928>)
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006608:	e00f      	b.n	800662a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800660a:	4b22      	ldr	r3, [pc, #136]	@ (8006694 <UART_SetConfig+0x928>)
 800660c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660e:	e00c      	b.n	800662a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006610:	4b21      	ldr	r3, [pc, #132]	@ (8006698 <UART_SetConfig+0x92c>)
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006614:	e009      	b.n	800662a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e005      	b.n	800662a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800662a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80e7 	beq.w	8006800 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	4a19      	ldr	r2, [pc, #100]	@ (800669c <UART_SetConfig+0x930>)
 8006638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663c:	461a      	mov	r2, r3
 800663e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006640:	fbb3 f3f2 	udiv	r3, r3, r2
 8006644:	005a      	lsls	r2, r3, #1
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	441a      	add	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	fbb2 f3f3 	udiv	r3, r2, r3
 8006656:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	2b0f      	cmp	r3, #15
 800665c:	d916      	bls.n	800668c <UART_SetConfig+0x920>
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d212      	bcs.n	800668c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	b29b      	uxth	r3, r3
 800666a:	f023 030f 	bic.w	r3, r3, #15
 800666e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	b29a      	uxth	r2, r3
 800667c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800667e:	4313      	orrs	r3, r2
 8006680:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006688:	60da      	str	r2, [r3, #12]
 800668a:	e0b9      	b.n	8006800 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006692:	e0b5      	b.n	8006800 <UART_SetConfig+0xa94>
 8006694:	03d09000 	.word	0x03d09000
 8006698:	003d0900 	.word	0x003d0900
 800669c:	08008b84 	.word	0x08008b84
 80066a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	dc49      	bgt.n	8006740 <UART_SetConfig+0x9d4>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	db7c      	blt.n	80067aa <UART_SetConfig+0xa3e>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d87a      	bhi.n	80067aa <UART_SetConfig+0xa3e>
 80066b4:	a201      	add	r2, pc, #4	@ (adr r2, 80066bc <UART_SetConfig+0x950>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	08006747 	.word	0x08006747
 80066c0:	0800674f 	.word	0x0800674f
 80066c4:	080067ab 	.word	0x080067ab
 80066c8:	080067ab 	.word	0x080067ab
 80066cc:	08006757 	.word	0x08006757
 80066d0:	080067ab 	.word	0x080067ab
 80066d4:	080067ab 	.word	0x080067ab
 80066d8:	080067ab 	.word	0x080067ab
 80066dc:	08006767 	.word	0x08006767
 80066e0:	080067ab 	.word	0x080067ab
 80066e4:	080067ab 	.word	0x080067ab
 80066e8:	080067ab 	.word	0x080067ab
 80066ec:	080067ab 	.word	0x080067ab
 80066f0:	080067ab 	.word	0x080067ab
 80066f4:	080067ab 	.word	0x080067ab
 80066f8:	080067ab 	.word	0x080067ab
 80066fc:	08006777 	.word	0x08006777
 8006700:	080067ab 	.word	0x080067ab
 8006704:	080067ab 	.word	0x080067ab
 8006708:	080067ab 	.word	0x080067ab
 800670c:	080067ab 	.word	0x080067ab
 8006710:	080067ab 	.word	0x080067ab
 8006714:	080067ab 	.word	0x080067ab
 8006718:	080067ab 	.word	0x080067ab
 800671c:	080067ab 	.word	0x080067ab
 8006720:	080067ab 	.word	0x080067ab
 8006724:	080067ab 	.word	0x080067ab
 8006728:	080067ab 	.word	0x080067ab
 800672c:	080067ab 	.word	0x080067ab
 8006730:	080067ab 	.word	0x080067ab
 8006734:	080067ab 	.word	0x080067ab
 8006738:	080067ab 	.word	0x080067ab
 800673c:	0800679d 	.word	0x0800679d
 8006740:	2b40      	cmp	r3, #64	@ 0x40
 8006742:	d02e      	beq.n	80067a2 <UART_SetConfig+0xa36>
 8006744:	e031      	b.n	80067aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006746:	f7fe ff3f 	bl	80055c8 <HAL_RCC_GetPCLK1Freq>
 800674a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800674c:	e033      	b.n	80067b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674e:	f7fe ff51 	bl	80055f4 <HAL_RCC_GetPCLK2Freq>
 8006752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006754:	e02f      	b.n	80067b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe ff76 	bl	800564c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006764:	e027      	b.n	80067b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006766:	f107 0318 	add.w	r3, r7, #24
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff f8c2 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006774:	e01f      	b.n	80067b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006776:	4b2d      	ldr	r3, [pc, #180]	@ (800682c <UART_SetConfig+0xac0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006782:	4b2a      	ldr	r3, [pc, #168]	@ (800682c <UART_SetConfig+0xac0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	08db      	lsrs	r3, r3, #3
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	4a28      	ldr	r2, [pc, #160]	@ (8006830 <UART_SetConfig+0xac4>)
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006794:	e00f      	b.n	80067b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006796:	4b26      	ldr	r3, [pc, #152]	@ (8006830 <UART_SetConfig+0xac4>)
 8006798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679a:	e00c      	b.n	80067b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800679c:	4b25      	ldr	r3, [pc, #148]	@ (8006834 <UART_SetConfig+0xac8>)
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a0:	e009      	b.n	80067b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a8:	e005      	b.n	80067b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067b4:	bf00      	nop
    }

    if (pclk != 0U)
 80067b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d021      	beq.n	8006800 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006838 <UART_SetConfig+0xacc>)
 80067c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	441a      	add	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	fbb2 f3f3 	udiv	r3, r2, r3
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d909      	bls.n	80067fa <UART_SetConfig+0xa8e>
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ec:	d205      	bcs.n	80067fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60da      	str	r2, [r3, #12]
 80067f8:	e002      	b.n	8006800 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2201      	movs	r2, #1
 8006804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2201      	movs	r2, #1
 800680c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2200      	movs	r2, #0
 8006814:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2200      	movs	r2, #0
 800681a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800681c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006820:	4618      	mov	r0, r3
 8006822:	3748      	adds	r7, #72	@ 0x48
 8006824:	46bd      	mov	sp, r7
 8006826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682a:	bf00      	nop
 800682c:	58024400 	.word	0x58024400
 8006830:	03d09000 	.word	0x03d09000
 8006834:	003d0900 	.word	0x003d0900
 8006838:	08008b84 	.word	0x08008b84

0800683c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01a      	beq.n	8006952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800693a:	d10a      	bne.n	8006952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  }
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b098      	sub	sp, #96	@ 0x60
 8006984:	af02      	add	r7, sp, #8
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006990:	f7fd fad2 	bl	8003f38 <HAL_GetTick>
 8006994:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d12f      	bne.n	8006a04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ac:	2200      	movs	r2, #0
 80069ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f88e 	bl	8006ad4 <UART_WaitOnFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80069de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e6      	bne.n	80069be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e063      	b.n	8006acc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d149      	bne.n	8006aa6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f857 	bl	8006ad4 <UART_WaitOnFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d03c      	beq.n	8006aa6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	623b      	str	r3, [r7, #32]
   return(result);
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e6      	bne.n	8006a2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a7e:	61fa      	str	r2, [r7, #28]
 8006a80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	69b9      	ldr	r1, [r7, #24]
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e012      	b.n	8006acc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3758      	adds	r7, #88	@ 0x58
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae4:	e04f      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d04b      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fd fa23 	bl	8003f38 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e04e      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d037      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b80      	cmp	r3, #128	@ 0x80
 8006b1a:	d034      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b40      	cmp	r3, #64	@ 0x40
 8006b20:	d031      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d110      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2208      	movs	r2, #8
 8006b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f839 	bl	8006bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2208      	movs	r2, #8
 8006b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e029      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b60:	d111      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f81f 	bl	8006bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e00f      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d0a0      	beq.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b095      	sub	sp, #84	@ 0x54
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e6      	bne.n	8006bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8006c78 <UART_EndRxTransfer+0xc8>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d118      	bne.n	8006c58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f023 0310 	bic.w	r3, r3, #16
 8006c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6979      	ldr	r1, [r7, #20]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	613b      	str	r3, [r7, #16]
   return(result);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e6      	bne.n	8006c26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c6c:	bf00      	nop
 8006c6e:	3754      	adds	r7, #84	@ 0x54
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	effffffe 	.word	0xeffffffe

08006c7c <_ZdlPvj>:
 8006c7c:	f000 b934 	b.w	8006ee8 <_ZdlPv>

08006c80 <_Znwj>:
 8006c80:	2801      	cmp	r0, #1
 8006c82:	bf38      	it	cc
 8006c84:	2001      	movcc	r0, #1
 8006c86:	b510      	push	{r4, lr}
 8006c88:	4604      	mov	r4, r0
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fc5c 	bl	8007548 <malloc>
 8006c90:	b100      	cbz	r0, 8006c94 <_Znwj+0x14>
 8006c92:	bd10      	pop	{r4, pc}
 8006c94:	f000 f92a 	bl	8006eec <_ZSt15get_new_handlerv>
 8006c98:	b908      	cbnz	r0, 8006c9e <_Znwj+0x1e>
 8006c9a:	f000 fc4d 	bl	8007538 <abort>
 8006c9e:	4780      	blx	r0
 8006ca0:	e7f3      	b.n	8006c8a <_Znwj+0xa>

08006ca2 <_ZSt17__throw_bad_allocv>:
 8006ca2:	b508      	push	{r3, lr}
 8006ca4:	f000 fc48 	bl	8007538 <abort>

08006ca8 <_ZSt28__throw_bad_array_new_lengthv>:
 8006ca8:	b508      	push	{r3, lr}
 8006caa:	f000 fc45 	bl	8007538 <abort>

08006cae <_ZSt19__throw_logic_errorPKc>:
 8006cae:	b508      	push	{r3, lr}
 8006cb0:	f000 fc42 	bl	8007538 <abort>

08006cb4 <_ZSt20__throw_length_errorPKc>:
 8006cb4:	b508      	push	{r3, lr}
 8006cb6:	f000 fc3f 	bl	8007538 <abort>

08006cba <_ZSt21__throw_runtime_errorPKc>:
 8006cba:	b508      	push	{r3, lr}
 8006cbc:	f000 fc3c 	bl	8007538 <abort>

08006cc0 <_ZNSt12_GLOBAL__N_117__libc_getentropyEPv>:
 8006cc0:	b507      	push	{r0, r1, r2, lr}
 8006cc2:	2104      	movs	r1, #4
 8006cc4:	eb0d 0001 	add.w	r0, sp, r1
 8006cc8:	f001 f9f0 	bl	80080ac <getentropy>
 8006ccc:	b110      	cbz	r0, 8006cd4 <_ZNSt12_GLOBAL__N_117__libc_getentropyEPv+0x14>
 8006cce:	4803      	ldr	r0, [pc, #12]	@ (8006cdc <_ZNSt12_GLOBAL__N_117__libc_getentropyEPv+0x1c>)
 8006cd0:	f7ff fff3 	bl	8006cba <_ZSt21__throw_runtime_errorPKc>
 8006cd4:	9801      	ldr	r0, [sp, #4]
 8006cd6:	b003      	add	sp, #12
 8006cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cdc:	08008b9c 	.word	0x08008b9c

08006ce0 <_ZNSt12_GLOBAL__N_117__libc_arc4randomEPv>:
 8006ce0:	f000 bfb6 	b.w	8007c50 <arc4random>

08006ce4 <_ZNSt13random_device7_M_finiEv>:
 8006ce4:	4770      	bx	lr
	...

08006ce8 <_ZNSt13random_device9_M_getvalEv>:
 8006ce8:	6843      	ldr	r3, [r0, #4]
 8006cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cec:	4604      	mov	r4, r0
 8006cee:	b123      	cbz	r3, 8006cfa <_ZNSt13random_device9_M_getvalEv+0x12>
 8006cf0:	6800      	ldr	r0, [r0, #0]
 8006cf2:	b002      	add	sp, #8
 8006cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cf8:	4718      	bx	r3
 8006cfa:	2504      	movs	r5, #4
 8006cfc:	eb0d 0605 	add.w	r6, sp, r5
 8006d00:	68a0      	ldr	r0, [r4, #8]
 8006d02:	462a      	mov	r2, r5
 8006d04:	4631      	mov	r1, r6
 8006d06:	f001 f9d9 	bl	80080bc <read>
 8006d0a:	1e03      	subs	r3, r0, #0
 8006d0c:	dd05      	ble.n	8006d1a <_ZNSt13random_device9_M_getvalEv+0x32>
 8006d0e:	1aed      	subs	r5, r5, r3
 8006d10:	441e      	add	r6, r3
 8006d12:	d1f5      	bne.n	8006d00 <_ZNSt13random_device9_M_getvalEv+0x18>
 8006d14:	9801      	ldr	r0, [sp, #4]
 8006d16:	b002      	add	sp, #8
 8006d18:	bd70      	pop	{r4, r5, r6, pc}
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	d002      	beq.n	8006d24 <_ZNSt13random_device9_M_getvalEv+0x3c>
 8006d1e:	4804      	ldr	r0, [pc, #16]	@ (8006d30 <_ZNSt13random_device9_M_getvalEv+0x48>)
 8006d20:	f7ff ffcb 	bl	8006cba <_ZSt21__throw_runtime_errorPKc>
 8006d24:	f001 f992 	bl	800804c <__errno>
 8006d28:	6803      	ldr	r3, [r0, #0]
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d0e8      	beq.n	8006d00 <_ZNSt13random_device9_M_getvalEv+0x18>
 8006d2e:	e7f6      	b.n	8006d1e <_ZNSt13random_device9_M_getvalEv+0x36>
 8006d30:	08008bbd 	.word	0x08008bbd

08006d34 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	6846      	ldr	r6, [r0, #4]
 8006d38:	4604      	mov	r4, r0
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	460d      	mov	r5, r1
 8006d3e:	f7f9 fb1f 	bl	8000380 <strlen>
 8006d42:	4286      	cmp	r6, r0
 8006d44:	d109      	bne.n	8006d5a <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x26>
 8006d46:	b156      	cbz	r6, 8006d5e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x2a>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f001 f8ca 	bl	8007ee6 <memcmp>
 8006d52:	fab0 f080 	clz	r0, r0
 8006d56:	0940      	lsrs	r0, r0, #5
 8006d58:	bd70      	pop	{r4, r5, r6, pc}
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e7fc      	b.n	8006d58 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x24>
 8006d5e:	2001      	movs	r0, #1
 8006d60:	e7fa      	b.n	8006d58 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x24>
	...

08006d64 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8006d64:	2300      	movs	r3, #0
 8006d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d68:	e9c0 3300 	strd	r3, r3, [r0]
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d72:	4604      	mov	r4, r0
 8006d74:	6083      	str	r3, [r0, #8]
 8006d76:	4910      	ldr	r1, [pc, #64]	@ (8006db8 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f7ff ffdb 	bl	8006d34 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006d7e:	b9a0      	cbnz	r0, 8006daa <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
 8006d80:	490e      	ldr	r1, [pc, #56]	@ (8006dbc <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 8006d82:	4628      	mov	r0, r5
 8006d84:	f7ff ffd6 	bl	8006d34 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006d88:	b938      	cbnz	r0, 8006d9a <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8006d8a:	490d      	ldr	r1, [pc, #52]	@ (8006dc0 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f7ff ffd1 	bl	8006d34 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006d92:	b950      	cbnz	r0, 8006daa <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
 8006d94:	480b      	ldr	r0, [pc, #44]	@ (8006dc4 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 8006d96:	f7ff ff90 	bl	8006cba <_ZSt21__throw_runtime_errorPKc>
 8006d9a:	2104      	movs	r1, #4
 8006d9c:	eb0d 0001 	add.w	r0, sp, r1
 8006da0:	f001 f984 	bl	80080ac <getentropy>
 8006da4:	b128      	cbz	r0, 8006db2 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
 8006da6:	4808      	ldr	r0, [pc, #32]	@ (8006dc8 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>)
 8006da8:	e7f5      	b.n	8006d96 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
 8006daa:	4b08      	ldr	r3, [pc, #32]	@ (8006dcc <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>)
 8006dac:	6063      	str	r3, [r4, #4]
 8006dae:	b003      	add	sp, #12
 8006db0:	bd30      	pop	{r4, r5, pc}
 8006db2:	4b07      	ldr	r3, [pc, #28]	@ (8006dd0 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>)
 8006db4:	e7fa      	b.n	8006dac <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
 8006db6:	bf00      	nop
 8006db8:	08008bdd 	.word	0x08008bdd
 8006dbc:	08008be5 	.word	0x08008be5
 8006dc0:	08008bf0 	.word	0x08008bf0
 8006dc4:	08008bfb 	.word	0x08008bfb
 8006dc8:	08008c3f 	.word	0x08008c3f
 8006dcc:	08006ce1 	.word	0x08006ce1
 8006dd0:	08006cc1 	.word	0x08006cc1

08006dd4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8006dd4:	b10a      	cbz	r2, 8006dda <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006dd6:	f001 b97b 	b.w	80080d0 <memcpy>
 8006dda:	4770      	bx	lr

08006ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 8006ddc:	1e08      	subs	r0, r1, #0
 8006dde:	b508      	push	{r3, lr}
 8006de0:	da01      	bge.n	8006de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 8006de2:	f7ff ff5e 	bl	8006ca2 <_ZSt17__throw_bad_allocv>
 8006de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006dea:	f7ff bf49 	b.w	8006c80 <_Znwj>

08006dee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8006dee:	f850 3b08 	ldr.w	r3, [r0], #8
 8006df2:	1a1b      	subs	r3, r3, r0
 8006df4:	4258      	negs	r0, r3
 8006df6:	4158      	adcs	r0, r3
 8006df8:	4770      	bx	lr
	...

08006dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006dfc:	680b      	ldr	r3, [r1, #0]
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e02:	b510      	push	{r4, lr}
 8006e04:	d302      	bcc.n	8006e0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006e06:	480b      	ldr	r0, [pc, #44]	@ (8006e34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8006e08:	f7ff ff54 	bl	8006cb4 <_ZSt20__throw_length_errorPKc>
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d90b      	bls.n	8006e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006e10:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006e14:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8006e18:	d206      	bcs.n	8006e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006e1a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8006e1e:	bf2a      	itet	cs
 8006e20:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8006e24:	600c      	strcc	r4, [r1, #0]
 8006e26:	600b      	strcs	r3, [r1, #0]
 8006e28:	6809      	ldr	r1, [r1, #0]
 8006e2a:	3101      	adds	r1, #1
 8006e2c:	f7ff ffd6 	bl	8006ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	08008c86 	.word	0x08008c86

08006e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 8006e38:	6800      	ldr	r0, [r0, #0]
 8006e3a:	f000 b855 	b.w	8006ee8 <_ZdlPv>

08006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006e3e:	b510      	push	{r4, lr}
 8006e40:	4604      	mov	r4, r0
 8006e42:	f7ff ffd4 	bl	8006dee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006e46:	b918      	cbnz	r0, 8006e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 8006e48:	68a1      	ldr	r1, [r4, #8]
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f7ff fff4 	bl	8006e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8006e50:	bd10      	pop	{r4, pc}

08006e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006e52:	2a01      	cmp	r2, #1
 8006e54:	b410      	push	{r4}
 8006e56:	d104      	bne.n	8006e62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8006e58:	780a      	ldrb	r2, [r1, #0]
 8006e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e5e:	7002      	strb	r2, [r0, #0]
 8006e60:	4770      	bx	lr
 8006e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e66:	f7ff bfb5 	b.w	8006dd4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08006e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8006e6a:	b508      	push	{r3, lr}
 8006e6c:	1a52      	subs	r2, r2, r1
 8006e6e:	f7ff fff0 	bl	8006e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006e72:	bd08      	pop	{r3, pc}

08006e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	f7ff ffe1 	bl	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	bd10      	pop	{r4, pc}

08006e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006e80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e82:	1a53      	subs	r3, r2, r1
 8006e84:	2b0f      	cmp	r3, #15
 8006e86:	4604      	mov	r4, r0
 8006e88:	460d      	mov	r5, r1
 8006e8a:	4616      	mov	r6, r2
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	d906      	bls.n	8006e9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8006e90:	2200      	movs	r2, #0
 8006e92:	a901      	add	r1, sp, #4
 8006e94:	f7ff ffb2 	bl	8006dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	6020      	str	r0, [r4, #0]
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	4632      	mov	r2, r6
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	6820      	ldr	r0, [r4, #0]
 8006ea4:	f7ff ffe1 	bl	8006e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006ea8:	9b01      	ldr	r3, [sp, #4]
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	6063      	str	r3, [r4, #4]
 8006eae:	2100      	movs	r1, #0
 8006eb0:	54d1      	strb	r1, [r2, r3]
 8006eb2:	b002      	add	sp, #8
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	f100 0308 	add.w	r3, r0, #8
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	b911      	cbnz	r1, 8006ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8006ec6:	4807      	ldr	r0, [pc, #28]	@ (8006ee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8006ec8:	f7ff fef1 	bl	8006cae <_ZSt19__throw_logic_errorPKc>
 8006ecc:	4608      	mov	r0, r1
 8006ece:	f7f9 fa57 	bl	8000380 <strlen>
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	182a      	adds	r2, r5, r0
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4620      	mov	r0, r4
 8006edc:	f7ff ffd0 	bl	8006e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	08008c9e 	.word	0x08008c9e

08006ee8 <_ZdlPv>:
 8006ee8:	f000 bb36 	b.w	8007558 <free>

08006eec <_ZSt15get_new_handlerv>:
 8006eec:	4b02      	ldr	r3, [pc, #8]	@ (8006ef8 <_ZSt15get_new_handlerv+0xc>)
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	f3bf 8f5b 	dmb	ish
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	24001520 	.word	0x24001520
 8006efc:	00000000 	.word	0x00000000

08006f00 <sqrt>:
 8006f00:	b508      	push	{r3, lr}
 8006f02:	ed2d 8b04 	vpush	{d8-d9}
 8006f06:	eeb0 8b40 	vmov.f64	d8, d0
 8006f0a:	f000 fa9d 	bl	8007448 <__ieee754_sqrt>
 8006f0e:	eeb4 8b48 	vcmp.f64	d8, d8
 8006f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f16:	d60c      	bvs.n	8006f32 <sqrt+0x32>
 8006f18:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8006f38 <sqrt+0x38>
 8006f1c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8006f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f24:	d505      	bpl.n	8006f32 <sqrt+0x32>
 8006f26:	f001 f891 	bl	800804c <__errno>
 8006f2a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8006f2e:	2321      	movs	r3, #33	@ 0x21
 8006f30:	6003      	str	r3, [r0, #0]
 8006f32:	ecbd 8b04 	vpop	{d8-d9}
 8006f36:	bd08      	pop	{r3, pc}
	...

08006f40 <checkint>:
 8006f40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f44:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	b570      	push	{r4, r5, r6, lr}
 8006f4c:	dd2a      	ble.n	8006fa4 <checkint+0x64>
 8006f4e:	f240 4333 	movw	r3, #1075	@ 0x433
 8006f52:	429a      	cmp	r2, r3
 8006f54:	dc24      	bgt.n	8006fa0 <checkint+0x60>
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	f1a3 0620 	sub.w	r6, r3, #32
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f60:	fa02 f403 	lsl.w	r4, r2, r3
 8006f64:	fa02 f606 	lsl.w	r6, r2, r6
 8006f68:	f1c3 0520 	rsb	r5, r3, #32
 8006f6c:	fa22 f505 	lsr.w	r5, r2, r5
 8006f70:	4334      	orrs	r4, r6
 8006f72:	432c      	orrs	r4, r5
 8006f74:	409a      	lsls	r2, r3
 8006f76:	ea20 0202 	bic.w	r2, r0, r2
 8006f7a:	ea21 0404 	bic.w	r4, r1, r4
 8006f7e:	4322      	orrs	r2, r4
 8006f80:	f1a3 0420 	sub.w	r4, r3, #32
 8006f84:	f1c3 0220 	rsb	r2, r3, #32
 8006f88:	d10c      	bne.n	8006fa4 <checkint+0x64>
 8006f8a:	40d8      	lsrs	r0, r3
 8006f8c:	fa01 f302 	lsl.w	r3, r1, r2
 8006f90:	4318      	orrs	r0, r3
 8006f92:	40e1      	lsrs	r1, r4
 8006f94:	4308      	orrs	r0, r1
 8006f96:	f000 0001 	and.w	r0, r0, #1
 8006f9a:	f1d0 0002 	rsbs	r0, r0, #2
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	2002      	movs	r0, #2
 8006fa2:	e7fc      	b.n	8006f9e <checkint+0x5e>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e7fa      	b.n	8006f9e <checkint+0x5e>

08006fa8 <pow>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	ee10 4a90 	vmov	r4, s1
 8006fb0:	ed2d 8b0a 	vpush	{d8-d12}
 8006fb4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8006fb8:	ee11 aa90 	vmov	sl, s3
 8006fbc:	f108 32ff 	add.w	r2, r8, #4294967295
 8006fc0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	ee10 5a10 	vmov	r5, s0
 8006fca:	ee11 0a10 	vmov	r0, s2
 8006fce:	b087      	sub	sp, #28
 8006fd0:	46c4      	mov	ip, r8
 8006fd2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8006fd6:	d806      	bhi.n	8006fe6 <pow+0x3e>
 8006fd8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8006fdc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8006fe0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fe2:	f240 8157 	bls.w	8007294 <pow+0x2ec>
 8006fe6:	1802      	adds	r2, r0, r0
 8006fe8:	eb4a 010a 	adc.w	r1, sl, sl
 8006fec:	f06f 0b01 	mvn.w	fp, #1
 8006ff0:	1e57      	subs	r7, r2, #1
 8006ff2:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006ff6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8006ffa:	45bb      	cmp	fp, r7
 8006ffc:	eb7e 0303 	sbcs.w	r3, lr, r3
 8007000:	d242      	bcs.n	8007088 <pow+0xe0>
 8007002:	ea52 0301 	orrs.w	r3, r2, r1
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	d10c      	bne.n	8007026 <pow+0x7e>
 800700c:	196d      	adds	r5, r5, r5
 800700e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8007012:	4164      	adcs	r4, r4
 8007014:	42ab      	cmp	r3, r5
 8007016:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800701a:	41a3      	sbcs	r3, r4
 800701c:	f0c0 808f 	bcc.w	800713e <pow+0x196>
 8007020:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007024:	e02b      	b.n	800707e <pow+0xd6>
 8007026:	4ed4      	ldr	r6, [pc, #848]	@ (8007378 <pow+0x3d0>)
 8007028:	42b4      	cmp	r4, r6
 800702a:	bf08      	it	eq
 800702c:	429d      	cmpeq	r5, r3
 800702e:	d109      	bne.n	8007044 <pow+0x9c>
 8007030:	1800      	adds	r0, r0, r0
 8007032:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8007036:	eb4a 0a0a 	adc.w	sl, sl, sl
 800703a:	4283      	cmp	r3, r0
 800703c:	4bcf      	ldr	r3, [pc, #828]	@ (800737c <pow+0x3d4>)
 800703e:	eb73 030a 	sbcs.w	r3, r3, sl
 8007042:	e7eb      	b.n	800701c <pow+0x74>
 8007044:	196d      	adds	r5, r5, r5
 8007046:	48ce      	ldr	r0, [pc, #824]	@ (8007380 <pow+0x3d8>)
 8007048:	4164      	adcs	r4, r4
 800704a:	42ab      	cmp	r3, r5
 800704c:	eb70 0604 	sbcs.w	r6, r0, r4
 8007050:	d375      	bcc.n	800713e <pow+0x196>
 8007052:	4281      	cmp	r1, r0
 8007054:	bf08      	it	eq
 8007056:	429a      	cmpeq	r2, r3
 8007058:	d171      	bne.n	800713e <pow+0x196>
 800705a:	4aca      	ldr	r2, [pc, #808]	@ (8007384 <pow+0x3dc>)
 800705c:	4294      	cmp	r4, r2
 800705e:	bf08      	it	eq
 8007060:	429d      	cmpeq	r5, r3
 8007062:	d0dd      	beq.n	8007020 <pow+0x78>
 8007064:	4294      	cmp	r4, r2
 8007066:	ea6f 0a0a 	mvn.w	sl, sl
 800706a:	bf34      	ite	cc
 800706c:	2400      	movcc	r4, #0
 800706e:	2401      	movcs	r4, #1
 8007070:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8007074:	4554      	cmp	r4, sl
 8007076:	f040 81dc 	bne.w	8007432 <pow+0x48a>
 800707a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800707e:	b007      	add	sp, #28
 8007080:	ecbd 8b0a 	vpop	{d8-d12}
 8007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007088:	196f      	adds	r7, r5, r5
 800708a:	eb44 0904 	adc.w	r9, r4, r4
 800708e:	1e7a      	subs	r2, r7, #1
 8007090:	f169 0300 	sbc.w	r3, r9, #0
 8007094:	4593      	cmp	fp, r2
 8007096:	eb7e 0303 	sbcs.w	r3, lr, r3
 800709a:	d225      	bcs.n	80070e8 <pow+0x140>
 800709c:	ee20 0b00 	vmul.f64	d0, d0, d0
 80070a0:	2c00      	cmp	r4, #0
 80070a2:	da13      	bge.n	80070cc <pow+0x124>
 80070a4:	4651      	mov	r1, sl
 80070a6:	f7ff ff4b 	bl	8006f40 <checkint>
 80070aa:	2801      	cmp	r0, #1
 80070ac:	d10e      	bne.n	80070cc <pow+0x124>
 80070ae:	eeb1 0b40 	vneg.f64	d0, d0
 80070b2:	ea57 0909 	orrs.w	r9, r7, r9
 80070b6:	d10b      	bne.n	80070d0 <pow+0x128>
 80070b8:	f1ba 0f00 	cmp.w	sl, #0
 80070bc:	dadf      	bge.n	800707e <pow+0xd6>
 80070be:	b007      	add	sp, #28
 80070c0:	ecbd 8b0a 	vpop	{d8-d12}
 80070c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c8:	f000 b9f2 	b.w	80074b0 <__math_divzero>
 80070cc:	2000      	movs	r0, #0
 80070ce:	e7f0      	b.n	80070b2 <pow+0x10a>
 80070d0:	f1ba 0f00 	cmp.w	sl, #0
 80070d4:	dad3      	bge.n	800707e <pow+0xd6>
 80070d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80070da:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80070de:	ed8d 7b00 	vstr	d7, [sp]
 80070e2:	ed9d 0b00 	vldr	d0, [sp]
 80070e6:	e7ca      	b.n	800707e <pow+0xd6>
 80070e8:	2c00      	cmp	r4, #0
 80070ea:	da2b      	bge.n	8007144 <pow+0x19c>
 80070ec:	4651      	mov	r1, sl
 80070ee:	f7ff ff27 	bl	8006f40 <checkint>
 80070f2:	b930      	cbnz	r0, 8007102 <pow+0x15a>
 80070f4:	b007      	add	sp, #28
 80070f6:	ecbd 8b0a 	vpop	{d8-d12}
 80070fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fe:	f000 b9ef 	b.w	80074e0 <__math_invalid>
 8007102:	1e41      	subs	r1, r0, #1
 8007104:	4248      	negs	r0, r1
 8007106:	4148      	adcs	r0, r1
 8007108:	0480      	lsls	r0, r0, #18
 800710a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800710e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8007112:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8007116:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800711a:	2b7f      	cmp	r3, #127	@ 0x7f
 800711c:	d92d      	bls.n	800717a <pow+0x1d2>
 800711e:	4b96      	ldr	r3, [pc, #600]	@ (8007378 <pow+0x3d0>)
 8007120:	2000      	movs	r0, #0
 8007122:	429c      	cmp	r4, r3
 8007124:	bf08      	it	eq
 8007126:	4285      	cmpeq	r5, r0
 8007128:	f43f af7a 	beq.w	8007020 <pow+0x78>
 800712c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8007130:	428a      	cmp	r2, r1
 8007132:	d80c      	bhi.n	800714e <pow+0x1a6>
 8007134:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007138:	42a8      	cmp	r0, r5
 800713a:	41a3      	sbcs	r3, r4
 800713c:	d204      	bcs.n	8007148 <pow+0x1a0>
 800713e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8007142:	e79c      	b.n	800707e <pow+0xd6>
 8007144:	2000      	movs	r0, #0
 8007146:	e7e4      	b.n	8007112 <pow+0x16a>
 8007148:	ee30 0b41 	vsub.f64	d0, d0, d1
 800714c:	e797      	b.n	800707e <pow+0xd6>
 800714e:	2d01      	cmp	r5, #1
 8007150:	eb74 0303 	sbcs.w	r3, r4, r3
 8007154:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007158:	bf34      	ite	cc
 800715a:	2301      	movcc	r3, #1
 800715c:	2300      	movcs	r3, #0
 800715e:	4296      	cmp	r6, r2
 8007160:	bf8c      	ite	hi
 8007162:	2600      	movhi	r6, #0
 8007164:	2601      	movls	r6, #1
 8007166:	42b3      	cmp	r3, r6
 8007168:	f000 809c 	beq.w	80072a4 <pow+0x2fc>
 800716c:	b007      	add	sp, #28
 800716e:	ecbd 8b0a 	vpop	{d8-d12}
 8007172:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007176:	f000 b993 	b.w	80074a0 <__math_oflow>
 800717a:	f1bc 0f00 	cmp.w	ip, #0
 800717e:	d10a      	bne.n	8007196 <pow+0x1ee>
 8007180:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8007368 <pow+0x3c0>
 8007184:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007188:	ec53 2b17 	vmov	r2, r3, d7
 800718c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8007190:	4615      	mov	r5, r2
 8007192:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8007196:	4a7c      	ldr	r2, [pc, #496]	@ (8007388 <pow+0x3e0>)
 8007198:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800719c:	4422      	add	r2, r4
 800719e:	1513      	asrs	r3, r2, #20
 80071a0:	ee03 3a10 	vmov	s6, r3
 80071a4:	4b79      	ldr	r3, [pc, #484]	@ (800738c <pow+0x3e4>)
 80071a6:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80071aa:	f36f 0213 	bfc	r2, #0, #20
 80071ae:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80071b2:	1aa7      	subs	r7, r4, r2
 80071b4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80071b8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 80071bc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 80071c0:	1e2e      	subs	r6, r5, #0
 80071c2:	ec47 6b14 	vmov	d4, r6, r7
 80071c6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 80071ca:	eea4 6b05 	vfma.f64	d6, d4, d5
 80071ce:	ed93 5b00 	vldr	d5, [r3]
 80071d2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80071d6:	eea3 2b05 	vfma.f64	d2, d3, d5
 80071da:	ed93 5b02 	vldr	d5, [r3, #8]
 80071de:	ee36 4b02 	vadd.f64	d4, d6, d2
 80071e2:	ee32 2b44 	vsub.f64	d2, d2, d4
 80071e6:	eea3 7b05 	vfma.f64	d7, d3, d5
 80071ea:	ed93 5b04 	vldr	d5, [r3, #16]
 80071ee:	ee32 2b06 	vadd.f64	d2, d2, d6
 80071f2:	ee37 7b02 	vadd.f64	d7, d7, d2
 80071f6:	ee26 5b05 	vmul.f64	d5, d6, d5
 80071fa:	ee26 0b05 	vmul.f64	d0, d6, d5
 80071fe:	ee34 8b00 	vadd.f64	d8, d4, d0
 8007202:	eeb0 9b40 	vmov.f64	d9, d0
 8007206:	ee34 4b48 	vsub.f64	d4, d4, d8
 800720a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800720e:	ee34 ab00 	vadd.f64	d10, d4, d0
 8007212:	ed93 5b06 	vldr	d5, [r3, #24]
 8007216:	ee26 bb00 	vmul.f64	d11, d6, d0
 800721a:	ee37 7b09 	vadd.f64	d7, d7, d9
 800721e:	ed93 4b08 	vldr	d4, [r3, #32]
 8007222:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8007226:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800722a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800722e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8007232:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8007236:	eea6 4b03 	vfma.f64	d4, d6, d3
 800723a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800723e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8007242:	eea0 4b03 	vfma.f64	d4, d0, d3
 8007246:	eea0 5b04 	vfma.f64	d5, d0, d4
 800724a:	eeab 7b05 	vfma.f64	d7, d11, d5
 800724e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8007252:	ee21 6b04 	vmul.f64	d6, d1, d4
 8007256:	ee16 3a90 	vmov	r3, s13
 800725a:	eeb0 5b46 	vmov.f64	d5, d6
 800725e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8007262:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8007266:	18b2      	adds	r2, r6, r2
 8007268:	2a3e      	cmp	r2, #62	@ 0x3e
 800726a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800726e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8007272:	ee38 8b07 	vadd.f64	d8, d8, d7
 8007276:	eea1 5b08 	vfma.f64	d5, d1, d8
 800727a:	d91b      	bls.n	80072b4 <pow+0x30c>
 800727c:	2a00      	cmp	r2, #0
 800727e:	da0b      	bge.n	8007298 <pow+0x2f0>
 8007280:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007284:	ee36 0b00 	vadd.f64	d0, d6, d0
 8007288:	2800      	cmp	r0, #0
 800728a:	f43f aef8 	beq.w	800707e <pow+0xd6>
 800728e:	eeb1 0b40 	vneg.f64	d0, d0
 8007292:	e6f4      	b.n	800707e <pow+0xd6>
 8007294:	2000      	movs	r0, #0
 8007296:	e77e      	b.n	8007196 <pow+0x1ee>
 8007298:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800729c:	d909      	bls.n	80072b2 <pow+0x30a>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f6bf af64 	bge.w	800716c <pow+0x1c4>
 80072a4:	b007      	add	sp, #28
 80072a6:	ecbd 8b0a 	vpop	{d8-d12}
 80072aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ae:	f000 b8ef 	b.w	8007490 <__math_uflow>
 80072b2:	2600      	movs	r6, #0
 80072b4:	4936      	ldr	r1, [pc, #216]	@ (8007390 <pow+0x3e8>)
 80072b6:	ed91 4b02 	vldr	d4, [r1, #8]
 80072ba:	ed91 3b00 	vldr	d3, [r1]
 80072be:	eeb0 7b44 	vmov.f64	d7, d4
 80072c2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80072c6:	ee17 5a10 	vmov	r5, s14
 80072ca:	ee37 7b44 	vsub.f64	d7, d7, d4
 80072ce:	ed91 4b04 	vldr	d4, [r1, #16]
 80072d2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 80072d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 80072da:	ed91 4b06 	vldr	d4, [r1, #24]
 80072de:	18dc      	adds	r4, r3, r3
 80072e0:	f104 030f 	add.w	r3, r4, #15
 80072e4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80072e8:	eea7 6b04 	vfma.f64	d6, d7, d4
 80072ec:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 80072f0:	ee35 5b06 	vadd.f64	d5, d5, d6
 80072f4:	ee25 6b05 	vmul.f64	d6, d5, d5
 80072f8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 80072fc:	ed91 4b08 	vldr	d4, [r1, #32]
 8007300:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007304:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8007308:	eea5 4b03 	vfma.f64	d4, d5, d3
 800730c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8007310:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007314:	ee26 6b06 	vmul.f64	d6, d6, d6
 8007318:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800731c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8007320:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8007324:	eea5 4b03 	vfma.f64	d4, d5, d3
 8007328:	1940      	adds	r0, r0, r5
 800732a:	2700      	movs	r7, #0
 800732c:	eb17 020c 	adds.w	r2, r7, ip
 8007330:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8007334:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007338:	2e00      	cmp	r6, #0
 800733a:	d175      	bne.n	8007428 <pow+0x480>
 800733c:	42bd      	cmp	r5, r7
 800733e:	db29      	blt.n	8007394 <pow+0x3ec>
 8007340:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8007344:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8007348:	4610      	mov	r0, r2
 800734a:	ec41 0b10 	vmov	d0, r0, r1
 800734e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8007352:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8007370 <pow+0x3c8>
 8007356:	ee20 0b07 	vmul.f64	d0, d0, d7
 800735a:	b007      	add	sp, #28
 800735c:	ecbd 8b0a 	vpop	{d8-d12}
 8007360:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	f000 b8d4 	b.w	8007510 <__math_check_oflow>
 8007368:	00000000 	.word	0x00000000
 800736c:	43300000 	.word	0x43300000
 8007370:	00000000 	.word	0x00000000
 8007374:	7f000000 	.word	0x7f000000
 8007378:	3ff00000 	.word	0x3ff00000
 800737c:	fff00000 	.word	0xfff00000
 8007380:	ffe00000 	.word	0xffe00000
 8007384:	7fe00000 	.word	0x7fe00000
 8007388:	c0196aab 	.word	0xc0196aab
 800738c:	08008d08 	.word	0x08008d08
 8007390:	08009d50 	.word	0x08009d50
 8007394:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8007398:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800739c:	4610      	mov	r0, r2
 800739e:	ec41 0b15 	vmov	d5, r0, r1
 80073a2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80073a6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80073aa:	ee35 7b06 	vadd.f64	d7, d5, d6
 80073ae:	eeb0 4bc7 	vabs.f64	d4, d7
 80073b2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80073b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ba:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8007438 <pow+0x490>
 80073be:	d52a      	bpl.n	8007416 <pow+0x46e>
 80073c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80073c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80073c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073cc:	ee35 5b06 	vadd.f64	d5, d5, d6
 80073d0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 80073d4:	bf58      	it	pl
 80073d6:	eeb0 4b43 	vmovpl.f64	d4, d3
 80073da:	ee37 3b04 	vadd.f64	d3, d7, d4
 80073de:	ee34 6b43 	vsub.f64	d6, d4, d3
 80073e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80073e6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80073ea:	ee36 6b03 	vadd.f64	d6, d6, d3
 80073ee:	ee36 7b44 	vsub.f64	d7, d6, d4
 80073f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fa:	d104      	bne.n	8007406 <pow+0x45e>
 80073fc:	4632      	mov	r2, r6
 80073fe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8007402:	ec43 2b17 	vmov	d7, r2, r3
 8007406:	ed8d 0b02 	vstr	d0, [sp, #8]
 800740a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800740e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8007412:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007416:	ee27 0b00 	vmul.f64	d0, d7, d0
 800741a:	b007      	add	sp, #28
 800741c:	ecbd 8b0a 	vpop	{d8-d12}
 8007420:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	f000 b86b 	b.w	80074fe <__math_check_uflow>
 8007428:	ec43 2b10 	vmov	d0, r2, r3
 800742c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8007430:	e625      	b.n	800707e <pow+0xd6>
 8007432:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8007440 <pow+0x498>
 8007436:	e622      	b.n	800707e <pow+0xd6>
 8007438:	00000000 	.word	0x00000000
 800743c:	00100000 	.word	0x00100000
	...

08007448 <__ieee754_sqrt>:
 8007448:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800744c:	4770      	bx	lr

0800744e <with_errno>:
 800744e:	b510      	push	{r4, lr}
 8007450:	ed2d 8b02 	vpush	{d8}
 8007454:	eeb0 8b40 	vmov.f64	d8, d0
 8007458:	4604      	mov	r4, r0
 800745a:	f000 fdf7 	bl	800804c <__errno>
 800745e:	eeb0 0b48 	vmov.f64	d0, d8
 8007462:	ecbd 8b02 	vpop	{d8}
 8007466:	6004      	str	r4, [r0, #0]
 8007468:	bd10      	pop	{r4, pc}

0800746a <xflow>:
 800746a:	b082      	sub	sp, #8
 800746c:	b158      	cbz	r0, 8007486 <xflow+0x1c>
 800746e:	eeb1 7b40 	vneg.f64	d7, d0
 8007472:	ed8d 7b00 	vstr	d7, [sp]
 8007476:	ed9d 7b00 	vldr	d7, [sp]
 800747a:	2022      	movs	r0, #34	@ 0x22
 800747c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007480:	b002      	add	sp, #8
 8007482:	f7ff bfe4 	b.w	800744e <with_errno>
 8007486:	eeb0 7b40 	vmov.f64	d7, d0
 800748a:	e7f2      	b.n	8007472 <xflow+0x8>
 800748c:	0000      	movs	r0, r0
	...

08007490 <__math_uflow>:
 8007490:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007498 <__math_uflow+0x8>
 8007494:	f7ff bfe9 	b.w	800746a <xflow>
 8007498:	00000000 	.word	0x00000000
 800749c:	10000000 	.word	0x10000000

080074a0 <__math_oflow>:
 80074a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80074a8 <__math_oflow+0x8>
 80074a4:	f7ff bfe1 	b.w	800746a <xflow>
 80074a8:	00000000 	.word	0x00000000
 80074ac:	70000000 	.word	0x70000000

080074b0 <__math_divzero>:
 80074b0:	b082      	sub	sp, #8
 80074b2:	2800      	cmp	r0, #0
 80074b4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80074b8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80074bc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80074c0:	ed8d 7b00 	vstr	d7, [sp]
 80074c4:	ed9d 0b00 	vldr	d0, [sp]
 80074c8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80074d8 <__math_divzero+0x28>
 80074cc:	2022      	movs	r0, #34	@ 0x22
 80074ce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80074d2:	b002      	add	sp, #8
 80074d4:	f7ff bfbb 	b.w	800744e <with_errno>
	...

080074e0 <__math_invalid>:
 80074e0:	eeb0 7b40 	vmov.f64	d7, d0
 80074e4:	eeb4 7b47 	vcmp.f64	d7, d7
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	ee30 6b40 	vsub.f64	d6, d0, d0
 80074f0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80074f4:	d602      	bvs.n	80074fc <__math_invalid+0x1c>
 80074f6:	2021      	movs	r0, #33	@ 0x21
 80074f8:	f7ff bfa9 	b.w	800744e <with_errno>
 80074fc:	4770      	bx	lr

080074fe <__math_check_uflow>:
 80074fe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007506:	d102      	bne.n	800750e <__math_check_uflow+0x10>
 8007508:	2022      	movs	r0, #34	@ 0x22
 800750a:	f7ff bfa0 	b.w	800744e <with_errno>
 800750e:	4770      	bx	lr

08007510 <__math_check_oflow>:
 8007510:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8007530 <__math_check_oflow+0x20>
 8007514:	eeb0 7bc0 	vabs.f64	d7, d0
 8007518:	eeb4 7b46 	vcmp.f64	d7, d6
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	dd02      	ble.n	8007528 <__math_check_oflow+0x18>
 8007522:	2022      	movs	r0, #34	@ 0x22
 8007524:	f7ff bf93 	b.w	800744e <with_errno>
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w
 8007530:	ffffffff 	.word	0xffffffff
 8007534:	7fefffff 	.word	0x7fefffff

08007538 <abort>:
 8007538:	b508      	push	{r3, lr}
 800753a:	2006      	movs	r0, #6
 800753c:	f000 fd14 	bl	8007f68 <raise>
 8007540:	2001      	movs	r0, #1
 8007542:	f7f9 fa53 	bl	80009ec <_exit>
	...

08007548 <malloc>:
 8007548:	4b02      	ldr	r3, [pc, #8]	@ (8007554 <malloc+0xc>)
 800754a:	4601      	mov	r1, r0
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	f000 b82d 	b.w	80075ac <_malloc_r>
 8007552:	bf00      	nop
 8007554:	24000048 	.word	0x24000048

08007558 <free>:
 8007558:	4b02      	ldr	r3, [pc, #8]	@ (8007564 <free+0xc>)
 800755a:	4601      	mov	r1, r0
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	f000 bdc5 	b.w	80080ec <_free_r>
 8007562:	bf00      	nop
 8007564:	24000048 	.word	0x24000048

08007568 <sbrk_aligned>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4e0f      	ldr	r6, [pc, #60]	@ (80075a8 <sbrk_aligned+0x40>)
 800756c:	460c      	mov	r4, r1
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	4605      	mov	r5, r0
 8007572:	b911      	cbnz	r1, 800757a <sbrk_aligned+0x12>
 8007574:	f000 fd48 	bl	8008008 <_sbrk_r>
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 fd43 	bl	8008008 <_sbrk_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d103      	bne.n	800758e <sbrk_aligned+0x26>
 8007586:	f04f 34ff 	mov.w	r4, #4294967295
 800758a:	4620      	mov	r0, r4
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d0f8      	beq.n	800758a <sbrk_aligned+0x22>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fd34 	bl	8008008 <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d1f2      	bne.n	800758a <sbrk_aligned+0x22>
 80075a4:	e7ef      	b.n	8007586 <sbrk_aligned+0x1e>
 80075a6:	bf00      	nop
 80075a8:	24001524 	.word	0x24001524

080075ac <_malloc_r>:
 80075ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b0:	1ccd      	adds	r5, r1, #3
 80075b2:	f025 0503 	bic.w	r5, r5, #3
 80075b6:	3508      	adds	r5, #8
 80075b8:	2d0c      	cmp	r5, #12
 80075ba:	bf38      	it	cc
 80075bc:	250c      	movcc	r5, #12
 80075be:	2d00      	cmp	r5, #0
 80075c0:	4606      	mov	r6, r0
 80075c2:	db01      	blt.n	80075c8 <_malloc_r+0x1c>
 80075c4:	42a9      	cmp	r1, r5
 80075c6:	d904      	bls.n	80075d2 <_malloc_r+0x26>
 80075c8:	230c      	movs	r3, #12
 80075ca:	6033      	str	r3, [r6, #0]
 80075cc:	2000      	movs	r0, #0
 80075ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076a8 <_malloc_r+0xfc>
 80075d6:	f000 f869 	bl	80076ac <__malloc_lock>
 80075da:	f8d8 3000 	ldr.w	r3, [r8]
 80075de:	461c      	mov	r4, r3
 80075e0:	bb44      	cbnz	r4, 8007634 <_malloc_r+0x88>
 80075e2:	4629      	mov	r1, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff ffbf 	bl	8007568 <sbrk_aligned>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	4604      	mov	r4, r0
 80075ee:	d158      	bne.n	80076a2 <_malloc_r+0xf6>
 80075f0:	f8d8 4000 	ldr.w	r4, [r8]
 80075f4:	4627      	mov	r7, r4
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	d143      	bne.n	8007682 <_malloc_r+0xd6>
 80075fa:	2c00      	cmp	r4, #0
 80075fc:	d04b      	beq.n	8007696 <_malloc_r+0xea>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	4639      	mov	r1, r7
 8007602:	4630      	mov	r0, r6
 8007604:	eb04 0903 	add.w	r9, r4, r3
 8007608:	f000 fcfe 	bl	8008008 <_sbrk_r>
 800760c:	4581      	cmp	r9, r0
 800760e:	d142      	bne.n	8007696 <_malloc_r+0xea>
 8007610:	6821      	ldr	r1, [r4, #0]
 8007612:	1a6d      	subs	r5, r5, r1
 8007614:	4629      	mov	r1, r5
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ffa6 	bl	8007568 <sbrk_aligned>
 800761c:	3001      	adds	r0, #1
 800761e:	d03a      	beq.n	8007696 <_malloc_r+0xea>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	442b      	add	r3, r5
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	f8d8 3000 	ldr.w	r3, [r8]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	bb62      	cbnz	r2, 8007688 <_malloc_r+0xdc>
 800762e:	f8c8 7000 	str.w	r7, [r8]
 8007632:	e00f      	b.n	8007654 <_malloc_r+0xa8>
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	1b52      	subs	r2, r2, r5
 8007638:	d420      	bmi.n	800767c <_malloc_r+0xd0>
 800763a:	2a0b      	cmp	r2, #11
 800763c:	d917      	bls.n	800766e <_malloc_r+0xc2>
 800763e:	1961      	adds	r1, r4, r5
 8007640:	42a3      	cmp	r3, r4
 8007642:	6025      	str	r5, [r4, #0]
 8007644:	bf18      	it	ne
 8007646:	6059      	strne	r1, [r3, #4]
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	bf08      	it	eq
 800764c:	f8c8 1000 	streq.w	r1, [r8]
 8007650:	5162      	str	r2, [r4, r5]
 8007652:	604b      	str	r3, [r1, #4]
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f82f 	bl	80076b8 <__malloc_unlock>
 800765a:	f104 000b 	add.w	r0, r4, #11
 800765e:	1d23      	adds	r3, r4, #4
 8007660:	f020 0007 	bic.w	r0, r0, #7
 8007664:	1ac2      	subs	r2, r0, r3
 8007666:	bf1c      	itt	ne
 8007668:	1a1b      	subne	r3, r3, r0
 800766a:	50a3      	strne	r3, [r4, r2]
 800766c:	e7af      	b.n	80075ce <_malloc_r+0x22>
 800766e:	6862      	ldr	r2, [r4, #4]
 8007670:	42a3      	cmp	r3, r4
 8007672:	bf0c      	ite	eq
 8007674:	f8c8 2000 	streq.w	r2, [r8]
 8007678:	605a      	strne	r2, [r3, #4]
 800767a:	e7eb      	b.n	8007654 <_malloc_r+0xa8>
 800767c:	4623      	mov	r3, r4
 800767e:	6864      	ldr	r4, [r4, #4]
 8007680:	e7ae      	b.n	80075e0 <_malloc_r+0x34>
 8007682:	463c      	mov	r4, r7
 8007684:	687f      	ldr	r7, [r7, #4]
 8007686:	e7b6      	b.n	80075f6 <_malloc_r+0x4a>
 8007688:	461a      	mov	r2, r3
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	42a3      	cmp	r3, r4
 800768e:	d1fb      	bne.n	8007688 <_malloc_r+0xdc>
 8007690:	2300      	movs	r3, #0
 8007692:	6053      	str	r3, [r2, #4]
 8007694:	e7de      	b.n	8007654 <_malloc_r+0xa8>
 8007696:	230c      	movs	r3, #12
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	4630      	mov	r0, r6
 800769c:	f000 f80c 	bl	80076b8 <__malloc_unlock>
 80076a0:	e794      	b.n	80075cc <_malloc_r+0x20>
 80076a2:	6005      	str	r5, [r0, #0]
 80076a4:	e7d6      	b.n	8007654 <_malloc_r+0xa8>
 80076a6:	bf00      	nop
 80076a8:	24001528 	.word	0x24001528

080076ac <__malloc_lock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	@ (80076b4 <__malloc_lock+0x8>)
 80076ae:	f000 bcf9 	b.w	80080a4 <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	24001abd 	.word	0x24001abd

080076b8 <__malloc_unlock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	@ (80076c0 <__malloc_unlock+0x8>)
 80076ba:	f000 bcf5 	b.w	80080a8 <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	24001abd 	.word	0x24001abd

080076c4 <chacha_encrypt_bytes.part.0>:
 80076c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c8:	b0b1      	sub	sp, #196	@ 0xc4
 80076ca:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
 80076ce:	6803      	ldr	r3, [r0, #0]
 80076d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076d2:	6843      	ldr	r3, [r0, #4]
 80076d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80076d6:	6883      	ldr	r3, [r0, #8]
 80076d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80076da:	68c3      	ldr	r3, [r0, #12]
 80076dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80076de:	6903      	ldr	r3, [r0, #16]
 80076e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076e2:	6943      	ldr	r3, [r0, #20]
 80076e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80076e6:	6983      	ldr	r3, [r0, #24]
 80076e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80076ea:	69c3      	ldr	r3, [r0, #28]
 80076ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80076ee:	6a03      	ldr	r3, [r0, #32]
 80076f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076f2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80076f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80076f6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80076f8:	9315      	str	r3, [sp, #84]	@ 0x54
 80076fa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80076fc:	9316      	str	r3, [sp, #88]	@ 0x58
 80076fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007700:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007702:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007708:	9318      	str	r3, [sp, #96]	@ 0x60
 800770a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800770c:	9319      	str	r3, [sp, #100]	@ 0x64
 800770e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007710:	9307      	str	r3, [sp, #28]
 8007712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	2300      	movs	r3, #0
 8007718:	4683      	mov	fp, r0
 800771a:	931e      	str	r3, [sp, #120]	@ 0x78
 800771c:	9b01      	ldr	r3, [sp, #4]
 800771e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007720:	d80d      	bhi.n	800773e <chacha_encrypt_bytes.part.0+0x7a>
 8007722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007724:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007726:	3b01      	subs	r3, #1
 8007728:	a920      	add	r1, sp, #128	@ 0x80
 800772a:	3003      	adds	r0, #3
 800772c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007730:	f801 4b01 	strb.w	r4, [r1], #1
 8007734:	4298      	cmp	r0, r3
 8007736:	d1f9      	bne.n	800772c <chacha_encrypt_bytes.part.0+0x68>
 8007738:	921e      	str	r2, [sp, #120]	@ 0x78
 800773a:	aa20      	add	r2, sp, #128	@ 0x80
 800773c:	9209      	str	r2, [sp, #36]	@ 0x24
 800773e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007744:	9308      	str	r3, [sp, #32]
 8007746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007748:	9306      	str	r3, [sp, #24]
 800774a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800774c:	9303      	str	r3, [sp, #12]
 800774e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007750:	9305      	str	r3, [sp, #20]
 8007752:	270a      	movs	r7, #10
 8007754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007756:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8007758:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800775c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800775e:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8007762:	f8dd 9000 	ldr.w	r9, [sp]
 8007766:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007768:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800776a:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 800776e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007772:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	971f      	str	r7, [sp, #124]	@ 0x7c
 8007778:	9f02      	ldr	r7, [sp, #8]
 800777a:	4407      	add	r7, r0
 800777c:	ea87 0a0a 	eor.w	sl, r7, sl
 8007780:	eb0e 4e3a 	add.w	lr, lr, sl, ror #16
 8007784:	440e      	add	r6, r1
 8007786:	ea8e 0300 	eor.w	r3, lr, r0
 800778a:	ea86 0909 	eor.w	r9, r6, r9
 800778e:	eb0c 4c39 	add.w	ip, ip, r9, ror #16
 8007792:	eb07 5733 	add.w	r7, r7, r3, ror #20
 8007796:	ea87 4a3a 	eor.w	sl, r7, sl, ror #16
 800779a:	ea8c 0101 	eor.w	r1, ip, r1
 800779e:	eb0e 603a 	add.w	r0, lr, sl, ror #24
 80077a2:	eb06 5631 	add.w	r6, r6, r1, ror #20
 80077a6:	ea86 4939 	eor.w	r9, r6, r9, ror #16
 80077aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80077ac:	ea80 5033 	eor.w	r0, r0, r3, ror #20
 80077b0:	9b05      	ldr	r3, [sp, #20]
 80077b2:	901b      	str	r0, [sp, #108]	@ 0x6c
 80077b4:	eb0c 6039 	add.w	r0, ip, r9, ror #24
 80077b8:	ea80 5131 	eor.w	r1, r0, r1, ror #20
 80077bc:	441d      	add	r5, r3
 80077be:	901c      	str	r0, [sp, #112]	@ 0x70
 80077c0:	9803      	ldr	r0, [sp, #12]
 80077c2:	ea85 0808 	eor.w	r8, r5, r8
 80077c6:	eb00 4e38 	add.w	lr, r0, r8, ror #16
 80077ca:	ea8e 0303 	eor.w	r3, lr, r3
 80077ce:	eb05 5533 	add.w	r5, r5, r3, ror #20
 80077d2:	ea85 4038 	eor.w	r0, r5, r8, ror #16
 80077d6:	eb0e 6e30 	add.w	lr, lr, r0, ror #24
 80077da:	901d      	str	r0, [sp, #116]	@ 0x74
 80077dc:	9806      	ldr	r0, [sp, #24]
 80077de:	4404      	add	r4, r0
 80077e0:	9808      	ldr	r0, [sp, #32]
 80077e2:	ea84 0800 	eor.w	r8, r4, r0
 80077e6:	9804      	ldr	r0, [sp, #16]
 80077e8:	eb00 4c38 	add.w	ip, r0, r8, ror #16
 80077ec:	9806      	ldr	r0, [sp, #24]
 80077ee:	ea8c 0000 	eor.w	r0, ip, r0
 80077f2:	eb04 5430 	add.w	r4, r4, r0, ror #20
 80077f6:	ea84 4838 	eor.w	r8, r4, r8, ror #16
 80077fa:	eb07 6771 	add.w	r7, r7, r1, ror #25
 80077fe:	eb0c 6c38 	add.w	ip, ip, r8, ror #24
 8007802:	ea87 6838 	eor.w	r8, r7, r8, ror #24
 8007806:	ea8e 5333 	eor.w	r3, lr, r3, ror #20
 800780a:	eb0e 4e38 	add.w	lr, lr, r8, ror #16
 800780e:	ea8e 6171 	eor.w	r1, lr, r1, ror #25
 8007812:	eb07 5731 	add.w	r7, r7, r1, ror #20
 8007816:	ea87 4838 	eor.w	r8, r7, r8, ror #16
 800781a:	eb06 6673 	add.w	r6, r6, r3, ror #25
 800781e:	9702      	str	r7, [sp, #8]
 8007820:	ea4f 6738 	mov.w	r7, r8, ror #24
 8007824:	9708      	str	r7, [sp, #32]
 8007826:	eb0e 6738 	add.w	r7, lr, r8, ror #24
 800782a:	ea86 6e3a 	eor.w	lr, r6, sl, ror #24
 800782e:	ea8c 5030 	eor.w	r0, ip, r0, ror #20
 8007832:	eb0c 4c3e 	add.w	ip, ip, lr, ror #16
 8007836:	ea8c 6373 	eor.w	r3, ip, r3, ror #25
 800783a:	eb06 5633 	add.w	r6, r6, r3, ror #20
 800783e:	ea86 4e3e 	eor.w	lr, r6, lr, ror #16
 8007842:	ea87 5131 	eor.w	r1, r7, r1, ror #20
 8007846:	9703      	str	r7, [sp, #12]
 8007848:	eb0c 673e 	add.w	r7, ip, lr, ror #24
 800784c:	eb05 6570 	add.w	r5, r5, r0, ror #25
 8007850:	ea87 5333 	eor.w	r3, r7, r3, ror #20
 8007854:	9704      	str	r7, [sp, #16]
 8007856:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8007858:	ea85 6939 	eor.w	r9, r5, r9, ror #24
 800785c:	ea4f 6a3e 	mov.w	sl, lr, ror #24
 8007860:	eb07 4e39 	add.w	lr, r7, r9, ror #16
 8007864:	ea8e 6070 	eor.w	r0, lr, r0, ror #25
 8007868:	eb05 5530 	add.w	r5, r5, r0, ror #20
 800786c:	ea85 4c39 	eor.w	ip, r5, r9, ror #16
 8007870:	eb0e 6e3c 	add.w	lr, lr, ip, ror #24
 8007874:	ea8e 5030 	eor.w	r0, lr, r0, ror #20
 8007878:	ea4f 6070 	mov.w	r0, r0, ror #25
 800787c:	9006      	str	r0, [sp, #24]
 800787e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8007880:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8007882:	eb04 6470 	add.w	r4, r4, r0, ror #25
 8007886:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8007888:	ea4f 693c 	mov.w	r9, ip, ror #24
 800788c:	ea84 6c30 	eor.w	ip, r4, r0, ror #24
 8007890:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8007892:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007896:	eb00 403c 	add.w	r0, r0, ip, ror #16
 800789a:	9305      	str	r3, [sp, #20]
 800789c:	4603      	mov	r3, r0
 800789e:	ea80 6077 	eor.w	r0, r0, r7, ror #25
 80078a2:	eb04 5430 	add.w	r4, r4, r0, ror #20
 80078a6:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 80078a8:	ea84 4c3c 	eor.w	ip, r4, ip, ror #16
 80078ac:	ea4f 683c 	mov.w	r8, ip, ror #24
 80078b0:	eb03 6c3c 	add.w	ip, r3, ip, ror #24
 80078b4:	ea8c 5030 	eor.w	r0, ip, r0, ror #20
 80078b8:	3f01      	subs	r7, #1
 80078ba:	ea4f 6171 	mov.w	r1, r1, ror #25
 80078be:	ea4f 6070 	mov.w	r0, r0, ror #25
 80078c2:	971f      	str	r7, [sp, #124]	@ 0x7c
 80078c4:	f47f af58 	bne.w	8007778 <chacha_encrypt_bytes.part.0+0xb4>
 80078c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80078ca:	9b02      	ldr	r3, [sp, #8]
 80078cc:	443b      	add	r3, r7
 80078ce:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80078d0:	9302      	str	r3, [sp, #8]
 80078d2:	443e      	add	r6, r7
 80078d4:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80078d6:	9b05      	ldr	r3, [sp, #20]
 80078d8:	443d      	add	r5, r7
 80078da:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80078dc:	443c      	add	r4, r7
 80078de:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80078e0:	4438      	add	r0, r7
 80078e2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80078e4:	4439      	add	r1, r7
 80078e6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80078e8:	443b      	add	r3, r7
 80078ea:	9305      	str	r3, [sp, #20]
 80078ec:	9f06      	ldr	r7, [sp, #24]
 80078ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078f0:	441f      	add	r7, r3
 80078f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078f4:	9706      	str	r7, [sp, #24]
 80078f6:	449e      	add	lr, r3
 80078f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078fa:	9f03      	ldr	r7, [sp, #12]
 80078fc:	449c      	add	ip, r3
 80078fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007900:	441f      	add	r7, r3
 8007902:	9703      	str	r7, [sp, #12]
 8007904:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007906:	9f04      	ldr	r7, [sp, #16]
 8007908:	441f      	add	r7, r3
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	9704      	str	r7, [sp, #16]
 800790e:	449a      	add	sl, r3
 8007910:	9b00      	ldr	r3, [sp, #0]
 8007912:	9f08      	ldr	r7, [sp, #32]
 8007914:	4499      	add	r9, r3
 8007916:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007918:	4498      	add	r8, r3
 800791a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800791c:	441f      	add	r7, r3
 800791e:	9b07      	ldr	r3, [sp, #28]
 8007920:	9708      	str	r7, [sp, #32]
 8007922:	3301      	adds	r3, #1
 8007924:	bf08      	it	eq
 8007926:	9f00      	ldreq	r7, [sp, #0]
 8007928:	9307      	str	r3, [sp, #28]
 800792a:	bf04      	itt	eq
 800792c:	3701      	addeq	r7, #1
 800792e:	9700      	streq	r7, [sp, #0]
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	7013      	strb	r3, [r2, #0]
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	7053      	strb	r3, [r2, #1]
 8007938:	9b02      	ldr	r3, [sp, #8]
 800793a:	7116      	strb	r6, [r2, #4]
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	7093      	strb	r3, [r2, #2]
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	7215      	strb	r5, [r2, #8]
 8007944:	0e1f      	lsrs	r7, r3, #24
 8007946:	70d7      	strb	r7, [r2, #3]
 8007948:	0a37      	lsrs	r7, r6, #8
 800794a:	7157      	strb	r7, [r2, #5]
 800794c:	0c37      	lsrs	r7, r6, #16
 800794e:	0e36      	lsrs	r6, r6, #24
 8007950:	71d6      	strb	r6, [r2, #7]
 8007952:	0a2e      	lsrs	r6, r5, #8
 8007954:	7256      	strb	r6, [r2, #9]
 8007956:	0c2e      	lsrs	r6, r5, #16
 8007958:	0e2d      	lsrs	r5, r5, #24
 800795a:	72d5      	strb	r5, [r2, #11]
 800795c:	0a25      	lsrs	r5, r4, #8
 800795e:	7314      	strb	r4, [r2, #12]
 8007960:	7355      	strb	r5, [r2, #13]
 8007962:	0c25      	lsrs	r5, r4, #16
 8007964:	0e24      	lsrs	r4, r4, #24
 8007966:	73d4      	strb	r4, [r2, #15]
 8007968:	0a04      	lsrs	r4, r0, #8
 800796a:	7410      	strb	r0, [r2, #16]
 800796c:	7454      	strb	r4, [r2, #17]
 800796e:	0c04      	lsrs	r4, r0, #16
 8007970:	0e00      	lsrs	r0, r0, #24
 8007972:	9b05      	ldr	r3, [sp, #20]
 8007974:	74d0      	strb	r0, [r2, #19]
 8007976:	0a08      	lsrs	r0, r1, #8
 8007978:	7511      	strb	r1, [r2, #20]
 800797a:	7550      	strb	r0, [r2, #21]
 800797c:	0c08      	lsrs	r0, r1, #16
 800797e:	0e09      	lsrs	r1, r1, #24
 8007980:	75d1      	strb	r1, [r2, #23]
 8007982:	0a19      	lsrs	r1, r3, #8
 8007984:	7613      	strb	r3, [r2, #24]
 8007986:	7651      	strb	r1, [r2, #25]
 8007988:	0c19      	lsrs	r1, r3, #16
 800798a:	0e1b      	lsrs	r3, r3, #24
 800798c:	7197      	strb	r7, [r2, #6]
 800798e:	7296      	strb	r6, [r2, #10]
 8007990:	7395      	strb	r5, [r2, #14]
 8007992:	7494      	strb	r4, [r2, #18]
 8007994:	7590      	strb	r0, [r2, #22]
 8007996:	7691      	strb	r1, [r2, #26]
 8007998:	76d3      	strb	r3, [r2, #27]
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	7713      	strb	r3, [r2, #28]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	7753      	strb	r3, [r2, #29]
 80079a2:	9b06      	ldr	r3, [sp, #24]
 80079a4:	f882 e020 	strb.w	lr, [r2, #32]
 80079a8:	0c1b      	lsrs	r3, r3, #16
 80079aa:	7793      	strb	r3, [r2, #30]
 80079ac:	9b06      	ldr	r3, [sp, #24]
 80079ae:	f882 c024 	strb.w	ip, [r2, #36]	@ 0x24
 80079b2:	0e1b      	lsrs	r3, r3, #24
 80079b4:	77d3      	strb	r3, [r2, #31]
 80079b6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80079ba:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80079be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80079c2:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
 80079c6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80079ca:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 80079ce:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80079d2:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 80079dc:	0a1b      	lsrs	r3, r3, #8
 80079de:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	f882 a030 	strb.w	sl, [r2, #48]	@ 0x30
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	0e1b      	lsrs	r3, r3, #24
 80079f2:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
 80079fc:	0a1b      	lsrs	r3, r3, #8
 80079fe:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 8007a02:	9b04      	ldr	r3, [sp, #16]
 8007a04:	0c1b      	lsrs	r3, r3, #16
 8007a06:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	0e1b      	lsrs	r3, r3, #24
 8007a0e:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
 8007a12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8007a16:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 8007a1a:	ea4f 431a 	mov.w	r3, sl, lsr #16
 8007a1e:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
 8007a22:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8007a26:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8007a2a:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8007a2e:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007a32:	f882 e023 	strb.w	lr, [r2, #35]	@ 0x23
 8007a36:	f882 c027 	strb.w	ip, [r2, #39]	@ 0x27
 8007a3a:	f882 a033 	strb.w	sl, [r2, #51]	@ 0x33
 8007a3e:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
 8007a42:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8007a46:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
 8007a4a:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8007a4e:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
 8007a52:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8007a56:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
 8007a5a:	ea4f 6318 	mov.w	r3, r8, lsr #24
 8007a5e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
 8007a68:	0a1b      	lsrs	r3, r3, #8
 8007a6a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
 8007a6e:	9b08      	ldr	r3, [sp, #32]
 8007a70:	f882 9034 	strb.w	r9, [r2, #52]	@ 0x34
 8007a74:	0c1b      	lsrs	r3, r3, #16
 8007a76:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
 8007a7a:	9b08      	ldr	r3, [sp, #32]
 8007a7c:	f882 8038 	strb.w	r8, [r2, #56]	@ 0x38
 8007a80:	0e1b      	lsrs	r3, r3, #24
 8007a82:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007a8c:	2b40      	cmp	r3, #64	@ 0x40
 8007a8e:	f882 9037 	strb.w	r9, [r2, #55]	@ 0x37
 8007a92:	d81e      	bhi.n	8007ad2 <chacha_encrypt_bytes.part.0+0x40e>
 8007a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a96:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007a98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	099b      	lsrs	r3, r3, #6
 8007a9e:	1c59      	adds	r1, r3, #1
 8007aa0:	4401      	add	r1, r0
 8007aa2:	f06f 003f 	mvn.w	r0, #63	@ 0x3f
 8007aa6:	fb00 4303 	mla	r3, r0, r3, r4
 8007aaa:	2b40      	cmp	r3, #64	@ 0x40
 8007aac:	d009      	beq.n	8007ac2 <chacha_encrypt_bytes.part.0+0x3fe>
 8007aae:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8007ab0:	1e53      	subs	r3, r2, #1
 8007ab2:	3801      	subs	r0, #1
 8007ab4:	3203      	adds	r2, #3
 8007ab6:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007aba:	f800 4f01 	strb.w	r4, [r0, #1]!
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d1f9      	bne.n	8007ab6 <chacha_encrypt_bytes.part.0+0x3f2>
 8007ac2:	9b00      	ldr	r3, [sp, #0]
 8007ac4:	f8cb 1030 	str.w	r1, [fp, #48]	@ 0x30
 8007ac8:	f8cb 3034 	str.w	r3, [fp, #52]	@ 0x34
 8007acc:	b031      	add	sp, #196	@ 0xc4
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	9b01      	ldr	r3, [sp, #4]
 8007ad4:	3b40      	subs	r3, #64	@ 0x40
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	3240      	adds	r2, #64	@ 0x40
 8007ada:	e61f      	b.n	800771c <chacha_encrypt_bytes.part.0+0x58>

08007adc <_rs_init.part.0>:
 8007adc:	4916      	ldr	r1, [pc, #88]	@ (8007b38 <_rs_init.part.0+0x5c>)
 8007ade:	4a17      	ldr	r2, [pc, #92]	@ (8007b3c <_rs_init.part.0+0x60>)
 8007ae0:	680b      	ldr	r3, [r1, #0]
 8007ae2:	b91b      	cbnz	r3, 8007aec <_rs_init.part.0+0x10>
 8007ae4:	4b16      	ldr	r3, [pc, #88]	@ (8007b40 <_rs_init.part.0+0x64>)
 8007ae6:	600b      	str	r3, [r1, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	6813      	ldr	r3, [r2, #0]
 8007aee:	6802      	ldr	r2, [r0, #0]
 8007af0:	611a      	str	r2, [r3, #16]
 8007af2:	6842      	ldr	r2, [r0, #4]
 8007af4:	615a      	str	r2, [r3, #20]
 8007af6:	6882      	ldr	r2, [r0, #8]
 8007af8:	619a      	str	r2, [r3, #24]
 8007afa:	68c2      	ldr	r2, [r0, #12]
 8007afc:	61da      	str	r2, [r3, #28]
 8007afe:	6902      	ldr	r2, [r0, #16]
 8007b00:	621a      	str	r2, [r3, #32]
 8007b02:	6942      	ldr	r2, [r0, #20]
 8007b04:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b06:	6982      	ldr	r2, [r0, #24]
 8007b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b0a:	69c2      	ldr	r2, [r0, #28]
 8007b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007b0e:	490d      	ldr	r1, [pc, #52]	@ (8007b44 <_rs_init.part.0+0x68>)
 8007b10:	4a0d      	ldr	r2, [pc, #52]	@ (8007b48 <_rs_init.part.0+0x6c>)
 8007b12:	e9c3 1200 	strd	r1, r2, [r3]
 8007b16:	4a0d      	ldr	r2, [pc, #52]	@ (8007b4c <_rs_init.part.0+0x70>)
 8007b18:	609a      	str	r2, [r3, #8]
 8007b1a:	f1a2 6264 	sub.w	r2, r2, #239075328	@ 0xe400000
 8007b1e:	f5a2 32e3 	sub.w	r2, r2, #116224	@ 0x1c600
 8007b22:	f5a2 72df 	sub.w	r2, r2, #446	@ 0x1be
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	e9c3 220c 	strd	r2, r2, [r3, #48]	@ 0x30
 8007b2e:	6a02      	ldr	r2, [r0, #32]
 8007b30:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b32:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8007b34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b36:	4770      	bx	lr
 8007b38:	24001978 	.word	0x24001978
 8007b3c:	24001974 	.word	0x24001974
 8007b40:	2400152c 	.word	0x2400152c
 8007b44:	61707865 	.word	0x61707865
 8007b48:	3320646e 	.word	0x3320646e
 8007b4c:	79622d32 	.word	0x79622d32

08007b50 <_rs_rekey>:
 8007b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8007bb4 <_rs_rekey+0x64>
 8007b58:	f8d8 5000 	ldr.w	r5, [r8]
 8007b5c:	f105 0740 	add.w	r7, r5, #64	@ 0x40
 8007b60:	4604      	mov	r4, r0
 8007b62:	460e      	mov	r6, r1
 8007b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b68:	463a      	mov	r2, r7
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f7ff fda9 	bl	80076c4 <chacha_encrypt_bytes.part.0>
 8007b72:	b124      	cbz	r4, 8007b7e <_rs_rekey+0x2e>
 8007b74:	353f      	adds	r5, #63	@ 0x3f
 8007b76:	4620      	mov	r0, r4
 8007b78:	4426      	add	r6, r4
 8007b7a:	42b0      	cmp	r0, r6
 8007b7c:	d110      	bne.n	8007ba0 <_rs_rekey+0x50>
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f7ff ffac 	bl	8007adc <_rs_init.part.0>
 8007b84:	f8d8 0000 	ldr.w	r0, [r8]
 8007b88:	2228      	movs	r2, #40	@ 0x28
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	3040      	adds	r0, #64	@ 0x40
 8007b8e:	f000 f9ba 	bl	8007f06 <memset>
 8007b92:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <_rs_rekey+0x60>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ba4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007ba8:	4053      	eors	r3, r2
 8007baa:	702b      	strb	r3, [r5, #0]
 8007bac:	e7e5      	b.n	8007b7a <_rs_rekey+0x2a>
 8007bae:	bf00      	nop
 8007bb0:	24001978 	.word	0x24001978
 8007bb4:	24001974 	.word	0x24001974

08007bb8 <_rs_stir_if_needed>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	4d23      	ldr	r5, [pc, #140]	@ (8007c48 <_rs_stir_if_needed+0x90>)
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b08c      	sub	sp, #48	@ 0x30
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	b113      	cbz	r3, 8007bca <_rs_stir_if_needed+0x12>
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	4283      	cmp	r3, r0
 8007bc8:	d82f      	bhi.n	8007c2a <_rs_stir_if_needed+0x72>
 8007bca:	2100      	movs	r1, #0
 8007bcc:	2228      	movs	r2, #40	@ 0x28
 8007bce:	a802      	add	r0, sp, #8
 8007bd0:	9101      	str	r1, [sp, #4]
 8007bd2:	f000 f998 	bl	8007f06 <memset>
 8007bd6:	2128      	movs	r1, #40	@ 0x28
 8007bd8:	a802      	add	r0, sp, #8
 8007bda:	f000 fa67 	bl	80080ac <getentropy>
 8007bde:	3001      	adds	r0, #1
 8007be0:	d102      	bne.n	8007be8 <_rs_stir_if_needed+0x30>
 8007be2:	2009      	movs	r0, #9
 8007be4:	f000 f9c0 	bl	8007f68 <raise>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	bb3b      	cbnz	r3, 8007c3c <_rs_stir_if_needed+0x84>
 8007bec:	a802      	add	r0, sp, #8
 8007bee:	f7ff ff75 	bl	8007adc <_rs_init.part.0>
 8007bf2:	4e16      	ldr	r6, [pc, #88]	@ (8007c4c <_rs_stir_if_needed+0x94>)
 8007bf4:	2128      	movs	r1, #40	@ 0x28
 8007bf6:	a802      	add	r0, sp, #8
 8007bf8:	f000 f973 	bl	8007ee2 <explicit_bzero>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	6830      	ldr	r0, [r6, #0]
 8007c00:	2100      	movs	r1, #0
 8007c02:	6019      	str	r1, [r3, #0]
 8007c04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c08:	3040      	adds	r0, #64	@ 0x40
 8007c0a:	f000 f97c 	bl	8007f06 <memset>
 8007c0e:	2304      	movs	r3, #4
 8007c10:	eb0d 0203 	add.w	r2, sp, r3
 8007c14:	4611      	mov	r1, r2
 8007c16:	6830      	ldr	r0, [r6, #0]
 8007c18:	f7ff fd54 	bl	80076c4 <chacha_encrypt_bytes.part.0>
 8007c1c:	9b01      	ldr	r3, [sp, #4]
 8007c1e:	682a      	ldr	r2, [r5, #0]
 8007c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c24:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007c28:	6053      	str	r3, [r2, #4]
 8007c2a:	682a      	ldr	r2, [r5, #0]
 8007c2c:	6853      	ldr	r3, [r2, #4]
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	bf8c      	ite	hi
 8007c32:	1b1b      	subhi	r3, r3, r4
 8007c34:	2300      	movls	r3, #0
 8007c36:	6053      	str	r3, [r2, #4]
 8007c38:	b00c      	add	sp, #48	@ 0x30
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	2128      	movs	r1, #40	@ 0x28
 8007c3e:	a802      	add	r0, sp, #8
 8007c40:	f7ff ff86 	bl	8007b50 <_rs_rekey>
 8007c44:	e7d5      	b.n	8007bf2 <_rs_stir_if_needed+0x3a>
 8007c46:	bf00      	nop
 8007c48:	24001978 	.word	0x24001978
 8007c4c:	24001974 	.word	0x24001974

08007c50 <arc4random>:
 8007c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c52:	4815      	ldr	r0, [pc, #84]	@ (8007ca8 <arc4random+0x58>)
 8007c54:	4d15      	ldr	r5, [pc, #84]	@ (8007cac <arc4random+0x5c>)
 8007c56:	f000 fa24 	bl	80080a2 <__retarget_lock_acquire>
 8007c5a:	2004      	movs	r0, #4
 8007c5c:	f7ff ffac 	bl	8007bb8 <_rs_stir_if_needed>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d803      	bhi.n	8007c70 <arc4random+0x20>
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	f7ff ff70 	bl	8007b50 <_rs_rekey>
 8007c70:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb0 <arc4random+0x60>)
 8007c72:	681c      	ldr	r4, [r3, #0]
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	1ae4      	subs	r4, r4, r3
 8007c7a:	f504 6488 	add.w	r4, r4, #1088	@ 0x440
 8007c7e:	2204      	movs	r2, #4
 8007c80:	4621      	mov	r1, r4
 8007c82:	eb0d 0002 	add.w	r0, sp, r2
 8007c86:	f000 fa23 	bl	80080d0 <memcpy>
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f939 	bl	8007f06 <memset>
 8007c94:	682a      	ldr	r2, [r5, #0]
 8007c96:	4804      	ldr	r0, [pc, #16]	@ (8007ca8 <arc4random+0x58>)
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	3b04      	subs	r3, #4
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	f000 fa02 	bl	80080a6 <__retarget_lock_release>
 8007ca2:	9801      	ldr	r0, [sp, #4]
 8007ca4:	b003      	add	sp, #12
 8007ca6:	bd30      	pop	{r4, r5, pc}
 8007ca8:	24001abc 	.word	0x24001abc
 8007cac:	24001978 	.word	0x24001978
 8007cb0:	24001974 	.word	0x24001974

08007cb4 <std>:
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	4604      	mov	r4, r0
 8007cba:	e9c0 3300 	strd	r3, r3, [r0]
 8007cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cc2:	6083      	str	r3, [r0, #8]
 8007cc4:	8181      	strh	r1, [r0, #12]
 8007cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cc8:	81c2      	strh	r2, [r0, #14]
 8007cca:	6183      	str	r3, [r0, #24]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	2208      	movs	r2, #8
 8007cd0:	305c      	adds	r0, #92	@ 0x5c
 8007cd2:	f000 f918 	bl	8007f06 <memset>
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <std+0x58>)
 8007cd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <std+0x5c>)
 8007cdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <std+0x60>)
 8007ce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <std+0x64>)
 8007ce4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d1c <std+0x68>)
 8007ce8:	6224      	str	r4, [r4, #32]
 8007cea:	429c      	cmp	r4, r3
 8007cec:	d006      	beq.n	8007cfc <std+0x48>
 8007cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cf2:	4294      	cmp	r4, r2
 8007cf4:	d002      	beq.n	8007cfc <std+0x48>
 8007cf6:	33d0      	adds	r3, #208	@ 0xd0
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d105      	bne.n	8007d08 <std+0x54>
 8007cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d04:	f000 b9cc 	b.w	80080a0 <__retarget_lock_init_recursive>
 8007d08:	bd10      	pop	{r4, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08007e5d 	.word	0x08007e5d
 8007d10:	08007e7f 	.word	0x08007e7f
 8007d14:	08007eb7 	.word	0x08007eb7
 8007d18:	08007edb 	.word	0x08007edb
 8007d1c:	2400197c 	.word	0x2400197c

08007d20 <stdio_exit_handler>:
 8007d20:	4a02      	ldr	r2, [pc, #8]	@ (8007d2c <stdio_exit_handler+0xc>)
 8007d22:	4903      	ldr	r1, [pc, #12]	@ (8007d30 <stdio_exit_handler+0x10>)
 8007d24:	4803      	ldr	r0, [pc, #12]	@ (8007d34 <stdio_exit_handler+0x14>)
 8007d26:	f000 b869 	b.w	8007dfc <_fwalk_sglue>
 8007d2a:	bf00      	nop
 8007d2c:	2400003c 	.word	0x2400003c
 8007d30:	08008825 	.word	0x08008825
 8007d34:	2400004c 	.word	0x2400004c

08007d38 <cleanup_stdio>:
 8007d38:	6841      	ldr	r1, [r0, #4]
 8007d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d6c <cleanup_stdio+0x34>)
 8007d3c:	4299      	cmp	r1, r3
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	4604      	mov	r4, r0
 8007d42:	d001      	beq.n	8007d48 <cleanup_stdio+0x10>
 8007d44:	f000 fd6e 	bl	8008824 <_fflush_r>
 8007d48:	68a1      	ldr	r1, [r4, #8]
 8007d4a:	4b09      	ldr	r3, [pc, #36]	@ (8007d70 <cleanup_stdio+0x38>)
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	d002      	beq.n	8007d56 <cleanup_stdio+0x1e>
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 fd67 	bl	8008824 <_fflush_r>
 8007d56:	68e1      	ldr	r1, [r4, #12]
 8007d58:	4b06      	ldr	r3, [pc, #24]	@ (8007d74 <cleanup_stdio+0x3c>)
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	d004      	beq.n	8007d68 <cleanup_stdio+0x30>
 8007d5e:	4620      	mov	r0, r4
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	f000 bd5e 	b.w	8008824 <_fflush_r>
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	2400197c 	.word	0x2400197c
 8007d70:	240019e4 	.word	0x240019e4
 8007d74:	24001a4c 	.word	0x24001a4c

08007d78 <global_stdio_init.part.0>:
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <global_stdio_init.part.0+0x30>)
 8007d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8007dac <global_stdio_init.part.0+0x34>)
 8007d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007db0 <global_stdio_init.part.0+0x38>)
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	4620      	mov	r0, r4
 8007d84:	2200      	movs	r2, #0
 8007d86:	2104      	movs	r1, #4
 8007d88:	f7ff ff94 	bl	8007cb4 <std>
 8007d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d90:	2201      	movs	r2, #1
 8007d92:	2109      	movs	r1, #9
 8007d94:	f7ff ff8e 	bl	8007cb4 <std>
 8007d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da2:	2112      	movs	r1, #18
 8007da4:	f7ff bf86 	b.w	8007cb4 <std>
 8007da8:	24001ab4 	.word	0x24001ab4
 8007dac:	2400197c 	.word	0x2400197c
 8007db0:	08007d21 	.word	0x08007d21

08007db4 <__sfp_lock_acquire>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__sfp_lock_acquire+0x8>)
 8007db6:	f000 b975 	b.w	80080a4 <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	24001abe 	.word	0x24001abe

08007dc0 <__sfp_lock_release>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	@ (8007dc8 <__sfp_lock_release+0x8>)
 8007dc2:	f000 b971 	b.w	80080a8 <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	24001abe 	.word	0x24001abe

08007dcc <__sinit>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	4604      	mov	r4, r0
 8007dd0:	f7ff fff0 	bl	8007db4 <__sfp_lock_acquire>
 8007dd4:	6a23      	ldr	r3, [r4, #32]
 8007dd6:	b11b      	cbz	r3, 8007de0 <__sinit+0x14>
 8007dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ddc:	f7ff bff0 	b.w	8007dc0 <__sfp_lock_release>
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <__sinit+0x28>)
 8007de2:	6223      	str	r3, [r4, #32]
 8007de4:	4b04      	ldr	r3, [pc, #16]	@ (8007df8 <__sinit+0x2c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f5      	bne.n	8007dd8 <__sinit+0xc>
 8007dec:	f7ff ffc4 	bl	8007d78 <global_stdio_init.part.0>
 8007df0:	e7f2      	b.n	8007dd8 <__sinit+0xc>
 8007df2:	bf00      	nop
 8007df4:	08007d39 	.word	0x08007d39
 8007df8:	24001ab4 	.word	0x24001ab4

08007dfc <_fwalk_sglue>:
 8007dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e00:	4607      	mov	r7, r0
 8007e02:	4688      	mov	r8, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	2600      	movs	r6, #0
 8007e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e10:	d505      	bpl.n	8007e1e <_fwalk_sglue+0x22>
 8007e12:	6824      	ldr	r4, [r4, #0]
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	d1f7      	bne.n	8007e08 <_fwalk_sglue+0xc>
 8007e18:	4630      	mov	r0, r6
 8007e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d907      	bls.n	8007e34 <_fwalk_sglue+0x38>
 8007e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	d003      	beq.n	8007e34 <_fwalk_sglue+0x38>
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47c0      	blx	r8
 8007e32:	4306      	orrs	r6, r0
 8007e34:	3568      	adds	r5, #104	@ 0x68
 8007e36:	e7e9      	b.n	8007e0c <_fwalk_sglue+0x10>

08007e38 <iprintf>:
 8007e38:	b40f      	push	{r0, r1, r2, r3}
 8007e3a:	b507      	push	{r0, r1, r2, lr}
 8007e3c:	4906      	ldr	r1, [pc, #24]	@ (8007e58 <iprintf+0x20>)
 8007e3e:	ab04      	add	r3, sp, #16
 8007e40:	6808      	ldr	r0, [r1, #0]
 8007e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e46:	6881      	ldr	r1, [r0, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	f000 f9c3 	bl	80081d4 <_vfiprintf_r>
 8007e4e:	b003      	add	sp, #12
 8007e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e54:	b004      	add	sp, #16
 8007e56:	4770      	bx	lr
 8007e58:	24000048 	.word	0x24000048

08007e5c <__sread>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	460c      	mov	r4, r1
 8007e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e64:	f000 f8aa 	bl	8007fbc <_read_r>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	bfab      	itete	ge
 8007e6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e70:	181b      	addge	r3, r3, r0
 8007e72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e76:	bfac      	ite	ge
 8007e78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e7a:	81a3      	strhlt	r3, [r4, #12]
 8007e7c:	bd10      	pop	{r4, pc}

08007e7e <__swrite>:
 8007e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e82:	461f      	mov	r7, r3
 8007e84:	898b      	ldrh	r3, [r1, #12]
 8007e86:	05db      	lsls	r3, r3, #23
 8007e88:	4605      	mov	r5, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	d505      	bpl.n	8007e9c <__swrite+0x1e>
 8007e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e94:	2302      	movs	r3, #2
 8007e96:	2200      	movs	r2, #0
 8007e98:	f000 f87e 	bl	8007f98 <_lseek_r>
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	463b      	mov	r3, r7
 8007eac:	4628      	mov	r0, r5
 8007eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	f000 b8b9 	b.w	8008028 <_write_r>

08007eb6 <__sseek>:
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	460c      	mov	r4, r1
 8007eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebe:	f000 f86b 	bl	8007f98 <_lseek_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	bf15      	itete	ne
 8007ec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007eca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ed2:	81a3      	strheq	r3, [r4, #12]
 8007ed4:	bf18      	it	ne
 8007ed6:	81a3      	strhne	r3, [r4, #12]
 8007ed8:	bd10      	pop	{r4, pc}

08007eda <__sclose>:
 8007eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ede:	f000 b84b 	b.w	8007f78 <_close_r>

08007ee2 <explicit_bzero>:
 8007ee2:	f000 bd5b 	b.w	800899c <bzero>

08007ee6 <memcmp>:
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	3901      	subs	r1, #1
 8007eea:	4402      	add	r2, r0
 8007eec:	4290      	cmp	r0, r2
 8007eee:	d101      	bne.n	8007ef4 <memcmp+0xe>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e005      	b.n	8007f00 <memcmp+0x1a>
 8007ef4:	7803      	ldrb	r3, [r0, #0]
 8007ef6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	d001      	beq.n	8007f02 <memcmp+0x1c>
 8007efe:	1b18      	subs	r0, r3, r4
 8007f00:	bd10      	pop	{r4, pc}
 8007f02:	3001      	adds	r0, #1
 8007f04:	e7f2      	b.n	8007eec <memcmp+0x6>

08007f06 <memset>:
 8007f06:	4402      	add	r2, r0
 8007f08:	4603      	mov	r3, r0
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d100      	bne.n	8007f10 <memset+0xa>
 8007f0e:	4770      	bx	lr
 8007f10:	f803 1b01 	strb.w	r1, [r3], #1
 8007f14:	e7f9      	b.n	8007f0a <memset+0x4>

08007f16 <_raise_r>:
 8007f16:	291f      	cmp	r1, #31
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	d904      	bls.n	8007f2a <_raise_r+0x14>
 8007f20:	2316      	movs	r3, #22
 8007f22:	6003      	str	r3, [r0, #0]
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f2c:	b112      	cbz	r2, 8007f34 <_raise_r+0x1e>
 8007f2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f32:	b94b      	cbnz	r3, 8007f48 <_raise_r+0x32>
 8007f34:	4628      	mov	r0, r5
 8007f36:	f000 f865 	bl	8008004 <_getpid_r>
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	4628      	mov	r0, r5
 8007f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f44:	f000 b84c 	b.w	8007fe0 <_kill_r>
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d00a      	beq.n	8007f62 <_raise_r+0x4c>
 8007f4c:	1c59      	adds	r1, r3, #1
 8007f4e:	d103      	bne.n	8007f58 <_raise_r+0x42>
 8007f50:	2316      	movs	r3, #22
 8007f52:	6003      	str	r3, [r0, #0]
 8007f54:	2001      	movs	r0, #1
 8007f56:	e7e7      	b.n	8007f28 <_raise_r+0x12>
 8007f58:	2100      	movs	r1, #0
 8007f5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4798      	blx	r3
 8007f62:	2000      	movs	r0, #0
 8007f64:	e7e0      	b.n	8007f28 <_raise_r+0x12>
	...

08007f68 <raise>:
 8007f68:	4b02      	ldr	r3, [pc, #8]	@ (8007f74 <raise+0xc>)
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	f7ff bfd2 	b.w	8007f16 <_raise_r>
 8007f72:	bf00      	nop
 8007f74:	24000048 	.word	0x24000048

08007f78 <_close_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	@ (8007f94 <_close_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7f8 fd76 	bl	8000a74 <_close>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_close_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_close_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	24001ab8 	.word	0x24001ab8

08007f98 <_lseek_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d07      	ldr	r5, [pc, #28]	@ (8007fb8 <_lseek_r+0x20>)
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	4608      	mov	r0, r1
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	602a      	str	r2, [r5, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f7f8 fd8b 	bl	8000ac2 <_lseek>
 8007fac:	1c43      	adds	r3, r0, #1
 8007fae:	d102      	bne.n	8007fb6 <_lseek_r+0x1e>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	b103      	cbz	r3, 8007fb6 <_lseek_r+0x1e>
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}
 8007fb8:	24001ab8 	.word	0x24001ab8

08007fbc <_read_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d07      	ldr	r5, [pc, #28]	@ (8007fdc <_read_r+0x20>)
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	602a      	str	r2, [r5, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f7f8 fd19 	bl	8000a02 <_read>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_read_r+0x1e>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_read_r+0x1e>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	24001ab8 	.word	0x24001ab8

08007fe0 <_kill_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4d07      	ldr	r5, [pc, #28]	@ (8008000 <_kill_r+0x20>)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4611      	mov	r1, r2
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	f7f8 fced 	bl	80009cc <_kill>
 8007ff2:	1c43      	adds	r3, r0, #1
 8007ff4:	d102      	bne.n	8007ffc <_kill_r+0x1c>
 8007ff6:	682b      	ldr	r3, [r5, #0]
 8007ff8:	b103      	cbz	r3, 8007ffc <_kill_r+0x1c>
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	bd38      	pop	{r3, r4, r5, pc}
 8007ffe:	bf00      	nop
 8008000:	24001ab8 	.word	0x24001ab8

08008004 <_getpid_r>:
 8008004:	f7f8 bcda 	b.w	80009bc <_getpid>

08008008 <_sbrk_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4d06      	ldr	r5, [pc, #24]	@ (8008024 <_sbrk_r+0x1c>)
 800800c:	2300      	movs	r3, #0
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	f7f8 fd62 	bl	8000adc <_sbrk>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_sbrk_r+0x1a>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_sbrk_r+0x1a>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	24001ab8 	.word	0x24001ab8

08008028 <_write_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d07      	ldr	r5, [pc, #28]	@ (8008048 <_write_r+0x20>)
 800802c:	4604      	mov	r4, r0
 800802e:	4608      	mov	r0, r1
 8008030:	4611      	mov	r1, r2
 8008032:	2200      	movs	r2, #0
 8008034:	602a      	str	r2, [r5, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	f7f8 fd00 	bl	8000a3c <_write>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_write_r+0x1e>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	b103      	cbz	r3, 8008046 <_write_r+0x1e>
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	24001ab8 	.word	0x24001ab8

0800804c <__errno>:
 800804c:	4b01      	ldr	r3, [pc, #4]	@ (8008054 <__errno+0x8>)
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	24000048 	.word	0x24000048

08008058 <__libc_init_array>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	4d0d      	ldr	r5, [pc, #52]	@ (8008090 <__libc_init_array+0x38>)
 800805c:	4c0d      	ldr	r4, [pc, #52]	@ (8008094 <__libc_init_array+0x3c>)
 800805e:	1b64      	subs	r4, r4, r5
 8008060:	10a4      	asrs	r4, r4, #2
 8008062:	2600      	movs	r6, #0
 8008064:	42a6      	cmp	r6, r4
 8008066:	d109      	bne.n	800807c <__libc_init_array+0x24>
 8008068:	4d0b      	ldr	r5, [pc, #44]	@ (8008098 <__libc_init_array+0x40>)
 800806a:	4c0c      	ldr	r4, [pc, #48]	@ (800809c <__libc_init_array+0x44>)
 800806c:	f000 fd38 	bl	8008ae0 <_init>
 8008070:	1b64      	subs	r4, r4, r5
 8008072:	10a4      	asrs	r4, r4, #2
 8008074:	2600      	movs	r6, #0
 8008076:	42a6      	cmp	r6, r4
 8008078:	d105      	bne.n	8008086 <__libc_init_array+0x2e>
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008080:	4798      	blx	r3
 8008082:	3601      	adds	r6, #1
 8008084:	e7ee      	b.n	8008064 <__libc_init_array+0xc>
 8008086:	f855 3b04 	ldr.w	r3, [r5], #4
 800808a:	4798      	blx	r3
 800808c:	3601      	adds	r6, #1
 800808e:	e7f2      	b.n	8008076 <__libc_init_array+0x1e>
 8008090:	0800a5c8 	.word	0x0800a5c8
 8008094:	0800a5c8 	.word	0x0800a5c8
 8008098:	0800a5c8 	.word	0x0800a5c8
 800809c:	0800a5d0 	.word	0x0800a5d0

080080a0 <__retarget_lock_init_recursive>:
 80080a0:	4770      	bx	lr

080080a2 <__retarget_lock_acquire>:
 80080a2:	4770      	bx	lr

080080a4 <__retarget_lock_acquire_recursive>:
 80080a4:	4770      	bx	lr

080080a6 <__retarget_lock_release>:
 80080a6:	4770      	bx	lr

080080a8 <__retarget_lock_release_recursive>:
 80080a8:	4770      	bx	lr
	...

080080ac <getentropy>:
 80080ac:	4b02      	ldr	r3, [pc, #8]	@ (80080b8 <getentropy+0xc>)
 80080ae:	460a      	mov	r2, r1
 80080b0:	4601      	mov	r1, r0
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	f000 bc76 	b.w	80089a4 <_getentropy_r>
 80080b8:	24000048 	.word	0x24000048

080080bc <read>:
 80080bc:	4613      	mov	r3, r2
 80080be:	460a      	mov	r2, r1
 80080c0:	4601      	mov	r1, r0
 80080c2:	4802      	ldr	r0, [pc, #8]	@ (80080cc <read+0x10>)
 80080c4:	6800      	ldr	r0, [r0, #0]
 80080c6:	f7ff bf79 	b.w	8007fbc <_read_r>
 80080ca:	bf00      	nop
 80080cc:	24000048 	.word	0x24000048

080080d0 <memcpy>:
 80080d0:	440a      	add	r2, r1
 80080d2:	4291      	cmp	r1, r2
 80080d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d8:	d100      	bne.n	80080dc <memcpy+0xc>
 80080da:	4770      	bx	lr
 80080dc:	b510      	push	{r4, lr}
 80080de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e6:	4291      	cmp	r1, r2
 80080e8:	d1f9      	bne.n	80080de <memcpy+0xe>
 80080ea:	bd10      	pop	{r4, pc}

080080ec <_free_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4605      	mov	r5, r0
 80080f0:	2900      	cmp	r1, #0
 80080f2:	d041      	beq.n	8008178 <_free_r+0x8c>
 80080f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f8:	1f0c      	subs	r4, r1, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfb8      	it	lt
 80080fe:	18e4      	addlt	r4, r4, r3
 8008100:	f7ff fad4 	bl	80076ac <__malloc_lock>
 8008104:	4a1d      	ldr	r2, [pc, #116]	@ (800817c <_free_r+0x90>)
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	b933      	cbnz	r3, 8008118 <_free_r+0x2c>
 800810a:	6063      	str	r3, [r4, #4]
 800810c:	6014      	str	r4, [r2, #0]
 800810e:	4628      	mov	r0, r5
 8008110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008114:	f7ff bad0 	b.w	80076b8 <__malloc_unlock>
 8008118:	42a3      	cmp	r3, r4
 800811a:	d908      	bls.n	800812e <_free_r+0x42>
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	1821      	adds	r1, r4, r0
 8008120:	428b      	cmp	r3, r1
 8008122:	bf01      	itttt	eq
 8008124:	6819      	ldreq	r1, [r3, #0]
 8008126:	685b      	ldreq	r3, [r3, #4]
 8008128:	1809      	addeq	r1, r1, r0
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	e7ed      	b.n	800810a <_free_r+0x1e>
 800812e:	461a      	mov	r2, r3
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b10b      	cbz	r3, 8008138 <_free_r+0x4c>
 8008134:	42a3      	cmp	r3, r4
 8008136:	d9fa      	bls.n	800812e <_free_r+0x42>
 8008138:	6811      	ldr	r1, [r2, #0]
 800813a:	1850      	adds	r0, r2, r1
 800813c:	42a0      	cmp	r0, r4
 800813e:	d10b      	bne.n	8008158 <_free_r+0x6c>
 8008140:	6820      	ldr	r0, [r4, #0]
 8008142:	4401      	add	r1, r0
 8008144:	1850      	adds	r0, r2, r1
 8008146:	4283      	cmp	r3, r0
 8008148:	6011      	str	r1, [r2, #0]
 800814a:	d1e0      	bne.n	800810e <_free_r+0x22>
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	6053      	str	r3, [r2, #4]
 8008152:	4408      	add	r0, r1
 8008154:	6010      	str	r0, [r2, #0]
 8008156:	e7da      	b.n	800810e <_free_r+0x22>
 8008158:	d902      	bls.n	8008160 <_free_r+0x74>
 800815a:	230c      	movs	r3, #12
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	e7d6      	b.n	800810e <_free_r+0x22>
 8008160:	6820      	ldr	r0, [r4, #0]
 8008162:	1821      	adds	r1, r4, r0
 8008164:	428b      	cmp	r3, r1
 8008166:	bf04      	itt	eq
 8008168:	6819      	ldreq	r1, [r3, #0]
 800816a:	685b      	ldreq	r3, [r3, #4]
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	bf04      	itt	eq
 8008170:	1809      	addeq	r1, r1, r0
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	6054      	str	r4, [r2, #4]
 8008176:	e7ca      	b.n	800810e <_free_r+0x22>
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	24001528 	.word	0x24001528

08008180 <__sfputc_r>:
 8008180:	6893      	ldr	r3, [r2, #8]
 8008182:	3b01      	subs	r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	b410      	push	{r4}
 8008188:	6093      	str	r3, [r2, #8]
 800818a:	da08      	bge.n	800819e <__sfputc_r+0x1e>
 800818c:	6994      	ldr	r4, [r2, #24]
 800818e:	42a3      	cmp	r3, r4
 8008190:	db01      	blt.n	8008196 <__sfputc_r+0x16>
 8008192:	290a      	cmp	r1, #10
 8008194:	d103      	bne.n	800819e <__sfputc_r+0x1e>
 8008196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800819a:	f000 bb6b 	b.w	8008874 <__swbuf_r>
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	1c58      	adds	r0, r3, #1
 80081a2:	6010      	str	r0, [r2, #0]
 80081a4:	7019      	strb	r1, [r3, #0]
 80081a6:	4608      	mov	r0, r1
 80081a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <__sfputs_r>:
 80081ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b0:	4606      	mov	r6, r0
 80081b2:	460f      	mov	r7, r1
 80081b4:	4614      	mov	r4, r2
 80081b6:	18d5      	adds	r5, r2, r3
 80081b8:	42ac      	cmp	r4, r5
 80081ba:	d101      	bne.n	80081c0 <__sfputs_r+0x12>
 80081bc:	2000      	movs	r0, #0
 80081be:	e007      	b.n	80081d0 <__sfputs_r+0x22>
 80081c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c4:	463a      	mov	r2, r7
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff ffda 	bl	8008180 <__sfputc_r>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d1f3      	bne.n	80081b8 <__sfputs_r+0xa>
 80081d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081d4 <_vfiprintf_r>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	460d      	mov	r5, r1
 80081da:	b09d      	sub	sp, #116	@ 0x74
 80081dc:	4614      	mov	r4, r2
 80081de:	4698      	mov	r8, r3
 80081e0:	4606      	mov	r6, r0
 80081e2:	b118      	cbz	r0, 80081ec <_vfiprintf_r+0x18>
 80081e4:	6a03      	ldr	r3, [r0, #32]
 80081e6:	b90b      	cbnz	r3, 80081ec <_vfiprintf_r+0x18>
 80081e8:	f7ff fdf0 	bl	8007dcc <__sinit>
 80081ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ee:	07d9      	lsls	r1, r3, #31
 80081f0:	d405      	bmi.n	80081fe <_vfiprintf_r+0x2a>
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	059a      	lsls	r2, r3, #22
 80081f6:	d402      	bmi.n	80081fe <_vfiprintf_r+0x2a>
 80081f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081fa:	f7ff ff53 	bl	80080a4 <__retarget_lock_acquire_recursive>
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	071b      	lsls	r3, r3, #28
 8008202:	d501      	bpl.n	8008208 <_vfiprintf_r+0x34>
 8008204:	692b      	ldr	r3, [r5, #16]
 8008206:	b99b      	cbnz	r3, 8008230 <_vfiprintf_r+0x5c>
 8008208:	4629      	mov	r1, r5
 800820a:	4630      	mov	r0, r6
 800820c:	f000 fb70 	bl	80088f0 <__swsetup_r>
 8008210:	b170      	cbz	r0, 8008230 <_vfiprintf_r+0x5c>
 8008212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008214:	07dc      	lsls	r4, r3, #31
 8008216:	d504      	bpl.n	8008222 <_vfiprintf_r+0x4e>
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	b01d      	add	sp, #116	@ 0x74
 800821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008222:	89ab      	ldrh	r3, [r5, #12]
 8008224:	0598      	lsls	r0, r3, #22
 8008226:	d4f7      	bmi.n	8008218 <_vfiprintf_r+0x44>
 8008228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800822a:	f7ff ff3d 	bl	80080a8 <__retarget_lock_release_recursive>
 800822e:	e7f3      	b.n	8008218 <_vfiprintf_r+0x44>
 8008230:	2300      	movs	r3, #0
 8008232:	9309      	str	r3, [sp, #36]	@ 0x24
 8008234:	2320      	movs	r3, #32
 8008236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800823a:	f8cd 800c 	str.w	r8, [sp, #12]
 800823e:	2330      	movs	r3, #48	@ 0x30
 8008240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083f0 <_vfiprintf_r+0x21c>
 8008244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008248:	f04f 0901 	mov.w	r9, #1
 800824c:	4623      	mov	r3, r4
 800824e:	469a      	mov	sl, r3
 8008250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008254:	b10a      	cbz	r2, 800825a <_vfiprintf_r+0x86>
 8008256:	2a25      	cmp	r2, #37	@ 0x25
 8008258:	d1f9      	bne.n	800824e <_vfiprintf_r+0x7a>
 800825a:	ebba 0b04 	subs.w	fp, sl, r4
 800825e:	d00b      	beq.n	8008278 <_vfiprintf_r+0xa4>
 8008260:	465b      	mov	r3, fp
 8008262:	4622      	mov	r2, r4
 8008264:	4629      	mov	r1, r5
 8008266:	4630      	mov	r0, r6
 8008268:	f7ff ffa1 	bl	80081ae <__sfputs_r>
 800826c:	3001      	adds	r0, #1
 800826e:	f000 80a7 	beq.w	80083c0 <_vfiprintf_r+0x1ec>
 8008272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008274:	445a      	add	r2, fp
 8008276:	9209      	str	r2, [sp, #36]	@ 0x24
 8008278:	f89a 3000 	ldrb.w	r3, [sl]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 809f 	beq.w	80083c0 <_vfiprintf_r+0x1ec>
 8008282:	2300      	movs	r3, #0
 8008284:	f04f 32ff 	mov.w	r2, #4294967295
 8008288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800828c:	f10a 0a01 	add.w	sl, sl, #1
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	9307      	str	r3, [sp, #28]
 8008294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008298:	931a      	str	r3, [sp, #104]	@ 0x68
 800829a:	4654      	mov	r4, sl
 800829c:	2205      	movs	r2, #5
 800829e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a2:	4853      	ldr	r0, [pc, #332]	@ (80083f0 <_vfiprintf_r+0x21c>)
 80082a4:	f7f8 f81c 	bl	80002e0 <memchr>
 80082a8:	9a04      	ldr	r2, [sp, #16]
 80082aa:	b9d8      	cbnz	r0, 80082e4 <_vfiprintf_r+0x110>
 80082ac:	06d1      	lsls	r1, r2, #27
 80082ae:	bf44      	itt	mi
 80082b0:	2320      	movmi	r3, #32
 80082b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082b6:	0713      	lsls	r3, r2, #28
 80082b8:	bf44      	itt	mi
 80082ba:	232b      	movmi	r3, #43	@ 0x2b
 80082bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c0:	f89a 3000 	ldrb.w	r3, [sl]
 80082c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c6:	d015      	beq.n	80082f4 <_vfiprintf_r+0x120>
 80082c8:	9a07      	ldr	r2, [sp, #28]
 80082ca:	4654      	mov	r4, sl
 80082cc:	2000      	movs	r0, #0
 80082ce:	f04f 0c0a 	mov.w	ip, #10
 80082d2:	4621      	mov	r1, r4
 80082d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d8:	3b30      	subs	r3, #48	@ 0x30
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d94b      	bls.n	8008376 <_vfiprintf_r+0x1a2>
 80082de:	b1b0      	cbz	r0, 800830e <_vfiprintf_r+0x13a>
 80082e0:	9207      	str	r2, [sp, #28]
 80082e2:	e014      	b.n	800830e <_vfiprintf_r+0x13a>
 80082e4:	eba0 0308 	sub.w	r3, r0, r8
 80082e8:	fa09 f303 	lsl.w	r3, r9, r3
 80082ec:	4313      	orrs	r3, r2
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	46a2      	mov	sl, r4
 80082f2:	e7d2      	b.n	800829a <_vfiprintf_r+0xc6>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	1d19      	adds	r1, r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	9103      	str	r1, [sp, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfbb      	ittet	lt
 8008300:	425b      	neglt	r3, r3
 8008302:	f042 0202 	orrlt.w	r2, r2, #2
 8008306:	9307      	strge	r3, [sp, #28]
 8008308:	9307      	strlt	r3, [sp, #28]
 800830a:	bfb8      	it	lt
 800830c:	9204      	strlt	r2, [sp, #16]
 800830e:	7823      	ldrb	r3, [r4, #0]
 8008310:	2b2e      	cmp	r3, #46	@ 0x2e
 8008312:	d10a      	bne.n	800832a <_vfiprintf_r+0x156>
 8008314:	7863      	ldrb	r3, [r4, #1]
 8008316:	2b2a      	cmp	r3, #42	@ 0x2a
 8008318:	d132      	bne.n	8008380 <_vfiprintf_r+0x1ac>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	9203      	str	r2, [sp, #12]
 8008322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008326:	3402      	adds	r4, #2
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008400 <_vfiprintf_r+0x22c>
 800832e:	7821      	ldrb	r1, [r4, #0]
 8008330:	2203      	movs	r2, #3
 8008332:	4650      	mov	r0, sl
 8008334:	f7f7 ffd4 	bl	80002e0 <memchr>
 8008338:	b138      	cbz	r0, 800834a <_vfiprintf_r+0x176>
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	eba0 000a 	sub.w	r0, r0, sl
 8008340:	2240      	movs	r2, #64	@ 0x40
 8008342:	4082      	lsls	r2, r0
 8008344:	4313      	orrs	r3, r2
 8008346:	3401      	adds	r4, #1
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834e:	4829      	ldr	r0, [pc, #164]	@ (80083f4 <_vfiprintf_r+0x220>)
 8008350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008354:	2206      	movs	r2, #6
 8008356:	f7f7 ffc3 	bl	80002e0 <memchr>
 800835a:	2800      	cmp	r0, #0
 800835c:	d03f      	beq.n	80083de <_vfiprintf_r+0x20a>
 800835e:	4b26      	ldr	r3, [pc, #152]	@ (80083f8 <_vfiprintf_r+0x224>)
 8008360:	bb1b      	cbnz	r3, 80083aa <_vfiprintf_r+0x1d6>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	3307      	adds	r3, #7
 8008366:	f023 0307 	bic.w	r3, r3, #7
 800836a:	3308      	adds	r3, #8
 800836c:	9303      	str	r3, [sp, #12]
 800836e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008370:	443b      	add	r3, r7
 8008372:	9309      	str	r3, [sp, #36]	@ 0x24
 8008374:	e76a      	b.n	800824c <_vfiprintf_r+0x78>
 8008376:	fb0c 3202 	mla	r2, ip, r2, r3
 800837a:	460c      	mov	r4, r1
 800837c:	2001      	movs	r0, #1
 800837e:	e7a8      	b.n	80082d2 <_vfiprintf_r+0xfe>
 8008380:	2300      	movs	r3, #0
 8008382:	3401      	adds	r4, #1
 8008384:	9305      	str	r3, [sp, #20]
 8008386:	4619      	mov	r1, r3
 8008388:	f04f 0c0a 	mov.w	ip, #10
 800838c:	4620      	mov	r0, r4
 800838e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008392:	3a30      	subs	r2, #48	@ 0x30
 8008394:	2a09      	cmp	r2, #9
 8008396:	d903      	bls.n	80083a0 <_vfiprintf_r+0x1cc>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0c6      	beq.n	800832a <_vfiprintf_r+0x156>
 800839c:	9105      	str	r1, [sp, #20]
 800839e:	e7c4      	b.n	800832a <_vfiprintf_r+0x156>
 80083a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a4:	4604      	mov	r4, r0
 80083a6:	2301      	movs	r3, #1
 80083a8:	e7f0      	b.n	800838c <_vfiprintf_r+0x1b8>
 80083aa:	ab03      	add	r3, sp, #12
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	462a      	mov	r2, r5
 80083b0:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <_vfiprintf_r+0x228>)
 80083b2:	a904      	add	r1, sp, #16
 80083b4:	4630      	mov	r0, r6
 80083b6:	f3af 8000 	nop.w
 80083ba:	4607      	mov	r7, r0
 80083bc:	1c78      	adds	r0, r7, #1
 80083be:	d1d6      	bne.n	800836e <_vfiprintf_r+0x19a>
 80083c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083c2:	07d9      	lsls	r1, r3, #31
 80083c4:	d405      	bmi.n	80083d2 <_vfiprintf_r+0x1fe>
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	059a      	lsls	r2, r3, #22
 80083ca:	d402      	bmi.n	80083d2 <_vfiprintf_r+0x1fe>
 80083cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ce:	f7ff fe6b 	bl	80080a8 <__retarget_lock_release_recursive>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	065b      	lsls	r3, r3, #25
 80083d6:	f53f af1f 	bmi.w	8008218 <_vfiprintf_r+0x44>
 80083da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083dc:	e71e      	b.n	800821c <_vfiprintf_r+0x48>
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <_vfiprintf_r+0x228>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f879 	bl	80084e0 <_printf_i>
 80083ee:	e7e4      	b.n	80083ba <_vfiprintf_r+0x1e6>
 80083f0:	08008cd0 	.word	0x08008cd0
 80083f4:	08008cda 	.word	0x08008cda
 80083f8:	00000000 	.word	0x00000000
 80083fc:	080081af 	.word	0x080081af
 8008400:	08008cd6 	.word	0x08008cd6

08008404 <_printf_common>:
 8008404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008408:	4616      	mov	r6, r2
 800840a:	4698      	mov	r8, r3
 800840c:	688a      	ldr	r2, [r1, #8]
 800840e:	690b      	ldr	r3, [r1, #16]
 8008410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008414:	4293      	cmp	r3, r2
 8008416:	bfb8      	it	lt
 8008418:	4613      	movlt	r3, r2
 800841a:	6033      	str	r3, [r6, #0]
 800841c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008420:	4607      	mov	r7, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b10a      	cbz	r2, 800842a <_printf_common+0x26>
 8008426:	3301      	adds	r3, #1
 8008428:	6033      	str	r3, [r6, #0]
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	0699      	lsls	r1, r3, #26
 800842e:	bf42      	ittt	mi
 8008430:	6833      	ldrmi	r3, [r6, #0]
 8008432:	3302      	addmi	r3, #2
 8008434:	6033      	strmi	r3, [r6, #0]
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	f015 0506 	ands.w	r5, r5, #6
 800843c:	d106      	bne.n	800844c <_printf_common+0x48>
 800843e:	f104 0a19 	add.w	sl, r4, #25
 8008442:	68e3      	ldr	r3, [r4, #12]
 8008444:	6832      	ldr	r2, [r6, #0]
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	42ab      	cmp	r3, r5
 800844a:	dc26      	bgt.n	800849a <_printf_common+0x96>
 800844c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008450:	6822      	ldr	r2, [r4, #0]
 8008452:	3b00      	subs	r3, #0
 8008454:	bf18      	it	ne
 8008456:	2301      	movne	r3, #1
 8008458:	0692      	lsls	r2, r2, #26
 800845a:	d42b      	bmi.n	80084b4 <_printf_common+0xb0>
 800845c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008460:	4641      	mov	r1, r8
 8008462:	4638      	mov	r0, r7
 8008464:	47c8      	blx	r9
 8008466:	3001      	adds	r0, #1
 8008468:	d01e      	beq.n	80084a8 <_printf_common+0xa4>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	6922      	ldr	r2, [r4, #16]
 800846e:	f003 0306 	and.w	r3, r3, #6
 8008472:	2b04      	cmp	r3, #4
 8008474:	bf02      	ittt	eq
 8008476:	68e5      	ldreq	r5, [r4, #12]
 8008478:	6833      	ldreq	r3, [r6, #0]
 800847a:	1aed      	subeq	r5, r5, r3
 800847c:	68a3      	ldr	r3, [r4, #8]
 800847e:	bf0c      	ite	eq
 8008480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008484:	2500      	movne	r5, #0
 8008486:	4293      	cmp	r3, r2
 8008488:	bfc4      	itt	gt
 800848a:	1a9b      	subgt	r3, r3, r2
 800848c:	18ed      	addgt	r5, r5, r3
 800848e:	2600      	movs	r6, #0
 8008490:	341a      	adds	r4, #26
 8008492:	42b5      	cmp	r5, r6
 8008494:	d11a      	bne.n	80084cc <_printf_common+0xc8>
 8008496:	2000      	movs	r0, #0
 8008498:	e008      	b.n	80084ac <_printf_common+0xa8>
 800849a:	2301      	movs	r3, #1
 800849c:	4652      	mov	r2, sl
 800849e:	4641      	mov	r1, r8
 80084a0:	4638      	mov	r0, r7
 80084a2:	47c8      	blx	r9
 80084a4:	3001      	adds	r0, #1
 80084a6:	d103      	bne.n	80084b0 <_printf_common+0xac>
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b0:	3501      	adds	r5, #1
 80084b2:	e7c6      	b.n	8008442 <_printf_common+0x3e>
 80084b4:	18e1      	adds	r1, r4, r3
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	2030      	movs	r0, #48	@ 0x30
 80084ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084be:	4422      	add	r2, r4
 80084c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084c8:	3302      	adds	r3, #2
 80084ca:	e7c7      	b.n	800845c <_printf_common+0x58>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4622      	mov	r2, r4
 80084d0:	4641      	mov	r1, r8
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c8      	blx	r9
 80084d6:	3001      	adds	r0, #1
 80084d8:	d0e6      	beq.n	80084a8 <_printf_common+0xa4>
 80084da:	3601      	adds	r6, #1
 80084dc:	e7d9      	b.n	8008492 <_printf_common+0x8e>
	...

080084e0 <_printf_i>:
 80084e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	7e0f      	ldrb	r7, [r1, #24]
 80084e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084e8:	2f78      	cmp	r7, #120	@ 0x78
 80084ea:	4691      	mov	r9, r2
 80084ec:	4680      	mov	r8, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	469a      	mov	sl, r3
 80084f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084f6:	d807      	bhi.n	8008508 <_printf_i+0x28>
 80084f8:	2f62      	cmp	r7, #98	@ 0x62
 80084fa:	d80a      	bhi.n	8008512 <_printf_i+0x32>
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	f000 80d1 	beq.w	80086a4 <_printf_i+0x1c4>
 8008502:	2f58      	cmp	r7, #88	@ 0x58
 8008504:	f000 80b8 	beq.w	8008678 <_printf_i+0x198>
 8008508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800850c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008510:	e03a      	b.n	8008588 <_printf_i+0xa8>
 8008512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008516:	2b15      	cmp	r3, #21
 8008518:	d8f6      	bhi.n	8008508 <_printf_i+0x28>
 800851a:	a101      	add	r1, pc, #4	@ (adr r1, 8008520 <_printf_i+0x40>)
 800851c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008520:	08008579 	.word	0x08008579
 8008524:	0800858d 	.word	0x0800858d
 8008528:	08008509 	.word	0x08008509
 800852c:	08008509 	.word	0x08008509
 8008530:	08008509 	.word	0x08008509
 8008534:	08008509 	.word	0x08008509
 8008538:	0800858d 	.word	0x0800858d
 800853c:	08008509 	.word	0x08008509
 8008540:	08008509 	.word	0x08008509
 8008544:	08008509 	.word	0x08008509
 8008548:	08008509 	.word	0x08008509
 800854c:	0800868b 	.word	0x0800868b
 8008550:	080085b7 	.word	0x080085b7
 8008554:	08008645 	.word	0x08008645
 8008558:	08008509 	.word	0x08008509
 800855c:	08008509 	.word	0x08008509
 8008560:	080086ad 	.word	0x080086ad
 8008564:	08008509 	.word	0x08008509
 8008568:	080085b7 	.word	0x080085b7
 800856c:	08008509 	.word	0x08008509
 8008570:	08008509 	.word	0x08008509
 8008574:	0800864d 	.word	0x0800864d
 8008578:	6833      	ldr	r3, [r6, #0]
 800857a:	1d1a      	adds	r2, r3, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6032      	str	r2, [r6, #0]
 8008580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008588:	2301      	movs	r3, #1
 800858a:	e09c      	b.n	80086c6 <_printf_i+0x1e6>
 800858c:	6833      	ldr	r3, [r6, #0]
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	1d19      	adds	r1, r3, #4
 8008592:	6031      	str	r1, [r6, #0]
 8008594:	0606      	lsls	r6, r0, #24
 8008596:	d501      	bpl.n	800859c <_printf_i+0xbc>
 8008598:	681d      	ldr	r5, [r3, #0]
 800859a:	e003      	b.n	80085a4 <_printf_i+0xc4>
 800859c:	0645      	lsls	r5, r0, #25
 800859e:	d5fb      	bpl.n	8008598 <_printf_i+0xb8>
 80085a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	da03      	bge.n	80085b0 <_printf_i+0xd0>
 80085a8:	232d      	movs	r3, #45	@ 0x2d
 80085aa:	426d      	negs	r5, r5
 80085ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085b0:	4858      	ldr	r0, [pc, #352]	@ (8008714 <_printf_i+0x234>)
 80085b2:	230a      	movs	r3, #10
 80085b4:	e011      	b.n	80085da <_printf_i+0xfa>
 80085b6:	6821      	ldr	r1, [r4, #0]
 80085b8:	6833      	ldr	r3, [r6, #0]
 80085ba:	0608      	lsls	r0, r1, #24
 80085bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80085c0:	d402      	bmi.n	80085c8 <_printf_i+0xe8>
 80085c2:	0649      	lsls	r1, r1, #25
 80085c4:	bf48      	it	mi
 80085c6:	b2ad      	uxthmi	r5, r5
 80085c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80085ca:	4852      	ldr	r0, [pc, #328]	@ (8008714 <_printf_i+0x234>)
 80085cc:	6033      	str	r3, [r6, #0]
 80085ce:	bf14      	ite	ne
 80085d0:	230a      	movne	r3, #10
 80085d2:	2308      	moveq	r3, #8
 80085d4:	2100      	movs	r1, #0
 80085d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085da:	6866      	ldr	r6, [r4, #4]
 80085dc:	60a6      	str	r6, [r4, #8]
 80085de:	2e00      	cmp	r6, #0
 80085e0:	db05      	blt.n	80085ee <_printf_i+0x10e>
 80085e2:	6821      	ldr	r1, [r4, #0]
 80085e4:	432e      	orrs	r6, r5
 80085e6:	f021 0104 	bic.w	r1, r1, #4
 80085ea:	6021      	str	r1, [r4, #0]
 80085ec:	d04b      	beq.n	8008686 <_printf_i+0x1a6>
 80085ee:	4616      	mov	r6, r2
 80085f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80085f4:	fb03 5711 	mls	r7, r3, r1, r5
 80085f8:	5dc7      	ldrb	r7, [r0, r7]
 80085fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085fe:	462f      	mov	r7, r5
 8008600:	42bb      	cmp	r3, r7
 8008602:	460d      	mov	r5, r1
 8008604:	d9f4      	bls.n	80085f0 <_printf_i+0x110>
 8008606:	2b08      	cmp	r3, #8
 8008608:	d10b      	bne.n	8008622 <_printf_i+0x142>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	07df      	lsls	r7, r3, #31
 800860e:	d508      	bpl.n	8008622 <_printf_i+0x142>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	6861      	ldr	r1, [r4, #4]
 8008614:	4299      	cmp	r1, r3
 8008616:	bfde      	ittt	le
 8008618:	2330      	movle	r3, #48	@ 0x30
 800861a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800861e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008622:	1b92      	subs	r2, r2, r6
 8008624:	6122      	str	r2, [r4, #16]
 8008626:	f8cd a000 	str.w	sl, [sp]
 800862a:	464b      	mov	r3, r9
 800862c:	aa03      	add	r2, sp, #12
 800862e:	4621      	mov	r1, r4
 8008630:	4640      	mov	r0, r8
 8008632:	f7ff fee7 	bl	8008404 <_printf_common>
 8008636:	3001      	adds	r0, #1
 8008638:	d14a      	bne.n	80086d0 <_printf_i+0x1f0>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	b004      	add	sp, #16
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f043 0320 	orr.w	r3, r3, #32
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	4832      	ldr	r0, [pc, #200]	@ (8008718 <_printf_i+0x238>)
 800864e:	2778      	movs	r7, #120	@ 0x78
 8008650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	6831      	ldr	r1, [r6, #0]
 8008658:	061f      	lsls	r7, r3, #24
 800865a:	f851 5b04 	ldr.w	r5, [r1], #4
 800865e:	d402      	bmi.n	8008666 <_printf_i+0x186>
 8008660:	065f      	lsls	r7, r3, #25
 8008662:	bf48      	it	mi
 8008664:	b2ad      	uxthmi	r5, r5
 8008666:	6031      	str	r1, [r6, #0]
 8008668:	07d9      	lsls	r1, r3, #31
 800866a:	bf44      	itt	mi
 800866c:	f043 0320 	orrmi.w	r3, r3, #32
 8008670:	6023      	strmi	r3, [r4, #0]
 8008672:	b11d      	cbz	r5, 800867c <_printf_i+0x19c>
 8008674:	2310      	movs	r3, #16
 8008676:	e7ad      	b.n	80085d4 <_printf_i+0xf4>
 8008678:	4826      	ldr	r0, [pc, #152]	@ (8008714 <_printf_i+0x234>)
 800867a:	e7e9      	b.n	8008650 <_printf_i+0x170>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	f023 0320 	bic.w	r3, r3, #32
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	e7f6      	b.n	8008674 <_printf_i+0x194>
 8008686:	4616      	mov	r6, r2
 8008688:	e7bd      	b.n	8008606 <_printf_i+0x126>
 800868a:	6833      	ldr	r3, [r6, #0]
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	6961      	ldr	r1, [r4, #20]
 8008690:	1d18      	adds	r0, r3, #4
 8008692:	6030      	str	r0, [r6, #0]
 8008694:	062e      	lsls	r6, r5, #24
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	d501      	bpl.n	800869e <_printf_i+0x1be>
 800869a:	6019      	str	r1, [r3, #0]
 800869c:	e002      	b.n	80086a4 <_printf_i+0x1c4>
 800869e:	0668      	lsls	r0, r5, #25
 80086a0:	d5fb      	bpl.n	800869a <_printf_i+0x1ba>
 80086a2:	8019      	strh	r1, [r3, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	4616      	mov	r6, r2
 80086aa:	e7bc      	b.n	8008626 <_printf_i+0x146>
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	1d1a      	adds	r2, r3, #4
 80086b0:	6032      	str	r2, [r6, #0]
 80086b2:	681e      	ldr	r6, [r3, #0]
 80086b4:	6862      	ldr	r2, [r4, #4]
 80086b6:	2100      	movs	r1, #0
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7f7 fe11 	bl	80002e0 <memchr>
 80086be:	b108      	cbz	r0, 80086c4 <_printf_i+0x1e4>
 80086c0:	1b80      	subs	r0, r0, r6
 80086c2:	6060      	str	r0, [r4, #4]
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	2300      	movs	r3, #0
 80086ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ce:	e7aa      	b.n	8008626 <_printf_i+0x146>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	4632      	mov	r2, r6
 80086d4:	4649      	mov	r1, r9
 80086d6:	4640      	mov	r0, r8
 80086d8:	47d0      	blx	sl
 80086da:	3001      	adds	r0, #1
 80086dc:	d0ad      	beq.n	800863a <_printf_i+0x15a>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	079b      	lsls	r3, r3, #30
 80086e2:	d413      	bmi.n	800870c <_printf_i+0x22c>
 80086e4:	68e0      	ldr	r0, [r4, #12]
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	4298      	cmp	r0, r3
 80086ea:	bfb8      	it	lt
 80086ec:	4618      	movlt	r0, r3
 80086ee:	e7a6      	b.n	800863e <_printf_i+0x15e>
 80086f0:	2301      	movs	r3, #1
 80086f2:	4632      	mov	r2, r6
 80086f4:	4649      	mov	r1, r9
 80086f6:	4640      	mov	r0, r8
 80086f8:	47d0      	blx	sl
 80086fa:	3001      	adds	r0, #1
 80086fc:	d09d      	beq.n	800863a <_printf_i+0x15a>
 80086fe:	3501      	adds	r5, #1
 8008700:	68e3      	ldr	r3, [r4, #12]
 8008702:	9903      	ldr	r1, [sp, #12]
 8008704:	1a5b      	subs	r3, r3, r1
 8008706:	42ab      	cmp	r3, r5
 8008708:	dcf2      	bgt.n	80086f0 <_printf_i+0x210>
 800870a:	e7eb      	b.n	80086e4 <_printf_i+0x204>
 800870c:	2500      	movs	r5, #0
 800870e:	f104 0619 	add.w	r6, r4, #25
 8008712:	e7f5      	b.n	8008700 <_printf_i+0x220>
 8008714:	08008ce1 	.word	0x08008ce1
 8008718:	08008cf2 	.word	0x08008cf2

0800871c <__sflush_r>:
 800871c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	0716      	lsls	r6, r2, #28
 8008726:	4605      	mov	r5, r0
 8008728:	460c      	mov	r4, r1
 800872a:	d454      	bmi.n	80087d6 <__sflush_r+0xba>
 800872c:	684b      	ldr	r3, [r1, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	dc02      	bgt.n	8008738 <__sflush_r+0x1c>
 8008732:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	dd48      	ble.n	80087ca <__sflush_r+0xae>
 8008738:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800873a:	2e00      	cmp	r6, #0
 800873c:	d045      	beq.n	80087ca <__sflush_r+0xae>
 800873e:	2300      	movs	r3, #0
 8008740:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008744:	682f      	ldr	r7, [r5, #0]
 8008746:	6a21      	ldr	r1, [r4, #32]
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	d030      	beq.n	80087ae <__sflush_r+0x92>
 800874c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	0759      	lsls	r1, r3, #29
 8008752:	d505      	bpl.n	8008760 <__sflush_r+0x44>
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	1ad2      	subs	r2, r2, r3
 8008758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800875a:	b10b      	cbz	r3, 8008760 <__sflush_r+0x44>
 800875c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800875e:	1ad2      	subs	r2, r2, r3
 8008760:	2300      	movs	r3, #0
 8008762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008764:	6a21      	ldr	r1, [r4, #32]
 8008766:	4628      	mov	r0, r5
 8008768:	47b0      	blx	r6
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	d106      	bne.n	800877e <__sflush_r+0x62>
 8008770:	6829      	ldr	r1, [r5, #0]
 8008772:	291d      	cmp	r1, #29
 8008774:	d82b      	bhi.n	80087ce <__sflush_r+0xb2>
 8008776:	4a2a      	ldr	r2, [pc, #168]	@ (8008820 <__sflush_r+0x104>)
 8008778:	40ca      	lsrs	r2, r1
 800877a:	07d6      	lsls	r6, r2, #31
 800877c:	d527      	bpl.n	80087ce <__sflush_r+0xb2>
 800877e:	2200      	movs	r2, #0
 8008780:	6062      	str	r2, [r4, #4]
 8008782:	04d9      	lsls	r1, r3, #19
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	6022      	str	r2, [r4, #0]
 8008788:	d504      	bpl.n	8008794 <__sflush_r+0x78>
 800878a:	1c42      	adds	r2, r0, #1
 800878c:	d101      	bne.n	8008792 <__sflush_r+0x76>
 800878e:	682b      	ldr	r3, [r5, #0]
 8008790:	b903      	cbnz	r3, 8008794 <__sflush_r+0x78>
 8008792:	6560      	str	r0, [r4, #84]	@ 0x54
 8008794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008796:	602f      	str	r7, [r5, #0]
 8008798:	b1b9      	cbz	r1, 80087ca <__sflush_r+0xae>
 800879a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800879e:	4299      	cmp	r1, r3
 80087a0:	d002      	beq.n	80087a8 <__sflush_r+0x8c>
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7ff fca2 	bl	80080ec <_free_r>
 80087a8:	2300      	movs	r3, #0
 80087aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80087ac:	e00d      	b.n	80087ca <__sflush_r+0xae>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b0      	blx	r6
 80087b4:	4602      	mov	r2, r0
 80087b6:	1c50      	adds	r0, r2, #1
 80087b8:	d1c9      	bne.n	800874e <__sflush_r+0x32>
 80087ba:	682b      	ldr	r3, [r5, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d0c6      	beq.n	800874e <__sflush_r+0x32>
 80087c0:	2b1d      	cmp	r3, #29
 80087c2:	d001      	beq.n	80087c8 <__sflush_r+0xac>
 80087c4:	2b16      	cmp	r3, #22
 80087c6:	d11e      	bne.n	8008806 <__sflush_r+0xea>
 80087c8:	602f      	str	r7, [r5, #0]
 80087ca:	2000      	movs	r0, #0
 80087cc:	e022      	b.n	8008814 <__sflush_r+0xf8>
 80087ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d2:	b21b      	sxth	r3, r3
 80087d4:	e01b      	b.n	800880e <__sflush_r+0xf2>
 80087d6:	690f      	ldr	r7, [r1, #16]
 80087d8:	2f00      	cmp	r7, #0
 80087da:	d0f6      	beq.n	80087ca <__sflush_r+0xae>
 80087dc:	0793      	lsls	r3, r2, #30
 80087de:	680e      	ldr	r6, [r1, #0]
 80087e0:	bf08      	it	eq
 80087e2:	694b      	ldreq	r3, [r1, #20]
 80087e4:	600f      	str	r7, [r1, #0]
 80087e6:	bf18      	it	ne
 80087e8:	2300      	movne	r3, #0
 80087ea:	eba6 0807 	sub.w	r8, r6, r7
 80087ee:	608b      	str	r3, [r1, #8]
 80087f0:	f1b8 0f00 	cmp.w	r8, #0
 80087f4:	dde9      	ble.n	80087ca <__sflush_r+0xae>
 80087f6:	6a21      	ldr	r1, [r4, #32]
 80087f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087fa:	4643      	mov	r3, r8
 80087fc:	463a      	mov	r2, r7
 80087fe:	4628      	mov	r0, r5
 8008800:	47b0      	blx	r6
 8008802:	2800      	cmp	r0, #0
 8008804:	dc08      	bgt.n	8008818 <__sflush_r+0xfc>
 8008806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	f04f 30ff 	mov.w	r0, #4294967295
 8008814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008818:	4407      	add	r7, r0
 800881a:	eba8 0800 	sub.w	r8, r8, r0
 800881e:	e7e7      	b.n	80087f0 <__sflush_r+0xd4>
 8008820:	20400001 	.word	0x20400001

08008824 <_fflush_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	690b      	ldr	r3, [r1, #16]
 8008828:	4605      	mov	r5, r0
 800882a:	460c      	mov	r4, r1
 800882c:	b913      	cbnz	r3, 8008834 <_fflush_r+0x10>
 800882e:	2500      	movs	r5, #0
 8008830:	4628      	mov	r0, r5
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	b118      	cbz	r0, 800883e <_fflush_r+0x1a>
 8008836:	6a03      	ldr	r3, [r0, #32]
 8008838:	b90b      	cbnz	r3, 800883e <_fflush_r+0x1a>
 800883a:	f7ff fac7 	bl	8007dcc <__sinit>
 800883e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0f3      	beq.n	800882e <_fflush_r+0xa>
 8008846:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008848:	07d0      	lsls	r0, r2, #31
 800884a:	d404      	bmi.n	8008856 <_fflush_r+0x32>
 800884c:	0599      	lsls	r1, r3, #22
 800884e:	d402      	bmi.n	8008856 <_fflush_r+0x32>
 8008850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008852:	f7ff fc27 	bl	80080a4 <__retarget_lock_acquire_recursive>
 8008856:	4628      	mov	r0, r5
 8008858:	4621      	mov	r1, r4
 800885a:	f7ff ff5f 	bl	800871c <__sflush_r>
 800885e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008860:	07da      	lsls	r2, r3, #31
 8008862:	4605      	mov	r5, r0
 8008864:	d4e4      	bmi.n	8008830 <_fflush_r+0xc>
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	059b      	lsls	r3, r3, #22
 800886a:	d4e1      	bmi.n	8008830 <_fflush_r+0xc>
 800886c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800886e:	f7ff fc1b 	bl	80080a8 <__retarget_lock_release_recursive>
 8008872:	e7dd      	b.n	8008830 <_fflush_r+0xc>

08008874 <__swbuf_r>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	460e      	mov	r6, r1
 8008878:	4614      	mov	r4, r2
 800887a:	4605      	mov	r5, r0
 800887c:	b118      	cbz	r0, 8008886 <__swbuf_r+0x12>
 800887e:	6a03      	ldr	r3, [r0, #32]
 8008880:	b90b      	cbnz	r3, 8008886 <__swbuf_r+0x12>
 8008882:	f7ff faa3 	bl	8007dcc <__sinit>
 8008886:	69a3      	ldr	r3, [r4, #24]
 8008888:	60a3      	str	r3, [r4, #8]
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	071a      	lsls	r2, r3, #28
 800888e:	d501      	bpl.n	8008894 <__swbuf_r+0x20>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	b943      	cbnz	r3, 80088a6 <__swbuf_r+0x32>
 8008894:	4621      	mov	r1, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f000 f82a 	bl	80088f0 <__swsetup_r>
 800889c:	b118      	cbz	r0, 80088a6 <__swbuf_r+0x32>
 800889e:	f04f 37ff 	mov.w	r7, #4294967295
 80088a2:	4638      	mov	r0, r7
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	6922      	ldr	r2, [r4, #16]
 80088aa:	1a98      	subs	r0, r3, r2
 80088ac:	6963      	ldr	r3, [r4, #20]
 80088ae:	b2f6      	uxtb	r6, r6
 80088b0:	4283      	cmp	r3, r0
 80088b2:	4637      	mov	r7, r6
 80088b4:	dc05      	bgt.n	80088c2 <__swbuf_r+0x4e>
 80088b6:	4621      	mov	r1, r4
 80088b8:	4628      	mov	r0, r5
 80088ba:	f7ff ffb3 	bl	8008824 <_fflush_r>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d1ed      	bne.n	800889e <__swbuf_r+0x2a>
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	60a3      	str	r3, [r4, #8]
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	701e      	strb	r6, [r3, #0]
 80088d0:	6962      	ldr	r2, [r4, #20]
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d004      	beq.n	80088e2 <__swbuf_r+0x6e>
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	07db      	lsls	r3, r3, #31
 80088dc:	d5e1      	bpl.n	80088a2 <__swbuf_r+0x2e>
 80088de:	2e0a      	cmp	r6, #10
 80088e0:	d1df      	bne.n	80088a2 <__swbuf_r+0x2e>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	f7ff ff9d 	bl	8008824 <_fflush_r>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d0d9      	beq.n	80088a2 <__swbuf_r+0x2e>
 80088ee:	e7d6      	b.n	800889e <__swbuf_r+0x2a>

080088f0 <__swsetup_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4b29      	ldr	r3, [pc, #164]	@ (8008998 <__swsetup_r+0xa8>)
 80088f4:	4605      	mov	r5, r0
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	460c      	mov	r4, r1
 80088fa:	b118      	cbz	r0, 8008904 <__swsetup_r+0x14>
 80088fc:	6a03      	ldr	r3, [r0, #32]
 80088fe:	b90b      	cbnz	r3, 8008904 <__swsetup_r+0x14>
 8008900:	f7ff fa64 	bl	8007dcc <__sinit>
 8008904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008908:	0719      	lsls	r1, r3, #28
 800890a:	d422      	bmi.n	8008952 <__swsetup_r+0x62>
 800890c:	06da      	lsls	r2, r3, #27
 800890e:	d407      	bmi.n	8008920 <__swsetup_r+0x30>
 8008910:	2209      	movs	r2, #9
 8008912:	602a      	str	r2, [r5, #0]
 8008914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	e033      	b.n	8008988 <__swsetup_r+0x98>
 8008920:	0758      	lsls	r0, r3, #29
 8008922:	d512      	bpl.n	800894a <__swsetup_r+0x5a>
 8008924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008926:	b141      	cbz	r1, 800893a <__swsetup_r+0x4a>
 8008928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800892c:	4299      	cmp	r1, r3
 800892e:	d002      	beq.n	8008936 <__swsetup_r+0x46>
 8008930:	4628      	mov	r0, r5
 8008932:	f7ff fbdb 	bl	80080ec <_free_r>
 8008936:	2300      	movs	r3, #0
 8008938:	6363      	str	r3, [r4, #52]	@ 0x34
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	2300      	movs	r3, #0
 8008944:	6063      	str	r3, [r4, #4]
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	f043 0308 	orr.w	r3, r3, #8
 8008950:	81a3      	strh	r3, [r4, #12]
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	b94b      	cbnz	r3, 800896a <__swsetup_r+0x7a>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800895c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008960:	d003      	beq.n	800896a <__swsetup_r+0x7a>
 8008962:	4621      	mov	r1, r4
 8008964:	4628      	mov	r0, r5
 8008966:	f000 f855 	bl	8008a14 <__smakebuf_r>
 800896a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800896e:	f013 0201 	ands.w	r2, r3, #1
 8008972:	d00a      	beq.n	800898a <__swsetup_r+0x9a>
 8008974:	2200      	movs	r2, #0
 8008976:	60a2      	str	r2, [r4, #8]
 8008978:	6962      	ldr	r2, [r4, #20]
 800897a:	4252      	negs	r2, r2
 800897c:	61a2      	str	r2, [r4, #24]
 800897e:	6922      	ldr	r2, [r4, #16]
 8008980:	b942      	cbnz	r2, 8008994 <__swsetup_r+0xa4>
 8008982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008986:	d1c5      	bne.n	8008914 <__swsetup_r+0x24>
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	0799      	lsls	r1, r3, #30
 800898c:	bf58      	it	pl
 800898e:	6962      	ldrpl	r2, [r4, #20]
 8008990:	60a2      	str	r2, [r4, #8]
 8008992:	e7f4      	b.n	800897e <__swsetup_r+0x8e>
 8008994:	2000      	movs	r0, #0
 8008996:	e7f7      	b.n	8008988 <__swsetup_r+0x98>
 8008998:	24000048 	.word	0x24000048

0800899c <bzero>:
 800899c:	460a      	mov	r2, r1
 800899e:	2100      	movs	r1, #0
 80089a0:	f7ff bab1 	b.w	8007f06 <memset>

080089a4 <_getentropy_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d07      	ldr	r5, [pc, #28]	@ (80089c4 <_getentropy_r+0x20>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	4611      	mov	r1, r2
 80089b0:	602b      	str	r3, [r5, #0]
 80089b2:	f000 f88d 	bl	8008ad0 <_getentropy>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d102      	bne.n	80089c0 <_getentropy_r+0x1c>
 80089ba:	682b      	ldr	r3, [r5, #0]
 80089bc:	b103      	cbz	r3, 80089c0 <_getentropy_r+0x1c>
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	bd38      	pop	{r3, r4, r5, pc}
 80089c2:	bf00      	nop
 80089c4:	24001ab8 	.word	0x24001ab8

080089c8 <__swhatbuf_r>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	460c      	mov	r4, r1
 80089cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d0:	2900      	cmp	r1, #0
 80089d2:	b096      	sub	sp, #88	@ 0x58
 80089d4:	4615      	mov	r5, r2
 80089d6:	461e      	mov	r6, r3
 80089d8:	da0d      	bge.n	80089f6 <__swhatbuf_r+0x2e>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089e0:	f04f 0100 	mov.w	r1, #0
 80089e4:	bf14      	ite	ne
 80089e6:	2340      	movne	r3, #64	@ 0x40
 80089e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089ec:	2000      	movs	r0, #0
 80089ee:	6031      	str	r1, [r6, #0]
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	b016      	add	sp, #88	@ 0x58
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	466a      	mov	r2, sp
 80089f8:	f000 f848 	bl	8008a8c <_fstat_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	dbec      	blt.n	80089da <__swhatbuf_r+0x12>
 8008a00:	9901      	ldr	r1, [sp, #4]
 8008a02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a0a:	4259      	negs	r1, r3
 8008a0c:	4159      	adcs	r1, r3
 8008a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a12:	e7eb      	b.n	80089ec <__swhatbuf_r+0x24>

08008a14 <__smakebuf_r>:
 8008a14:	898b      	ldrh	r3, [r1, #12]
 8008a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a18:	079d      	lsls	r5, r3, #30
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	d507      	bpl.n	8008a30 <__smakebuf_r+0x1c>
 8008a20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	6123      	str	r3, [r4, #16]
 8008a28:	2301      	movs	r3, #1
 8008a2a:	6163      	str	r3, [r4, #20]
 8008a2c:	b003      	add	sp, #12
 8008a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a30:	ab01      	add	r3, sp, #4
 8008a32:	466a      	mov	r2, sp
 8008a34:	f7ff ffc8 	bl	80089c8 <__swhatbuf_r>
 8008a38:	9f00      	ldr	r7, [sp, #0]
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7fe fdb4 	bl	80075ac <_malloc_r>
 8008a44:	b948      	cbnz	r0, 8008a5a <__smakebuf_r+0x46>
 8008a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4a:	059a      	lsls	r2, r3, #22
 8008a4c:	d4ee      	bmi.n	8008a2c <__smakebuf_r+0x18>
 8008a4e:	f023 0303 	bic.w	r3, r3, #3
 8008a52:	f043 0302 	orr.w	r3, r3, #2
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	e7e2      	b.n	8008a20 <__smakebuf_r+0xc>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	6020      	str	r0, [r4, #0]
 8008a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a6a:	b15b      	cbz	r3, 8008a84 <__smakebuf_r+0x70>
 8008a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 f81d 	bl	8008ab0 <_isatty_r>
 8008a76:	b128      	cbz	r0, 8008a84 <__smakebuf_r+0x70>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	431d      	orrs	r5, r3
 8008a88:	81a5      	strh	r5, [r4, #12]
 8008a8a:	e7cf      	b.n	8008a2c <__smakebuf_r+0x18>

08008a8c <_fstat_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d07      	ldr	r5, [pc, #28]	@ (8008aac <_fstat_r+0x20>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	602b      	str	r3, [r5, #0]
 8008a9a:	f7f7 fff7 	bl	8000a8c <_fstat>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	d102      	bne.n	8008aa8 <_fstat_r+0x1c>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	b103      	cbz	r3, 8008aa8 <_fstat_r+0x1c>
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	bd38      	pop	{r3, r4, r5, pc}
 8008aaa:	bf00      	nop
 8008aac:	24001ab8 	.word	0x24001ab8

08008ab0 <_isatty_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	@ (8008acc <_isatty_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f7 fff6 	bl	8000aac <_isatty>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_isatty_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_isatty_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	24001ab8 	.word	0x24001ab8

08008ad0 <_getentropy>:
 8008ad0:	4b02      	ldr	r3, [pc, #8]	@ (8008adc <_getentropy+0xc>)
 8008ad2:	2258      	movs	r2, #88	@ 0x58
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ada:	4770      	bx	lr
 8008adc:	24001ab8 	.word	0x24001ab8

08008ae0 <_init>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr

08008aec <_fini>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr
